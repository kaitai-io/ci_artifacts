<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="160" passed="159">
  <reporter-output>
  </reporter-output>
  <suite name="Kaitai Struct Java specs" duration-ms="342" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
    <groups>
    </groups>
    <test name="all" duration-ms="342" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
      <class name="io.kaitai.struct.spec.TestNestedSameName2">
        <test-method status="PASS" signature="testNestedSameName2()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName2@24fa3f16]" name="testNestedSameName2" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName2 -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianMod">
        <test-method status="PASS" signature="testDefaultEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianMod@6e059e40]" name="testDefaultEndianMod" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianMod -->
      <class name="io.kaitai.struct.spec.TestIndexToParamUntil">
        <test-method status="PASS" signature="testIndexToParamUntil()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamUntil@6d287249]" name="testIndexToParamUntil" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamUntil -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamUntil -->
      <class name="io.kaitai.struct.spec.TestImportsRel1">
        <test-method status="PASS" signature="testImportsRel1()[pri:0, instance:io.kaitai.struct.spec.TestImportsRel1@2d2d427]" name="testImportsRel1" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsRel1 -->
      </class> <!-- io.kaitai.struct.spec.TestImportsRel1 -->
      <class name="io.kaitai.struct.spec.TestNavParentVsValueInst">
        <test-method status="PASS" signature="testNavParentVsValueInst()[pri:0, instance:io.kaitai.struct.spec.TestNavParentVsValueInst@e478e18]" name="testNavParentVsValueInst" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentVsValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentVsValueInst -->
      <class name="io.kaitai.struct.spec.TestInstanceIoUser">
        <test-method status="PASS" signature="testInstanceIoUser()[pri:0, instance:io.kaitai.struct.spec.TestInstanceIoUser@6e27e9cc]" name="testInstanceIoUser" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceIoUser -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceIoUser -->
      <class name="io.kaitai.struct.spec.TestIoLocalVar">
        <test-method status="PASS" signature="testIoLocalVar()[pri:0, instance:io.kaitai.struct.spec.TestIoLocalVar@e068b6a]" name="testIoLocalVar" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIoLocalVar -->
      </class> <!-- io.kaitai.struct.spec.TestIoLocalVar -->
      <class name="io.kaitai.struct.spec.TestIfValues">
        <test-method status="PASS" signature="testIfValues()[pri:0, instance:io.kaitai.struct.spec.TestIfValues@660d209b]" name="testIfValues" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfValues -->
      </class> <!-- io.kaitai.struct.spec.TestIfValues -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSize">
        <test-method status="PASS" signature="testSwitchManualIntSize()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSize@7d90abb9]" name="testSwitchManualIntSize" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSize -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSize -->
      <class name="io.kaitai.struct.spec.TestValidFailEqBytes">
        <test-method status="PASS" signature="testValidFailEqBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqBytes@e1a8f49]" name="testValidFailEqBytes" duration-ms="4" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailEqBytes._read(ValidFailEqBytes.java:33)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:28)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:17)
	at io.kaitai.struct.testformats.ValidFailEqBytes.fromFile(ValidFailEqBytes.java:13)
	at io.kaitai.struct.spec.TestValidFailEqBytes.testValidFailEqBytes(TestValidFailEqBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqBytes -->
      <class name="io.kaitai.struct.spec.TestValidFailEqInt">
        <test-method status="PASS" signature="testValidFailEqInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqInt@5f664de3]" name="testValidFailEqInt" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not equal, expected 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 1: validation failed: not equal, expected 123, but got 80
	at io.kaitai.struct.testformats.ValidFailEqInt._read(ValidFailEqInt.java:32)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:27)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:16)
	at io.kaitai.struct.testformats.ValidFailEqInt.fromFile(ValidFailEqInt.java:12)
	at io.kaitai.struct.spec.TestValidFailEqInt.testValidFailEqInt(TestValidFailEqInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqInt -->
      <class name="io.kaitai.struct.spec.TestParamsDef">
        <test-method status="PASS" signature="testParamsDef()[pri:0, instance:io.kaitai.struct.spec.TestParamsDef@7567e1fa]" name="testParamsDef" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsDef -->
      </class> <!-- io.kaitai.struct.spec.TestParamsDef -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStr">
        <test-method status="PASS" signature="testSwitchManualStr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStr@5f297ee0]" name="testSwitchManualStr" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStr -->
      <class name="io.kaitai.struct.spec.TestRepeatEosStruct">
        <test-method status="PASS" signature="testRepeatEosStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosStruct@2befdb3]" name="testRepeatEosStruct" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosStruct -->
      <class name="io.kaitai.struct.spec.TestTsPacketHeader">
        <test-method status="PASS" signature="testTsPacketHeader()[pri:0, instance:io.kaitai.struct.spec.TestTsPacketHeader@43cfd989]" name="testTsPacketHeader" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTsPacketHeader -->
      </class> <!-- io.kaitai.struct.spec.TestTsPacketHeader -->
      <class name="io.kaitai.struct.spec.TestProcessRotate">
        <test-method status="PASS" signature="testProcessRotate()[pri:0, instance:io.kaitai.struct.spec.TestProcessRotate@1feb0edd]" name="testProcessRotate" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRotate -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRotate -->
      <class name="io.kaitai.struct.spec.TestNavParent2">
        <test-method status="PASS" signature="testNavParent2()[pri:0, instance:io.kaitai.struct.spec.TestNavParent2@466b56b]" name="testNavParent2" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent2 -->
      <class name="io.kaitai.struct.spec.TestInstanceStd">
        <test-method status="PASS" signature="testInstanceStd()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStd@249fa95c]" name="testInstanceStd" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStd -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStd -->
      <class name="io.kaitai.struct.spec.TestNavParent3">
        <test-method status="PASS" signature="testNavParent3()[pri:0, instance:io.kaitai.struct.spec.TestNavParent3@67635d96]" name="testNavParent3" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent3 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent3 -->
      <class name="io.kaitai.struct.spec.TestEnumForUnknownId">
        <test-method status="PASS" signature="testEnumForUnknownId()[pri:0, instance:io.kaitai.struct.spec.TestEnumForUnknownId@77022b73]" name="testEnumForUnknownId" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumForUnknownId -->
      </class> <!-- io.kaitai.struct.spec.TestEnumForUnknownId -->
      <class name="io.kaitai.struct.spec.TestNestedTypes">
        <test-method status="PASS" signature="testNestedTypes()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes@5a4bccdd]" name="testNestedTypes" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Const">
        <test-method status="PASS" signature="testProcessXor4Const()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Const@351459e9]" name="testProcessXor4Const" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Const -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Const -->
      <class name="io.kaitai.struct.spec.TestInstanceStdArray">
        <test-method status="PASS" signature="testInstanceStdArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStdArray@1459e0e5]" name="testInstanceStdArray" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStdArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStdArray -->
      <class name="io.kaitai.struct.spec.TestSwitchMultiBoolOps">
        <test-method status="PASS" signature="testSwitchMultiBoolOps()[pri:0, instance:io.kaitai.struct.spec.TestSwitchMultiBoolOps@1c10b182]" name="testSwitchMultiBoolOps" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchMultiBoolOps -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchMultiBoolOps -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceSwitch">
        <test-method status="PASS" signature="testProcessCoerceSwitch()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceSwitch@7310860e]" name="testProcessCoerceSwitch" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceSwitch -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeEos">
        <test-method status="PASS" signature="testSwitchManualIntSizeEos()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeEos@717f0c8f]" name="testSwitchManualIntSizeEos" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeEos -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeEos -->
      <class name="io.kaitai.struct.spec.TestParamsPassUsertype">
        <test-method status="PASS" signature="testParamsPassUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassUsertype@3a8c9a17]" name="testParamsPassUsertype" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassUsertype -->
      <class name="io.kaitai.struct.spec.TestFixedContents">
        <test-method status="PASS" signature="testFixedContents()[pri:0, instance:io.kaitai.struct.spec.TestFixedContents@20b575f3]" name="testFixedContents" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedContents -->
      </class> <!-- io.kaitai.struct.spec.TestFixedContents -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocrefMulti">
        <test-method status="PASS" signature="testDocstringsDocrefMulti()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocrefMulti@91151ba]" name="testDocstringsDocrefMulti" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocrefMulti -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocrefMulti -->
      <class name="io.kaitai.struct.spec.TestZlibWithHeader78">
        <test-method status="PASS" signature="testZlibWithHeader78()[pri:0, instance:io.kaitai.struct.spec.TestZlibWithHeader78@500c8efc]" name="testZlibWithHeader78" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibWithHeader78 -->
      </class> <!-- io.kaitai.struct.spec.TestZlibWithHeader78 -->
      <class name="io.kaitai.struct.spec.TestNavRoot">
        <test-method status="PASS" signature="testNavRoot()[pri:0, instance:io.kaitai.struct.spec.TestNavRoot@2cfd88b5]" name="testNavRoot" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavRoot -->
      </class> <!-- io.kaitai.struct.spec.TestNavRoot -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStrElse">
        <test-method status="PASS" signature="testSwitchManualStrElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStrElse@3a1cd84e]" name="testSwitchManualStrElse" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStrElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStrElse -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeLe">
        <test-method status="PASS" signature="testBcdUserTypeLe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeLe@41d13c26]" name="testBcdUserTypeLe" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeLe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeLe -->
      <class name="io.kaitai.struct.spec.TestDebugArrayUser">
        <test-method status="PASS" signature="testDebugArrayUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugArrayUser@4c11ba7f]" name="testDebugArrayUser" duration-ms="14" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugArrayUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugArrayUser -->
      <class name="io.kaitai.struct.spec.TestHelloWorld">
        <test-method status="PASS" signature="testHelloWorld()[pri:0, instance:io.kaitai.struct.spec.TestHelloWorld@684aaace]" name="testHelloWorld" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHelloWorld -->
      </class> <!-- io.kaitai.struct.spec.TestHelloWorld -->
      <class name="io.kaitai.struct.spec.TestMultipleUse">
        <test-method status="PASS" signature="testMultipleUse()[pri:0, instance:io.kaitai.struct.spec.TestMultipleUse@266bdc57]" name="testMultipleUse" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultipleUse -->
      </class> <!-- io.kaitai.struct.spec.TestMultipleUse -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers">
        <test-method status="PASS" signature="testSwitchIntegers()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers@3a4b9e67]" name="testSwitchIntegers" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers -->
      <class name="io.kaitai.struct.spec.TestEnumIf">
        <test-method status="PASS" signature="testEnumIf()[pri:0, instance:io.kaitai.struct.spec.TestEnumIf@6a6adec5]" name="testEnumIf" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIf -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIf -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValueSized">
        <test-method status="PASS" signature="testExprSizeofValueSized()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValueSized@687f6b72]" name="testExprSizeofValueSized" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValueSized -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValueSized -->
      <class name="io.kaitai.struct.spec.TestMetaXref">
        <test-method status="PASS" signature="testMetaXref()[pri:0, instance:io.kaitai.struct.spec.TestMetaXref@32d8b42e]" name="testMetaXref" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaXref -->
      </class> <!-- io.kaitai.struct.spec.TestMetaXref -->
      <class name="io.kaitai.struct.spec.TestNestedTypes3">
        <test-method status="PASS" signature="testNestedTypes3()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes3@734ee775]" name="testNestedTypes3" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes3 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes3 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntElse">
        <test-method status="PASS" signature="testSwitchManualIntElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntElse@2de6c526]" name="testSwitchManualIntElse" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntElse -->
      <class name="io.kaitai.struct.spec.TestSwitchManualInt">
        <test-method status="PASS" signature="testSwitchManualInt()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualInt@7bc1d0fa]" name="testSwitchManualInt" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualInt -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualInt -->
      <class name="io.kaitai.struct.spec.TestNestedTypes2">
        <test-method status="PASS" signature="testNestedTypes2()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes2@1694ce18]" name="testNestedTypes2" duration-ms="3" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes2 -->
      <class name="io.kaitai.struct.spec.TestParamsEnum">
        <test-method status="PASS" signature="testParamsEnum()[pri:0, instance:io.kaitai.struct.spec.TestParamsEnum@2e7c470b]" name="testParamsEnum" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestParamsEnum -->
      <class name="io.kaitai.struct.spec.TestEnumDeepLiterals">
        <test-method status="PASS" signature="testEnumDeepLiterals()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeepLiterals@387162d9]" name="testEnumDeepLiterals" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeepLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeepLiterals -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Value">
        <test-method status="PASS" signature="testProcessXor4Value()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Value@4e453182]" name="testProcessXor4Value" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Value -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Value -->
      <class name="io.kaitai.struct.spec.TestStrPadTermEmpty">
        <test-method status="PASS" signature="testStrPadTermEmpty()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTermEmpty@560b70a8]" name="testStrPadTermEmpty" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTermEmpty -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTermEmpty -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType02Parent">
        <test-method status="PASS" signature="testOpaqueExternalType02Parent()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType02Parent@591e356b]" name="testOpaqueExternalType02Parent" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType02Parent -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType02Parent -->
      <class name="io.kaitai.struct.spec.TestProcessXorValue">
        <test-method status="PASS" signature="testProcessXorValue()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorValue@fc4048c]" name="testProcessXorValue" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorValue -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorValue -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeBe">
        <test-method status="PASS" signature="testBcdUserTypeBe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeBe@2ec6b7f6]" name="testBcdUserTypeBe" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeBe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeBe -->
      <class name="io.kaitai.struct.spec.TestMetaTags">
        <test-method status="PASS" signature="testMetaTags()[pri:0, instance:io.kaitai.struct.spec.TestMetaTags@e3d60c4]" name="testMetaTags" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaTags -->
      </class> <!-- io.kaitai.struct.spec.TestMetaTags -->
      <class name="io.kaitai.struct.spec.TestProcessCustom">
        <test-method status="PASS" signature="testProcessCustom()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustom@4b1aeb38]" name="testProcessCustom" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustom -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustom -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilS4">
        <test-method status="PASS" signature="testRepeatUntilS4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilS4@3d56cce6]" name="testRepeatUntilS4" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilS4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilS4 -->
      <class name="io.kaitai.struct.spec.TestJsSignedRightShift">
        <test-method status="PASS" signature="testJsSignedRightShift()[pri:0, instance:io.kaitai.struct.spec.TestJsSignedRightShift@38987d26]" name="testJsSignedRightShift" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJsSignedRightShift -->
      </class> <!-- io.kaitai.struct.spec.TestJsSignedRightShift -->
      <class name="io.kaitai.struct.spec.TestDebugEnumName">
        <test-method status="PASS" signature="testDebugEnumName()[pri:0, instance:io.kaitai.struct.spec.TestDebugEnumName@572b8dd]" name="testDebugEnumName" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugEnumName -->
      </class> <!-- io.kaitai.struct.spec.TestDebugEnumName -->
      <class name="io.kaitai.struct.spec.TestSwitchRepeatExpr">
        <test-method status="PASS" signature="testSwitchRepeatExpr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchRepeatExpr@2c9557e1]" name="testSwitchRepeatExpr" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchRepeatExpr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchRepeatExpr -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrzDouble">
        <test-method status="PASS" signature="testRepeatNStrzDouble()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrzDouble@9995955]" name="testRepeatNStrzDouble" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrzDouble -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrzDouble -->
      <class name="io.kaitai.struct.spec.TestBufferedStruct">
        <test-method status="PASS" signature="testBufferedStruct()[pri:0, instance:io.kaitai.struct.spec.TestBufferedStruct@abd40ef]" name="testBufferedStruct" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBufferedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestBufferedStruct -->
      <class name="io.kaitai.struct.spec.TestPositionToEnd">
        <test-method status="PASS" signature="testPositionToEnd()[pri:0, instance:io.kaitai.struct.spec.TestPositionToEnd@1d48d4ef]" name="testPositionToEnd" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionToEnd -->
      </class> <!-- io.kaitai.struct.spec.TestPositionToEnd -->
      <class name="io.kaitai.struct.spec.TestNavParent">
        <test-method status="PASS" signature="testNavParent()[pri:0, instance:io.kaitai.struct.spec.TestNavParent@35ffcd45]" name="testNavParent" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilComplex">
        <test-method status="PASS" signature="testRepeatUntilComplex()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilComplex@137a1f08]" name="testRepeatUntilComplex" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilComplex -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilComplex -->
      <class name="io.kaitai.struct.spec.TestRepeatNStruct">
        <test-method status="PASS" signature="testRepeatNStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStruct@37015590]" name="testRepeatNStruct" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStruct -->
      <class name="io.kaitai.struct.spec.TestExprIoEof">
        <test-method status="PASS" signature="testExprIoEof()[pri:0, instance:io.kaitai.struct.spec.TestExprIoEof@45eb96fc]" name="testExprIoEof" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoEof -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoEof -->
      <class name="io.kaitai.struct.spec.TestEnum1">
        <test-method status="PASS" signature="testEnum1()[pri:0, instance:io.kaitai.struct.spec.TestEnum1@743ee38c]" name="testEnum1" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum1 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnum">
        <test-method status="PASS" signature="testSwitchManualEnum()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnum@642bf5bf]" name="testSwitchManualEnum" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnum -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnum -->
      <class name="io.kaitai.struct.spec.TestEnum0">
        <test-method status="PASS" signature="testEnum0()[pri:0, instance:io.kaitai.struct.spec.TestEnum0@148e59]" name="testEnum0" duration-ms="18" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum0 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum0 -->
      <class name="io.kaitai.struct.spec.TestStrLiterals2">
        <test-method status="PASS" signature="testStrLiterals2()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals2@3624332f]" name="testStrLiterals2" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals2 -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals2 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse">
        <test-method status="PASS" signature="testSwitchManualEnumInvalidElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse@28024808]" name="testSwitchManualEnumInvalidElse" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalidElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse -->
      <class name="io.kaitai.struct.spec.TestTermStrz">
        <test-method status="PASS" signature="testTermStrz()[pri:0, instance:io.kaitai.struct.spec.TestTermStrz@1f45dbcd]" name="testTermStrz" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermStrz -->
      </class> <!-- io.kaitai.struct.spec.TestTermStrz -->
      <class name="io.kaitai.struct.spec.TestExpr0">
        <test-method status="PASS" signature="testExpr0()[pri:0, instance:io.kaitai.struct.spec.TestExpr0@2f6728ec]" name="testExpr0" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr0 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr0 -->
      <class name="io.kaitai.struct.spec.TestExpr1">
        <test-method status="PASS" signature="testExpr1()[pri:0, instance:io.kaitai.struct.spec.TestExpr1@21301fa]" name="testExpr1" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr1 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr1 -->
      <class name="io.kaitai.struct.spec.TestStrEncodingsDefault">
        <test-method status="PASS" signature="testStrEncodingsDefault()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodingsDefault@2c1507e9]" name="testStrEncodingsDefault" duration-ms="26" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodingsDefault -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodingsDefault -->
      <class name="io.kaitai.struct.spec.TestExpr2">
        <test-method status="PASS" signature="testExpr2()[pri:0, instance:io.kaitai.struct.spec.TestExpr2@e9453f9]" name="testExpr2" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr2 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr2 -->
      <class name="io.kaitai.struct.spec.TestExpr3">
        <test-method status="PASS" signature="testExpr3()[pri:0, instance:io.kaitai.struct.spec.TestExpr3@73871392]" name="testExpr3" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr3 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr3 -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitch">
        <test-method status="PASS" signature="testNavParentSwitch()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitch@1dafb644]" name="testNavParentSwitch" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitch -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse2">
        <test-method status="PASS" signature="testNavParentFalse2()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse2@7a674e9b]" name="testNavParentFalse2" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse2 -->
      <class name="io.kaitai.struct.spec.TestProcessXorConst">
        <test-method status="PASS" signature="testProcessXorConst()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorConst@7629a4cb]" name="testProcessXorConst" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorConst -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorConst -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilSized">
        <test-method status="PASS" signature="testRepeatUntilSized()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilSized@23617fc5]" name="testRepeatUntilSized" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilSized -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilSized -->
      <class name="io.kaitai.struct.spec.TestEnumNegative">
        <test-method status="PASS" signature="testEnumNegative()[pri:0, instance:io.kaitai.struct.spec.TestEnumNegative@bf5dc33]" name="testEnumNegative" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumNegative -->
      </class> <!-- io.kaitai.struct.spec.TestEnumNegative -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprException">
        <test-method status="PASS" signature="testDefaultEndianExprException()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprException@78578f77]" name="testDefaultEndianExprException" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <exception class="io.kaitai.struct.KaitaiStream$UndecidedEndiannessError">
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$UndecidedEndiannessError
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj._read(DefaultEndianExprException.java:98)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj.<init>(DefaultEndianExprException.java:82)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc._read(DefaultEndianExprException.java:62)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc.<init>(DefaultEndianExprException.java:58)
	at io.kaitai.struct.testformats.DefaultEndianExprException._read(DefaultEndianExprException.java:36)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:29)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:18)
	at io.kaitai.struct.testformats.DefaultEndianExprException.fromFile(DefaultEndianExprException.java:14)
	at io.kaitai.struct.spec.TestDefaultEndianExprException.testDefaultEndianExprException(TestDefaultEndianExprException.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$UndecidedEndiannessError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprException -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprException -->
      <class name="io.kaitai.struct.spec.TestExprBytesOps">
        <test-method status="FAIL" signature="testExprBytesOps()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesOps@37fca526]" name="testExprBytesOps" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/ExprBytesOps]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/ExprBytesOps
	at io.kaitai.struct.spec.TestExprBytesOps.testExprBytesOps(TestExprBytesOps.java:12)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.ExprBytesOps
	at java.net.URLClassLoader$1.run(URLClassLoader.java:359)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:348)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:347)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:312)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesOps -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValue0">
        <test-method status="PASS" signature="testExprSizeofValue0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValue0@7ae73995]" name="testExprSizeofValue0" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValue0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValue0 -->
      <class name="io.kaitai.struct.spec.TestDefaultBigEndian">
        <test-method status="PASS" signature="testDefaultBigEndian()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBigEndian@1893a5ee]" name="testDefaultBigEndian" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBigEndian -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBigEndian -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsBe">
        <test-method status="PASS" signature="testDefaultEndianExprIsBe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsBe@756c01c8]" name="testDefaultEndianExprIsBe" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsBe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsBe -->
      <class name="io.kaitai.struct.spec.TestCastToImported">
        <test-method status="PASS" signature="testCastToImported()[pri:0, instance:io.kaitai.struct.spec.TestCastToImported@4033d6f1]" name="testCastToImported" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToImported -->
      </class> <!-- io.kaitai.struct.spec.TestCastToImported -->
      <class name="io.kaitai.struct.spec.TestBytesPadTerm">
        <test-method status="PASS" signature="testBytesPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestBytesPadTerm@4ee95a23]" name="testBytesPadTerm" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBytesPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestBytesPadTerm -->
      <class name="io.kaitai.struct.spec.TestExprMod">
        <test-method status="PASS" signature="testExprMod()[pri:0, instance:io.kaitai.struct.spec.TestExprMod@7e668893]" name="testExprMod" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprMod -->
      </class> <!-- io.kaitai.struct.spec.TestExprMod -->
      <class name="io.kaitai.struct.spec.TestTermBytes">
        <test-method status="PASS" signature="testTermBytes()[pri:0, instance:io.kaitai.struct.spec.TestTermBytes@fb70426]" name="testTermBytes" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermBytes -->
      </class> <!-- io.kaitai.struct.spec.TestTermBytes -->
      <class name="io.kaitai.struct.spec.TestDocstrings">
        <test-method status="PASS" signature="testDocstrings()[pri:0, instance:io.kaitai.struct.spec.TestDocstrings@6275a43c]" name="testDocstrings" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstrings -->
      </class> <!-- io.kaitai.struct.spec.TestDocstrings -->
      <class name="io.kaitai.struct.spec.TestFixedStruct">
        <test-method status="PASS" signature="testFixedStruct()[pri:0, instance:io.kaitai.struct.spec.TestFixedStruct@2bbe7e81]" name="testFixedStruct" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestFixedStruct -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceBytes">
        <test-method status="PASS" signature="testProcessCoerceBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceBytes@18ac691f]" name="testProcessCoerceBytes" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceBytes -->
      <class name="io.kaitai.struct.spec.TestFloatingPoints">
        <test-method status="PASS" signature="testFloatingPoints()[pri:0, instance:io.kaitai.struct.spec.TestFloatingPoints@3583a303]" name="testFloatingPoints" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatingPoints -->
      </class> <!-- io.kaitai.struct.spec.TestFloatingPoints -->
      <class name="io.kaitai.struct.spec.TestRepeatEosBit">
        <test-method status="PASS" signature="testRepeatEosBit()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosBit@55433567]" name="testRepeatEosBit" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosBit -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosBit -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype2">
        <test-method status="PASS" signature="testProcessCoerceUsertype2()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype2@7a882480]" name="testProcessCoerceUsertype2" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype2 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype2 -->
      <class name="io.kaitai.struct.spec.TestIndexSizes">
        <test-method status="PASS" signature="testIndexSizes()[pri:0, instance:io.kaitai.struct.spec.TestIndexSizes@413ded77]" name="testIndexSizes" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexSizes -->
      </class> <!-- io.kaitai.struct.spec.TestIndexSizes -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalid">
        <test-method status="PASS" signature="testSwitchManualEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalid@5e92db2]" name="testSwitchManualEnumInvalid" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestCastNested">
        <test-method status="PASS" signature="testCastNested()[pri:0, instance:io.kaitai.struct.spec.TestCastNested@34fc84f2]" name="testCastNested" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastNested -->
      </class> <!-- io.kaitai.struct.spec.TestCastNested -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype1">
        <test-method status="PASS" signature="testProcessCoerceUsertype1()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype1@11cdf8a]" name="testProcessCoerceUsertype1" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype1 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype1 -->
      <class name="io.kaitai.struct.spec.TestSwitchCast">
        <test-method status="PASS" signature="testSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestSwitchCast@6f2d00ab]" name="testSwitchCast" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchCast -->
      <class name="io.kaitai.struct.spec.TestIfInstances">
        <test-method status="PASS" signature="testIfInstances()[pri:0, instance:io.kaitai.struct.spec.TestIfInstances@2676ef7b]" name="testIfInstances" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfInstances -->
      </class> <!-- io.kaitai.struct.spec.TestIfInstances -->
      <class name="io.kaitai.struct.spec.TestNavParentOverride">
        <test-method status="PASS" signature="testNavParentOverride()[pri:0, instance:io.kaitai.struct.spec.TestNavParentOverride@ef2106b]" name="testNavParentOverride" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentOverride -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentOverride -->
      <class name="io.kaitai.struct.spec.TestExprBytesCmp">
        <test-method status="PASS" signature="testExprBytesCmp()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesCmp@71b508da]" name="testExprBytesCmp" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesCmp -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesCmp -->
      <class name="io.kaitai.struct.spec.TestIndexToParamEos">
        <test-method status="PASS" signature="testIndexToParamEos()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamEos@3c966db5]" name="testIndexToParamEos" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamEos -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamEos -->
      <class name="io.kaitai.struct.spec.TestEnumInvalid">
        <test-method status="PASS" signature="testEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestEnumInvalid@315a0b2f]" name="testEnumInvalid" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestNonStandard">
        <test-method status="PASS" signature="testNonStandard()[pri:0, instance:io.kaitai.struct.spec.TestNonStandard@565d1ac3]" name="testNonStandard" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonStandard -->
      </class> <!-- io.kaitai.struct.spec.TestNonStandard -->
      <class name="io.kaitai.struct.spec.TestEnumDeep">
        <test-method status="PASS" signature="testEnumDeep()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeep@6f10b308]" name="testEnumDeep" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeep -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeep -->
      <class name="io.kaitai.struct.spec.TestImportsAbsRel">
        <test-method status="PASS" signature="testImportsAbsRel()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsRel@368b5035]" name="testImportsAbsRel" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsRel -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsRel -->
      <class name="io.kaitai.struct.spec.TestEnumFancy">
        <test-method status="PASS" signature="testEnumFancy()[pri:0, instance:io.kaitai.struct.spec.TestEnumFancy@18bbe4d3]" name="testEnumFancy" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumFancy -->
      </class> <!-- io.kaitai.struct.spec.TestEnumFancy -->
      <class name="io.kaitai.struct.spec.TestYamlInts">
        <test-method status="PASS" signature="testYamlInts()[pri:0, instance:io.kaitai.struct.spec.TestYamlInts@68dfb213]" name="testYamlInts" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testYamlInts -->
      </class> <!-- io.kaitai.struct.spec.TestYamlInts -->
      <class name="io.kaitai.struct.spec.TestStrEos">
        <test-method status="PASS" signature="testStrEos()[pri:0, instance:io.kaitai.struct.spec.TestStrEos@4a02dffb]" name="testStrEos" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEos -->
      </class> <!-- io.kaitai.struct.spec.TestStrEos -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprInherited">
        <test-method status="PASS" signature="testDefaultEndianExprInherited()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprInherited@64277469]" name="testDefaultEndianExprInherited" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprInherited -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprInherited -->
      <class name="io.kaitai.struct.spec.TestPositionAbs">
        <test-method status="PASS" signature="testPositionAbs()[pri:0, instance:io.kaitai.struct.spec.TestPositionAbs@29c6e6e]" name="testPositionAbs" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionAbs -->
      </class> <!-- io.kaitai.struct.spec.TestPositionAbs -->
      <class name="io.kaitai.struct.spec.TestRepeatEosU4">
        <test-method status="PASS" signature="testRepeatEosU4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosU4@611c3b04]" name="testRepeatEosU4" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosU4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosU4 -->
      <class name="io.kaitai.struct.spec.TestExprIoPos">
        <test-method status="PASS" signature="testExprIoPos()[pri:0, instance:io.kaitai.struct.spec.TestExprIoPos@48b14117]" name="testExprIoPos" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoPos -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoPos -->
      <class name="io.kaitai.struct.spec.TestBitsEnum">
        <test-method status="PASS" signature="testBitsEnum()[pri:0, instance:io.kaitai.struct.spec.TestBitsEnum@5f9beb29]" name="testBitsEnum" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestBitsEnum -->
      <class name="io.kaitai.struct.spec.TestDebug0">
        <test-method status="PASS" signature="testDebug0()[pri:0, instance:io.kaitai.struct.spec.TestDebug0@19788380]" name="testDebug0" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebug0 -->
      </class> <!-- io.kaitai.struct.spec.TestDebug0 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeElse">
        <test-method status="PASS" signature="testSwitchManualIntSizeElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeElse@2f72c80f]" name="testSwitchManualIntSizeElse" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeElse -->
      <class name="io.kaitai.struct.spec.TestStrPadTerm">
        <test-method status="PASS" signature="testStrPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTerm@234066d1]" name="testStrPadTerm" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTerm -->
      <class name="io.kaitai.struct.spec.TestStrEncodings">
        <test-method status="PASS" signature="testStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodings@4a6487f7]" name="testStrEncodings" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodings -->
      <class name="io.kaitai.struct.spec.TestTypeTernary">
        <test-method status="PASS" signature="testTypeTernary()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary@3613e877]" name="testTypeTernary" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary -->
      <class name="io.kaitai.struct.spec.TestValidShort">
        <test-method status="PASS" signature="testValidShort()[pri:0, instance:io.kaitai.struct.spec.TestValidShort@5502f85d]" name="testValidShort" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidShort -->
      </class> <!-- io.kaitai.struct.spec.TestValidShort -->
      <class name="io.kaitai.struct.spec.TestImportsAbsAbs">
        <test-method status="PASS" signature="testImportsAbsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsAbs@6952b54b]" name="testImportsAbsAbs" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsAbs -->
      <class name="io.kaitai.struct.spec.TestProcessToUser">
        <test-method status="PASS" signature="testProcessToUser()[pri:0, instance:io.kaitai.struct.spec.TestProcessToUser@24585a88]" name="testProcessToUser" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessToUser -->
      </class> <!-- io.kaitai.struct.spec.TestProcessToUser -->
      <class name="io.kaitai.struct.spec.TestIntegers">
        <test-method status="PASS" signature="testIntegers()[pri:0, instance:io.kaitai.struct.spec.TestIntegers@da62f80]" name="testIntegers" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestIntegers -->
      <class name="io.kaitai.struct.spec.TestFloatToI">
        <test-method status="PASS" signature="testFloatToI()[pri:0, instance:io.kaitai.struct.spec.TestFloatToI@7725204d]" name="testFloatToI" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatToI -->
      </class> <!-- io.kaitai.struct.spec.TestFloatToI -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocref">
        <test-method status="PASS" signature="testDocstringsDocref()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocref@2dc719bd]" name="testDocstringsDocref" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocref -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocref -->
      <class name="io.kaitai.struct.spec.TestRecursiveOne">
        <test-method status="PASS" signature="testRecursiveOne()[pri:0, instance:io.kaitai.struct.spec.TestRecursiveOne@197191a4]" name="testRecursiveOne" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRecursiveOne -->
      </class> <!-- io.kaitai.struct.spec.TestRecursiveOne -->
      <class name="io.kaitai.struct.spec.TestImportsCircularA">
        <test-method status="PASS" signature="testImportsCircularA()[pri:0, instance:io.kaitai.struct.spec.TestImportsCircularA@2916117f]" name="testImportsCircularA" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsCircularA -->
      </class> <!-- io.kaitai.struct.spec.TestImportsCircularA -->
      <class name="io.kaitai.struct.spec.TestEnumToI">
        <test-method status="PASS" signature="testEnumToI()[pri:0, instance:io.kaitai.struct.spec.TestEnumToI@366953d]" name="testEnumToI" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToI -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToI -->
      <class name="io.kaitai.struct.spec.TestExprArray">
        <test-method status="PASS" signature="testExprArray()[pri:0, instance:io.kaitai.struct.spec.TestExprArray@67d6bdeb]" name="testExprArray" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprArray -->
      </class> <!-- io.kaitai.struct.spec.TestExprArray -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType0">
        <test-method status="PASS" signature="testExprSizeofType0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType0@4901f42d]" name="testExprSizeofType0" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType0 -->
      <class name="io.kaitai.struct.spec.TestSwitchBytearray">
        <test-method status="PASS" signature="testSwitchBytearray()[pri:0, instance:io.kaitai.struct.spec.TestSwitchBytearray@5c338d9d]" name="testSwitchBytearray" duration-ms="2" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchBytearray -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchBytearray -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType1">
        <test-method status="PASS" signature="testExprSizeofType1()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType1@7529a559]" name="testExprSizeofType1" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType1 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType1 -->
      <class name="io.kaitai.struct.spec.TestTypeIntUnaryOp">
        <test-method status="PASS" signature="testTypeIntUnaryOp()[pri:0, instance:io.kaitai.struct.spec.TestTypeIntUnaryOp@18ba689b]" name="testTypeIntUnaryOp" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeIntUnaryOp -->
      </class> <!-- io.kaitai.struct.spec.TestTypeIntUnaryOp -->
      <class name="io.kaitai.struct.spec.TestNestedSameName">
        <test-method status="PASS" signature="testNestedSameName()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName@458d7519]" name="testNestedSameName" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName -->
      <class name="io.kaitai.struct.spec.TestInstanceUserArray">
        <test-method status="PASS" signature="testInstanceUserArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceUserArray@7e13efdf]" name="testInstanceUserArray" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceUserArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceUserArray -->
      <class name="io.kaitai.struct.spec.TestOpaqueWithParam">
        <test-method status="PASS" signature="testOpaqueWithParam()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueWithParam@4ccd37f3]" name="testOpaqueWithParam" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueWithParam -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueWithParam -->
      <class name="io.kaitai.struct.spec.TestIfStruct">
        <test-method status="PASS" signature="testIfStruct()[pri:0, instance:io.kaitai.struct.spec.TestIfStruct@b648925]" name="testIfStruct" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfStruct -->
      </class> <!-- io.kaitai.struct.spec.TestIfStruct -->
      <class name="io.kaitai.struct.spec.TestIndexToParamExpr">
        <test-method status="PASS" signature="testIndexToParamExpr()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamExpr@2943d051]" name="testIndexToParamExpr" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamExpr -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamExpr -->
      <class name="io.kaitai.struct.spec.TestEofExceptionBytes">
        <test-method status="PASS" signature="testEofExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionBytes@3c8c0b5a]" name="testEofExceptionBytes" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.DirectByteBuffer.get(DirectByteBuffer.java:265)
	at java.nio.ByteBuffer.get(ByteBuffer.java:695)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:301)
	at io.kaitai.struct.testformats.EofExceptionBytes._read(EofExceptionBytes.java:30)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EofExceptionBytes.fromFile(EofExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEofExceptionBytes.testEofExceptionBytes(TestEofExceptionBytes.java:15)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestBitsByteAligned">
        <test-method status="PASS" signature="testBitsByteAligned()[pri:0, instance:io.kaitai.struct.spec.TestBitsByteAligned@14552da4]" name="testBitsByteAligned" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsByteAligned -->
      </class> <!-- io.kaitai.struct.spec.TestBitsByteAligned -->
      <class name="io.kaitai.struct.spec.TestEofExceptionU4">
        <test-method status="PASS" signature="testEofExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionU4@7bf83b8a]" name="testEofExceptionU4" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.Buffer.nextGetIndex(Buffer.java:498)
	at java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:675)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:246)
	at io.kaitai.struct.testformats.EofExceptionU4._read(EofExceptionU4.java:31)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:27)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:16)
	at io.kaitai.struct.testformats.EofExceptionU4.fromFile(EofExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEofExceptionU4.testEofExceptionU4(TestEofExceptionU4.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestOptionalId">
        <test-method status="PASS" signature="testOptionalId()[pri:0, instance:io.kaitai.struct.spec.TestOptionalId@e97dd98]" name="testOptionalId" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptionalId -->
      </class> <!-- io.kaitai.struct.spec.TestOptionalId -->
      <class name="io.kaitai.struct.spec.TestImportsAbs">
        <test-method status="PASS" signature="testImportsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbs@391a3a26]" name="testImportsAbs" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbs -->
      <class name="io.kaitai.struct.spec.TestEnumOfValueInst">
        <test-method status="PASS" signature="testEnumOfValueInst()[pri:0, instance:io.kaitai.struct.spec.TestEnumOfValueInst@23218b01]" name="testEnumOfValueInst" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumOfValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestEnumOfValueInst -->
      <class name="io.kaitai.struct.spec.TestPositionInSeq">
        <test-method status="PASS" signature="testPositionInSeq()[pri:0, instance:io.kaitai.struct.spec.TestPositionInSeq@4faae357]" name="testPositionInSeq" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionInSeq -->
      </class> <!-- io.kaitai.struct.spec.TestPositionInSeq -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrz">
        <test-method status="PASS" signature="testRepeatNStrz()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrz@5673ef7]" name="testRepeatNStrz" duration-ms="0" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrz -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrz -->
      <class name="io.kaitai.struct.spec.TestParamsCallShort">
        <test-method status="PASS" signature="testParamsCallShort()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallShort@126b227]" name="testParamsCallShort" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallShort -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallShort -->
      <class name="io.kaitai.struct.spec.TestUserType">
        <test-method status="PASS" signature="testUserType()[pri:0, instance:io.kaitai.struct.spec.TestUserType@57abe554]" name="testUserType" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserType -->
      </class> <!-- io.kaitai.struct.spec.TestUserType -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsLe">
        <test-method status="PASS" signature="testDefaultEndianExprIsLe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsLe@c25c3c6]" name="testDefaultEndianExprIsLe" duration-ms="70" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsLe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsLe -->
      <class name="io.kaitai.struct.spec.TestBitsSimple">
        <test-method status="PASS" signature="testBitsSimple()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimple@5a73fe03]" name="testBitsSimple" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimple -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimple -->
      <class name="io.kaitai.struct.spec.TestExprEnum">
        <test-method status="PASS" signature="testExprEnum()[pri:0, instance:io.kaitai.struct.spec.TestExprEnum@32b7e05f]" name="testExprEnum" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprEnum -->
      </class> <!-- io.kaitai.struct.spec.TestExprEnum -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse">
        <test-method status="PASS" signature="testNavParentFalse()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse@3bbd06b0]" name="testNavParentFalse" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse -->
      <class name="io.kaitai.struct.spec.TestStrLiterals">
        <test-method status="PASS" signature="testStrLiterals()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals@64d87a08]" name="testStrLiterals" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType">
        <test-method status="PASS" signature="testOpaqueExternalType()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType@6c15f918]" name="testOpaqueExternalType" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType -->
      <class name="io.kaitai.struct.spec.TestImports0">
        <test-method status="PASS" signature="testImports0()[pri:0, instance:io.kaitai.struct.spec.TestImports0@bc8ba5]" name="testImports0" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImports0 -->
      </class> <!-- io.kaitai.struct.spec.TestImports0 -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers2">
        <test-method status="PASS" signature="testSwitchIntegers2()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers2@67d7d474]" name="testSwitchIntegers2" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers2 -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers2 -->
      <class name="io.kaitai.struct.spec.TestCastToTop">
        <test-method status="PASS" signature="testCastToTop()[pri:0, instance:io.kaitai.struct.spec.TestCastToTop@434ec48f]" name="testCastToTop" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToTop -->
      </class> <!-- io.kaitai.struct.spec.TestCastToTop -->
      <class name="io.kaitai.struct.spec.TestTypeTernaryOpaque">
        <test-method status="PASS" signature="testTypeTernaryOpaque()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernaryOpaque@311d5216]" name="testTypeTernaryOpaque" duration-ms="1" started-at="2019-10-13T11:52:51Z" finished-at="2019-10-13T11:52:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernaryOpaque -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernaryOpaque -->
    </test> <!-- all -->
  </suite> <!-- Kaitai Struct Java specs -->
</testng-results>
