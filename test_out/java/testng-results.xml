<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" total="217" passed="214">
  <reporter-output>
  </reporter-output>
  <suite name="Kaitai Struct Java specs" duration-ms="508" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
    <groups>
    </groups>
    <test name="all" duration-ms="508" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
      <class name="io.kaitai.struct.spec.TestExprBytesCmp">
        <test-method status="PASS" signature="testExprBytesCmp()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesCmp@75329a49]" name="testExprBytesCmp" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesCmp -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesCmp -->
      <class name="io.kaitai.struct.spec.TestRepeatEosStruct">
        <test-method status="PASS" signature="testRepeatEosStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosStruct@6f96c77]" name="testRepeatEosStruct" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosStruct -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocrefMulti">
        <test-method status="PASS" signature="testDocstringsDocrefMulti()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocrefMulti@4a22f9e2]" name="testDocstringsDocrefMulti" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocrefMulti -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocrefMulti -->
      <class name="io.kaitai.struct.spec.TestParamsPassUsertype">
        <test-method status="PASS" signature="testParamsPassUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassUsertype@2f7c2f4f]" name="testParamsPassUsertype" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassUsertype -->
      <class name="io.kaitai.struct.spec.TestFixedStruct">
        <test-method status="PASS" signature="testFixedStruct()[pri:0, instance:io.kaitai.struct.spec.TestFixedStruct@63355449]" name="testFixedStruct" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestFixedStruct -->
      <class name="io.kaitai.struct.spec.TestProcessToUser">
        <test-method status="PASS" signature="testProcessToUser()[pri:0, instance:io.kaitai.struct.spec.TestProcessToUser@161479c6]" name="testProcessToUser" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessToUser -->
      </class> <!-- io.kaitai.struct.spec.TestProcessToUser -->
      <class name="io.kaitai.struct.spec.TestValidEqStrEncodings">
        <test-method status="PASS" signature="testValidEqStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestValidEqStrEncodings@2bbf180e]" name="testValidEqStrEncodings" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidEqStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestValidEqStrEncodings -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayStruct">
        <test-method status="PASS" signature="testParamsPassArrayStruct()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayStruct@4278a03f]" name="testParamsPassArrayStruct" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayStruct -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayStruct -->
      <class name="io.kaitai.struct.spec.TestFloatingPoints">
        <test-method status="PASS" signature="testFloatingPoints()[pri:0, instance:io.kaitai.struct.spec.TestFloatingPoints@4df50bcc]" name="testFloatingPoints" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatingPoints -->
      </class> <!-- io.kaitai.struct.spec.TestFloatingPoints -->
      <class name="io.kaitai.struct.spec.TestNonStandard">
        <test-method status="PASS" signature="testNonStandard()[pri:0, instance:io.kaitai.struct.spec.TestNonStandard@76908cc0]" name="testNonStandard" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonStandard -->
      </class> <!-- io.kaitai.struct.spec.TestNonStandard -->
      <class name="io.kaitai.struct.spec.TestImportsCircularA">
        <test-method status="PASS" signature="testImportsCircularA()[pri:0, instance:io.kaitai.struct.spec.TestImportsCircularA@794cb805]" name="testImportsCircularA" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsCircularA -->
      </class> <!-- io.kaitai.struct.spec.TestImportsCircularA -->
      <class name="io.kaitai.struct.spec.TestStrPadTermEmpty">
        <test-method status="PASS" signature="testStrPadTermEmpty()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTermEmpty@4b5d6a01]" name="testStrPadTermEmpty" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTermEmpty -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTermEmpty -->
      <class name="io.kaitai.struct.spec.TestValidFailMaxInt">
        <test-method status="PASS" signature="testValidFailMaxInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailMaxInt@4386f16]" name="testValidFailMaxInt" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, max 12, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 1: validation failed: not in range, max 12, but got 80
	at io.kaitai.struct.testformats.ValidFailMaxInt._read(ValidFailMaxInt.java:32)
	at io.kaitai.struct.testformats.ValidFailMaxInt.<init>(ValidFailMaxInt.java:27)
	at io.kaitai.struct.testformats.ValidFailMaxInt.<init>(ValidFailMaxInt.java:16)
	at io.kaitai.struct.testformats.ValidFailMaxInt.fromFile(ValidFailMaxInt.java:12)
	at io.kaitai.struct.spec.TestValidFailMaxInt.testValidFailMaxInt(TestValidFailMaxInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailMaxInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailMaxInt -->
      <class name="io.kaitai.struct.spec.TestBitsEnum">
        <test-method status="PASS" signature="testBitsEnum()[pri:0, instance:io.kaitai.struct.spec.TestBitsEnum@3eb7fc54]" name="testBitsEnum" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestBitsEnum -->
      <class name="io.kaitai.struct.spec.TestValidFailMinInt">
        <test-method status="PASS" signature="testValidFailMinInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailMinInt@29176cc1]" name="testValidFailMinInt" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationLessThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, min 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationLessThanError: /seq/0: at pos 1: validation failed: not in range, min 123, but got 80
	at io.kaitai.struct.testformats.ValidFailMinInt._read(ValidFailMinInt.java:32)
	at io.kaitai.struct.testformats.ValidFailMinInt.<init>(ValidFailMinInt.java:27)
	at io.kaitai.struct.testformats.ValidFailMinInt.<init>(ValidFailMinInt.java:16)
	at io.kaitai.struct.testformats.ValidFailMinInt.fromFile(ValidFailMinInt.java:12)
	at io.kaitai.struct.spec.TestValidFailMinInt.testValidFailMinInt(TestValidFailMinInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationLessThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailMinInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailMinInt -->
      <class name="io.kaitai.struct.spec.TestNestedTypeParam">
        <test-method status="PASS" signature="testNestedTypeParam()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypeParam@418e7838]" name="testNestedTypeParam" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypeParam -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypeParam -->
      <class name="io.kaitai.struct.spec.TestDefaultBigEndian">
        <test-method status="PASS" signature="testDefaultBigEndian()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBigEndian@1534f01b]" name="testDefaultBigEndian" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBigEndian -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBigEndian -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValue0">
        <test-method status="PASS" signature="testExprSizeofValue0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValue0@318ba8c8]" name="testExprSizeofValue0" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValue0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValue0 -->
      <class name="io.kaitai.struct.spec.TestExprStrOps">
        <test-method status="PASS" signature="testExprStrOps()[pri:0, instance:io.kaitai.struct.spec.TestExprStrOps@1fe20588]" name="testExprStrOps" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprStrOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprStrOps -->
      <class name="io.kaitai.struct.spec.TestExprIoPos">
        <test-method status="PASS" signature="testExprIoPos()[pri:0, instance:io.kaitai.struct.spec.TestExprIoPos@bef2d72]" name="testExprIoPos" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoPos -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoPos -->
      <class name="io.kaitai.struct.spec.TestProcessXorValue">
        <test-method status="PASS" signature="testProcessXorValue()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorValue@64cd705f]" name="testProcessXorValue" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorValue -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorValue -->
      <class name="io.kaitai.struct.spec.TestHelloWorld">
        <test-method status="PASS" signature="testHelloWorld()[pri:0, instance:io.kaitai.struct.spec.TestHelloWorld@3cc2931c]" name="testHelloWorld" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHelloWorld -->
      </class> <!-- io.kaitai.struct.spec.TestHelloWorld -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Value">
        <test-method status="PASS" signature="testProcessXor4Value()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Value@5a63f509]" name="testProcessXor4Value" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Value -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Value -->
      <class name="io.kaitai.struct.spec.TestCombineBool">
        <test-method status="PASS" signature="testCombineBool()[pri:0, instance:io.kaitai.struct.spec.TestCombineBool@7f010382]" name="testCombineBool" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineBool -->
      </class> <!-- io.kaitai.struct.spec.TestCombineBool -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse2">
        <test-method status="PASS" signature="testNavParentFalse2()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse2@22a637e7]" name="testNavParentFalse2" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse2 -->
      <class name="io.kaitai.struct.spec.TestIntegersMinMax">
        <test-method status="PASS" signature="testIntegersMinMax()[pri:0, instance:io.kaitai.struct.spec.TestIntegersMinMax@703580bf]" name="testIntegersMinMax" duration-ms="13" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegersMinMax -->
      </class> <!-- io.kaitai.struct.spec.TestIntegersMinMax -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStrElse">
        <test-method status="PASS" signature="testSwitchManualStrElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStrElse@48aaecc3]" name="testSwitchManualStrElse" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStrElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStrElse -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnum">
        <test-method status="PASS" signature="testSwitchManualEnum()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnum@78e94dcf]" name="testSwitchManualEnum" duration-ms="4" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnum -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnum -->
      <class name="io.kaitai.struct.spec.TestValidLong">
        <test-method status="PASS" signature="testValidLong()[pri:0, instance:io.kaitai.struct.spec.TestValidLong@6d2a209c]" name="testValidLong" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLong -->
      </class> <!-- io.kaitai.struct.spec.TestValidLong -->
      <class name="io.kaitai.struct.spec.TestRecursiveOne">
        <test-method status="PASS" signature="testRecursiveOne()[pri:0, instance:io.kaitai.struct.spec.TestRecursiveOne@43301423]" name="testRecursiveOne" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRecursiveOne -->
      </class> <!-- io.kaitai.struct.spec.TestRecursiveOne -->
      <class name="io.kaitai.struct.spec.TestCombineEnum">
        <test-method status="PASS" signature="testCombineEnum()[pri:0, instance:io.kaitai.struct.spec.TestCombineEnum@5c909414]" name="testCombineEnum" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineEnum -->
      </class> <!-- io.kaitai.struct.spec.TestCombineEnum -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitchCast">
        <test-method status="PASS" signature="testNavParentSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitchCast@6af93788]" name="testNavParentSwitchCast" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitchCast -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeEos">
        <test-method status="PASS" signature="testSwitchManualIntSizeEos()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeEos@647fd8ce]" name="testSwitchManualIntSizeEos" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeEos -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeEos -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayUsertype">
        <test-method status="PASS" signature="testParamsPassArrayUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayUsertype@3e92efc3]" name="testParamsPassArrayUsertype" duration-ms="11" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayUsertype -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrz">
        <test-method status="PASS" signature="testRepeatNStrz()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrz@3c130745]" name="testRepeatNStrz" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrz -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrz -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsBe">
        <test-method status="PASS" signature="testDefaultEndianExprIsBe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsBe@7f552bd3]" name="testDefaultEndianExprIsBe" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsBe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsBe -->
      <class name="io.kaitai.struct.spec.TestPositionAbs">
        <test-method status="PASS" signature="testPositionAbs()[pri:0, instance:io.kaitai.struct.spec.TestPositionAbs@47542153]" name="testPositionAbs" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionAbs -->
      </class> <!-- io.kaitai.struct.spec.TestPositionAbs -->
      <class name="io.kaitai.struct.spec.TestStrLiterals">
        <test-method status="PASS" signature="testStrLiterals()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals@ef9296d]" name="testStrLiterals" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals -->
      <class name="io.kaitai.struct.spec.TestExprMod">
        <test-method status="PASS" signature="testExprMod()[pri:0, instance:io.kaitai.struct.spec.TestExprMod@778d1062]" name="testExprMod" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprMod -->
      </class> <!-- io.kaitai.struct.spec.TestExprMod -->
      <class name="io.kaitai.struct.spec.TestValidFailAnyofInt">
        <test-method status="PASS" signature="testValidFailAnyofInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailAnyofInt@419c5f1a]" name="testValidFailAnyofInt" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not any of the list, got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError: /seq/0: at pos 1: validation failed: not any of the list, got 80
	at io.kaitai.struct.testformats.ValidFailAnyofInt._read(ValidFailAnyofInt.java:32)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.<init>(ValidFailAnyofInt.java:27)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.<init>(ValidFailAnyofInt.java:16)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.fromFile(ValidFailAnyofInt.java:12)
	at io.kaitai.struct.spec.TestValidFailAnyofInt.testValidFailAnyofInt(TestValidFailAnyofInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailAnyofInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailAnyofInt -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse">
        <test-method status="PASS" signature="testSwitchManualEnumInvalidElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse@12b0404f]" name="testSwitchManualEnumInvalidElse" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalidElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse -->
      <class name="io.kaitai.struct.spec.TestOptionalId">
        <test-method status="PASS" signature="testOptionalId()[pri:0, instance:io.kaitai.struct.spec.TestOptionalId@1ffe63b9]" name="testOptionalId" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptionalId -->
      </class> <!-- io.kaitai.struct.spec.TestOptionalId -->
      <class name="io.kaitai.struct.spec.TestIfStruct">
        <test-method status="PASS" signature="testIfStruct()[pri:0, instance:io.kaitai.struct.spec.TestIfStruct@7880cdf3]" name="testIfStruct" duration-ms="3" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfStruct -->
      </class> <!-- io.kaitai.struct.spec.TestIfStruct -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilSized">
        <test-method status="PASS" signature="testRepeatUntilSized()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilSized@3d680b5a]" name="testRepeatUntilSized" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilSized -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilSized -->
      <class name="io.kaitai.struct.spec.TestStrPadTerm">
        <test-method status="PASS" signature="testStrPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTerm@5bd03f44]" name="testStrPadTerm" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTerm -->
      <class name="io.kaitai.struct.spec.TestExpr3">
        <test-method status="PASS" signature="testExpr3()[pri:0, instance:io.kaitai.struct.spec.TestExpr3@1f3f4916]" name="testExpr3" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr3 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr3 -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocref">
        <test-method status="PASS" signature="testDocstringsDocref()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocref@769e7ee8]" name="testDocstringsDocref" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocref -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocref -->
      <class name="io.kaitai.struct.spec.TestExpr2">
        <test-method status="PASS" signature="testExpr2()[pri:0, instance:io.kaitai.struct.spec.TestExpr2@4e91d63f]" name="testExpr2" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr2 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr2 -->
      <class name="io.kaitai.struct.spec.TestOpaqueWithParam">
        <test-method status="PASS" signature="testOpaqueWithParam()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueWithParam@1139b2f3]" name="testOpaqueWithParam" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueWithParam -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueWithParam -->
      <class name="io.kaitai.struct.spec.TestNestedTypes3">
        <test-method status="PASS" signature="testNestedTypes3()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes3@78b66d36]" name="testNestedTypes3" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes3 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes3 -->
      <class name="io.kaitai.struct.spec.TestTermBytes">
        <test-method status="PASS" signature="testTermBytes()[pri:0, instance:io.kaitai.struct.spec.TestTermBytes@460d0a57]" name="testTermBytes" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermBytes -->
      </class> <!-- io.kaitai.struct.spec.TestTermBytes -->
      <class name="io.kaitai.struct.spec.TestExpr1">
        <test-method status="PASS" signature="testExpr1()[pri:0, instance:io.kaitai.struct.spec.TestExpr1@233fe9b6]" name="testExpr1" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr1 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr1 -->
      <class name="io.kaitai.struct.spec.TestSwitchBytearray">
        <test-method status="PASS" signature="testSwitchBytearray()[pri:0, instance:io.kaitai.struct.spec.TestSwitchBytearray@6a400542]" name="testSwitchBytearray" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchBytearray -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchBytearray -->
      <class name="io.kaitai.struct.spec.TestExpr0">
        <test-method status="PASS" signature="testExpr0()[pri:0, instance:io.kaitai.struct.spec.TestExpr0@63a65a25]" name="testExpr0" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr0 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr0 -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType">
        <test-method status="PASS" signature="testOpaqueExternalType()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType@7a4ccb53]" name="testOpaqueExternalType" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType -->
      <class name="io.kaitai.struct.spec.TestNestedTypes2">
        <test-method status="PASS" signature="testNestedTypes2()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes2@56a6d5a6]" name="testNestedTypes2" duration-ms="24" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes2 -->
      <class name="io.kaitai.struct.spec.TestTermU1Val">
        <test-method status="PASS" signature="testTermU1Val()[pri:0, instance:io.kaitai.struct.spec.TestTermU1Val@6ce139a4]" name="testTermU1Val" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermU1Val -->
      </class> <!-- io.kaitai.struct.spec.TestTermU1Val -->
      <class name="io.kaitai.struct.spec.TestMetaTags">
        <test-method status="PASS" signature="testMetaTags()[pri:0, instance:io.kaitai.struct.spec.TestMetaTags@79b06cab]" name="testMetaTags" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaTags -->
      </class> <!-- io.kaitai.struct.spec.TestMetaTags -->
      <class name="io.kaitai.struct.spec.TestStrLiterals2">
        <test-method status="PASS" signature="testStrLiterals2()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals2@229d10bd]" name="testStrLiterals2" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals2 -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals2 -->
      <class name="io.kaitai.struct.spec.TestParamsCallExtraParens">
        <test-method status="PASS" signature="testParamsCallExtraParens()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallExtraParens@70e8f8e]" name="testParamsCallExtraParens" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallExtraParens -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallExtraParens -->
      <class name="io.kaitai.struct.spec.TestParamsPassStruct">
        <test-method status="PASS" signature="testParamsPassStruct()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassStruct@7219ec67]" name="testParamsPassStruct" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassStruct -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassStruct -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeU">
        <test-method status="PASS" signature="testEnumIntRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeU@33afa13b]" name="testEnumIntRangeU" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeU -->
      <class name="io.kaitai.struct.spec.TestExprStrEncodings">
        <test-method status="PASS" signature="testExprStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestExprStrEncodings@57c758ac]" name="testExprStrEncodings" duration-ms="28" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestExprStrEncodings -->
      <class name="io.kaitai.struct.spec.TestFixedContents">
        <test-method status="PASS" signature="testFixedContents()[pri:0, instance:io.kaitai.struct.spec.TestFixedContents@6e4784bc]" name="testFixedContents" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedContents -->
      </class> <!-- io.kaitai.struct.spec.TestFixedContents -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeS">
        <test-method status="PASS" signature="testEnumIntRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeS@3f197a46]" name="testEnumIntRangeS" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeS -->
      <class name="io.kaitai.struct.spec.TestIndexSizes">
        <test-method status="PASS" signature="testIndexSizes()[pri:0, instance:io.kaitai.struct.spec.TestIndexSizes@5223e5ee]" name="testIndexSizes" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexSizes -->
      </class> <!-- io.kaitai.struct.spec.TestIndexSizes -->
      <class name="io.kaitai.struct.spec.TestTypeTernary">
        <test-method status="PASS" signature="testTypeTernary()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary@2f177a4b]" name="testTypeTernary" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary -->
      <class name="io.kaitai.struct.spec.TestInstanceStdArray">
        <test-method status="PASS" signature="testInstanceStdArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStdArray@6fe7aac8]" name="testInstanceStdArray" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStdArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStdArray -->
      <class name="io.kaitai.struct.spec.TestNavParent2">
        <test-method status="PASS" signature="testNavParent2()[pri:0, instance:io.kaitai.struct.spec.TestNavParent2@10e41621]" name="testNavParent2" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent2 -->
      <class name="io.kaitai.struct.spec.TestNavParent3">
        <test-method status="PASS" signature="testNavParent3()[pri:0, instance:io.kaitai.struct.spec.TestNavParent3@9353778]" name="testNavParent3" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent3 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent3 -->
      <class name="io.kaitai.struct.spec.TestExprIfIntOps">
        <test-method status="FAIL" signature="testExprIfIntOps()[pri:0, instance:io.kaitai.struct.spec.TestExprIfIntOps@cd3fee8]" name="testExprIfIntOps" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:305)
	at org.testng.Assert.assertEquals(Assert.java:315)
	at io.kaitai.struct.spec.CommonSpec.assertIntEquals(CommonSpec.java:48)
	at io.kaitai.struct.spec.TestExprIfIntOps.testExprIfIntOps(TestExprIfIntOps.java:15)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIfIntOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprIfIntOps -->
      <class name="io.kaitai.struct.spec.TestCastToTop">
        <test-method status="PASS" signature="testCastToTop()[pri:0, instance:io.kaitai.struct.spec.TestCastToTop@59d016c9]" name="testCastToTop" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToTop -->
      </class> <!-- io.kaitai.struct.spec.TestCastToTop -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType0">
        <test-method status="PASS" signature="testExprSizeofType0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType0@3ba9ad43]" name="testExprSizeofType0" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType0 -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType1">
        <test-method status="PASS" signature="testExprSizeofType1()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType1@21de60b4]" name="testExprSizeofType1" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType1 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType1 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSize">
        <test-method status="PASS" signature="testSwitchManualIntSize()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSize@49c386c8]" name="testSwitchManualIntSize" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSize -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSize -->
      <class name="io.kaitai.struct.spec.TestEosExceptionBytes">
        <test-method status="PASS" signature="testEosExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionBytes@12e61fe6]" name="testEosExceptionBytes" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.HeapByteBuffer.get(HeapByteBuffer.java:151)
	at java.nio.ByteBuffer.get(ByteBuffer.java:715)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:324)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data._read(EosExceptionBytes.java:54)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data.<init>(EosExceptionBytes.java:51)
	at io.kaitai.struct.testformats.EosExceptionBytes._read(EosExceptionBytes.java:32)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EosExceptionBytes.fromFile(EosExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEosExceptionBytes.testEosExceptionBytes(TestEosExceptionBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestImports0">
        <test-method status="PASS" signature="testImports0()[pri:0, instance:io.kaitai.struct.spec.TestImports0@48ae9b55]" name="testImports0" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImports0 -->
      </class> <!-- io.kaitai.struct.spec.TestImports0 -->
      <class name="io.kaitai.struct.spec.TestNestedSameName">
        <test-method status="PASS" signature="testNestedSameName()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName@4c9f8c13]" name="testNestedSameName" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName -->
      <class name="io.kaitai.struct.spec.TestPositionToEnd">
        <test-method status="PASS" signature="testPositionToEnd()[pri:0, instance:io.kaitai.struct.spec.TestPositionToEnd@4ddced80]" name="testPositionToEnd" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionToEnd -->
      </class> <!-- io.kaitai.struct.spec.TestPositionToEnd -->
      <class name="io.kaitai.struct.spec.TestImportsAbs">
        <test-method status="PASS" signature="testImportsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbs@15b204a1]" name="testImportsAbs" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbs -->
      <class name="io.kaitai.struct.spec.TestSwitchRepeatExpr">
        <test-method status="PASS" signature="testSwitchRepeatExpr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchRepeatExpr@6a28ffa4]" name="testSwitchRepeatExpr" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchRepeatExpr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchRepeatExpr -->
      <class name="io.kaitai.struct.spec.TestTypeIntUnaryOp">
        <test-method status="PASS" signature="testTypeIntUnaryOp()[pri:0, instance:io.kaitai.struct.spec.TestTypeIntUnaryOp@163e4e87]" name="testTypeIntUnaryOp" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeIntUnaryOp -->
      </class> <!-- io.kaitai.struct.spec.TestTypeIntUnaryOp -->
      <class name="io.kaitai.struct.spec.TestFloatToI">
        <test-method status="PASS" signature="testFloatToI()[pri:0, instance:io.kaitai.struct.spec.TestFloatToI@10e92f8f]" name="testFloatToI" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatToI -->
      </class> <!-- io.kaitai.struct.spec.TestFloatToI -->
      <class name="io.kaitai.struct.spec.TestMultipleUse">
        <test-method status="PASS" signature="testMultipleUse()[pri:0, instance:io.kaitai.struct.spec.TestMultipleUse@7ce3cb8e]" name="testMultipleUse" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultipleUse -->
      </class> <!-- io.kaitai.struct.spec.TestMultipleUse -->
      <class name="io.kaitai.struct.spec.TestSwitchElseOnly">
        <test-method status="PASS" signature="testSwitchElseOnly()[pri:0, instance:io.kaitai.struct.spec.TestSwitchElseOnly@309e345f]" name="testSwitchElseOnly" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchElseOnly -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchElseOnly -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalid">
        <test-method status="PASS" signature="testSwitchManualEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalid@3c22fc4c]" name="testSwitchManualEnumInvalid" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestCombineStr">
        <test-method status="PASS" signature="testCombineStr()[pri:0, instance:io.kaitai.struct.spec.TestCombineStr@5e82df6a]" name="testCombineStr" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineStr -->
      </class> <!-- io.kaitai.struct.spec.TestCombineStr -->
      <class name="io.kaitai.struct.spec.TestProcessRotate">
        <test-method status="PASS" signature="testProcessRotate()[pri:0, instance:io.kaitai.struct.spec.TestProcessRotate@78aab498]" name="testProcessRotate" duration-ms="3" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRotate -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRotate -->
      <class name="io.kaitai.struct.spec.TestJsSignedRightShift">
        <test-method status="PASS" signature="testJsSignedRightShift()[pri:0, instance:io.kaitai.struct.spec.TestJsSignedRightShift@17046283]" name="testJsSignedRightShift" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJsSignedRightShift -->
      </class> <!-- io.kaitai.struct.spec.TestJsSignedRightShift -->
      <class name="io.kaitai.struct.spec.TestEnumImport">
        <test-method status="PASS" signature="testEnumImport()[pri:0, instance:io.kaitai.struct.spec.TestEnumImport@16e7dcfd]" name="testEnumImport" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumImport -->
      </class> <!-- io.kaitai.struct.spec.TestEnumImport -->
      <class name="io.kaitai.struct.spec.TestProcessCustomNoArgs">
        <test-method status="PASS" signature="testProcessCustomNoArgs()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustomNoArgs@358ee631]" name="testProcessCustomNoArgs" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustomNoArgs -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustomNoArgs -->
      <class name="io.kaitai.struct.spec.TestDefaultBitEndianMod">
        <test-method status="PASS" signature="testDefaultBitEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBitEndianMod@769f71a9]" name="testDefaultBitEndianMod" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBitEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBitEndianMod -->
      <class name="io.kaitai.struct.spec.TestNavParentOverride">
        <test-method status="PASS" signature="testNavParentOverride()[pri:0, instance:io.kaitai.struct.spec.TestNavParentOverride@79efed2d]" name="testNavParentOverride" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentOverride -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentOverride -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeLe">
        <test-method status="PASS" signature="testBcdUserTypeLe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeLe@67a20f67]" name="testBcdUserTypeLe" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeLe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeLe -->
      <class name="io.kaitai.struct.spec.TestBitsSignedB64Le">
        <test-method status="PASS" signature="testBitsSignedB64Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsSignedB64Le@5c30a9b0]" name="testBitsSignedB64Le" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSignedB64Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSignedB64Le -->
      <class name="io.kaitai.struct.spec.TestStrEos">
        <test-method status="PASS" signature="testStrEos()[pri:0, instance:io.kaitai.struct.spec.TestStrEos@5ae50ce6]" name="testStrEos" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEos -->
      </class> <!-- io.kaitai.struct.spec.TestStrEos -->
      <class name="io.kaitai.struct.spec.TestNestedSameName2">
        <test-method status="PASS" signature="testNestedSameName2()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName2@56528192]" name="testNestedSameName2" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName2 -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsLe">
        <test-method status="PASS" signature="testDefaultEndianExprIsLe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsLe@37918c79]" name="testDefaultEndianExprIsLe" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsLe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsLe -->
      <class name="io.kaitai.struct.spec.TestProcessRepeatBytes">
        <test-method status="PASS" signature="testProcessRepeatBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessRepeatBytes@14d3bc22]" name="testProcessRepeatBytes" duration-ms="6" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRepeatBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRepeatBytes -->
      <class name="io.kaitai.struct.spec.TestExprCalcArrayOps">
        <test-method status="PASS" signature="testExprCalcArrayOps()[pri:0, instance:io.kaitai.struct.spec.TestExprCalcArrayOps@27ae2fd0]" name="testExprCalcArrayOps" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprCalcArrayOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprCalcArrayOps -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilCalcArrayType">
        <test-method status="PASS" signature="testRepeatUntilCalcArrayType()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilCalcArrayType@a9cd3b1]" name="testRepeatUntilCalcArrayType" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilCalcArrayType -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilCalcArrayType -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeBytes">
        <test-method status="PASS" signature="testValidFailRangeBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeBytes@1f0f1111]" name="testValidFailRangeBytes" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not in range, max [50 31], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 2: validation failed: not in range, max [50 31], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailRangeBytes._read(ValidFailRangeBytes.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeBytes.<init>(ValidFailRangeBytes.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeBytes.<init>(ValidFailRangeBytes.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeBytes.fromFile(ValidFailRangeBytes.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeBytes.testValidFailRangeBytes(TestValidFailRangeBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeBytes -->
      <class name="io.kaitai.struct.spec.TestImportsAbsAbs">
        <test-method status="PASS" signature="testImportsAbsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsAbs@34b7ac2f]" name="testImportsAbsAbs" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsAbs -->
      <class name="io.kaitai.struct.spec.TestEnumNegative">
        <test-method status="PASS" signature="testEnumNegative()[pri:0, instance:io.kaitai.struct.spec.TestEnumNegative@3aefe5e5]" name="testEnumNegative" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumNegative -->
      </class> <!-- io.kaitai.struct.spec.TestEnumNegative -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceSwitch">
        <test-method status="PASS" signature="testProcessCoerceSwitch()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceSwitch@2667f029]" name="testProcessCoerceSwitch" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceSwitch -->
      <class name="io.kaitai.struct.spec.TestExprIntDiv">
        <test-method status="FAIL" signature="testExprIntDiv()[pri:0, instance:io.kaitai.struct.spec.TestExprIntDiv@3b07a0d6]" name="testExprIntDiv" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [-757] but found [-756]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [-757] but found [-756]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:389)
	at org.testng.Assert.assertEquals(Assert.java:399)
	at io.kaitai.struct.spec.CommonSpec.assertIntEquals(CommonSpec.java:36)
	at io.kaitai.struct.spec.TestExprIntDiv.testExprIntDiv(TestExprIntDiv.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIntDiv -->
      </class> <!-- io.kaitai.struct.spec.TestExprIntDiv -->
      <class name="io.kaitai.struct.spec.TestSwitchRepeatExprInvalid">
        <test-method status="PASS" signature="testSwitchRepeatExprInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchRepeatExprInvalid@65466a6a]" name="testSwitchRepeatExprInvalid" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchRepeatExprInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchRepeatExprInvalid -->
      <class name="io.kaitai.struct.spec.TestPositionInSeq">
        <test-method status="PASS" signature="testPositionInSeq()[pri:0, instance:io.kaitai.struct.spec.TestPositionInSeq@654f0d9c]" name="testPositionInSeq" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionInSeq -->
      </class> <!-- io.kaitai.struct.spec.TestPositionInSeq -->
      <class name="io.kaitai.struct.spec.TestValidFailEqStr">
        <test-method status="PASS" signature="testValidFailEqStr()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqStr@49b0b76]" name="testValidFailEqStr" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 4: validation failed: not equal, expected BACK, but got PACK]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 4: validation failed: not equal, expected BACK, but got PACK
	at io.kaitai.struct.testformats.ValidFailEqStr._read(ValidFailEqStr.java:33)
	at io.kaitai.struct.testformats.ValidFailEqStr.<init>(ValidFailEqStr.java:28)
	at io.kaitai.struct.testformats.ValidFailEqStr.<init>(ValidFailEqStr.java:17)
	at io.kaitai.struct.testformats.ValidFailEqStr.fromFile(ValidFailEqStr.java:13)
	at io.kaitai.struct.spec.TestValidFailEqStr.testValidFailEqStr(TestValidFailEqStr.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqStr -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqStr -->
      <class name="io.kaitai.struct.spec.TestDebugArrayUser">
        <test-method status="PASS" signature="testDebugArrayUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugArrayUser@159f197]" name="testDebugArrayUser" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugArrayUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugArrayUser -->
      <class name="io.kaitai.struct.spec.TestParamsEnum">
        <test-method status="PASS" signature="testParamsEnum()[pri:0, instance:io.kaitai.struct.spec.TestParamsEnum@4b0b0854]" name="testParamsEnum" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestParamsEnum -->
      <class name="io.kaitai.struct.spec.TestDebug0">
        <test-method status="PASS" signature="testDebug0()[pri:0, instance:io.kaitai.struct.spec.TestDebug0@72a7c7e0]" name="testDebug0" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebug0 -->
      </class> <!-- io.kaitai.struct.spec.TestDebug0 -->
      <class name="io.kaitai.struct.spec.TestRepeatEosBit">
        <test-method status="PASS" signature="testRepeatEosBit()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosBit@6b26e945]" name="testRepeatEosBit" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosBit -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosBit -->
      <class name="io.kaitai.struct.spec.TestIntegersDoubleOverflow">
        <test-method status="PASS" signature="testIntegersDoubleOverflow()[pri:0, instance:io.kaitai.struct.spec.TestIntegersDoubleOverflow@2ddc8ecb]" name="testIntegersDoubleOverflow" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegersDoubleOverflow -->
      </class> <!-- io.kaitai.struct.spec.TestIntegersDoubleOverflow -->
      <class name="io.kaitai.struct.spec.TestIntegers">
        <test-method status="PASS" signature="testIntegers()[pri:0, instance:io.kaitai.struct.spec.TestIntegers@1622f1b]" name="testIntegers" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestIntegers -->
      <class name="io.kaitai.struct.spec.TestNavParentVsValueInst">
        <test-method status="PASS" signature="testNavParentVsValueInst()[pri:0, instance:io.kaitai.struct.spec.TestNavParentVsValueInst@71b1176b]" name="testNavParentVsValueInst" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentVsValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentVsValueInst -->
      <class name="io.kaitai.struct.spec.TestBitsSimpleLe">
        <test-method status="PASS" signature="testBitsSimpleLe()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimpleLe@65d6b83b]" name="testBitsSimpleLe" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimpleLe -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimpleLe -->
      <class name="io.kaitai.struct.spec.TestYamlInts">
        <test-method status="PASS" signature="testYamlInts()[pri:0, instance:io.kaitai.struct.spec.TestYamlInts@6973bf95]" name="testYamlInts" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testYamlInts -->
      </class> <!-- io.kaitai.struct.spec.TestYamlInts -->
      <class name="io.kaitai.struct.spec.TestInstanceUserArray">
        <test-method status="PASS" signature="testInstanceUserArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceUserArray@3967e60c]" name="testInstanceUserArray" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceUserArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceUserArray -->
      <class name="io.kaitai.struct.spec.TestExprEnum">
        <test-method status="PASS" signature="testExprEnum()[pri:0, instance:io.kaitai.struct.spec.TestExprEnum@60dcc9fe]" name="testExprEnum" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprEnum -->
      </class> <!-- io.kaitai.struct.spec.TestExprEnum -->
      <class name="io.kaitai.struct.spec.TestProcessXorConst">
        <test-method status="PASS" signature="testProcessXorConst()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorConst@56de5251]" name="testProcessXorConst" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorConst -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorConst -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprInherited">
        <test-method status="PASS" signature="testDefaultEndianExprInherited()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprInherited@7ee955a8]" name="testDefaultEndianExprInherited" duration-ms="5" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprInherited -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprInherited -->
      <class name="io.kaitai.struct.spec.TestProcessCustom">
        <test-method status="PASS" signature="testProcessCustom()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustom@636be97c]" name="testProcessCustom" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustom -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustom -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Const">
        <test-method status="PASS" signature="testProcessXor4Const()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Const@7a69b07]" name="testProcessXor4Const" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Const -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Const -->
      <class name="io.kaitai.struct.spec.TestCastToImported">
        <test-method status="PASS" signature="testCastToImported()[pri:0, instance:io.kaitai.struct.spec.TestCastToImported@36c88a32]" name="testCastToImported" duration-ms="4" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToImported -->
      </class> <!-- io.kaitai.struct.spec.TestCastToImported -->
      <class name="io.kaitai.struct.spec.TestBufferedStruct">
        <test-method status="PASS" signature="testBufferedStruct()[pri:0, instance:io.kaitai.struct.spec.TestBufferedStruct@30b7c004]" name="testBufferedStruct" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBufferedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestBufferedStruct -->
      <class name="io.kaitai.struct.spec.TestIndexToParamExpr">
        <test-method status="PASS" signature="testIndexToParamExpr()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamExpr@6e0dec4a]" name="testIndexToParamExpr" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamExpr -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamExpr -->
      <class name="io.kaitai.struct.spec.TestDebugEnumName">
        <test-method status="PASS" signature="testDebugEnumName()[pri:0, instance:io.kaitai.struct.spec.TestDebugEnumName@78e117e3]" name="testDebugEnumName" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugEnumName -->
      </class> <!-- io.kaitai.struct.spec.TestDebugEnumName -->
      <class name="io.kaitai.struct.spec.TestCastNested">
        <test-method status="PASS" signature="testCastNested()[pri:0, instance:io.kaitai.struct.spec.TestCastNested@e056f20]" name="testCastNested" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastNested -->
      </class> <!-- io.kaitai.struct.spec.TestCastNested -->
      <class name="io.kaitai.struct.spec.TestSwitchMultiBoolOps">
        <test-method status="PASS" signature="testSwitchMultiBoolOps()[pri:0, instance:io.kaitai.struct.spec.TestSwitchMultiBoolOps@1184ab05]" name="testSwitchMultiBoolOps" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchMultiBoolOps -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchMultiBoolOps -->
      <class name="io.kaitai.struct.spec.TestEnumForUnknownId">
        <test-method status="PASS" signature="testEnumForUnknownId()[pri:0, instance:io.kaitai.struct.spec.TestEnumForUnknownId@7adda9cc]" name="testEnumForUnknownId" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumForUnknownId -->
      </class> <!-- io.kaitai.struct.spec.TestEnumForUnknownId -->
      <class name="io.kaitai.struct.spec.TestValidFailContents">
        <test-method status="PASS" signature="testValidFailContents()[pri:0, instance:io.kaitai.struct.spec.TestValidFailContents@13e39c73]" name="testValidFailContents" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailContents._read(ValidFailContents.java:33)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:28)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:17)
	at io.kaitai.struct.testformats.ValidFailContents.fromFile(ValidFailContents.java:13)
	at io.kaitai.struct.spec.TestValidFailContents.testValidFailContents(TestValidFailContents.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailContents -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailContents -->
      <class name="io.kaitai.struct.spec.TestTermStrz">
        <test-method status="PASS" signature="testTermStrz()[pri:0, instance:io.kaitai.struct.spec.TestTermStrz@48e4374]" name="testTermStrz" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermStrz -->
      </class> <!-- io.kaitai.struct.spec.TestTermStrz -->
      <class name="io.kaitai.struct.spec.TestNavRoot">
        <test-method status="PASS" signature="testNavRoot()[pri:0, instance:io.kaitai.struct.spec.TestNavRoot@124c278f]" name="testNavRoot" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavRoot -->
      </class> <!-- io.kaitai.struct.spec.TestNavRoot -->
      <class name="io.kaitai.struct.spec.TestTypeTernary2ndFalsy">
        <test-method status="PASS" signature="testTypeTernary2ndFalsy()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary2ndFalsy@2b6faea6]" name="testTypeTernary2ndFalsy" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary2ndFalsy -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary2ndFalsy -->
      <class name="io.kaitai.struct.spec.TestTsPacketHeader">
        <test-method status="PASS" signature="testTsPacketHeader()[pri:0, instance:io.kaitai.struct.spec.TestTsPacketHeader@4445629]" name="testTsPacketHeader" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTsPacketHeader -->
      </class> <!-- io.kaitai.struct.spec.TestTsPacketHeader -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrzDouble">
        <test-method status="PASS" signature="testRepeatNStrzDouble()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrzDouble@3c72f59f]" name="testRepeatNStrzDouble" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrzDouble -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrzDouble -->
      <class name="io.kaitai.struct.spec.TestZlibWithHeader78">
        <test-method status="PASS" signature="testZlibWithHeader78()[pri:0, instance:io.kaitai.struct.spec.TestZlibWithHeader78@3c419631]" name="testZlibWithHeader78" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibWithHeader78 -->
      </class> <!-- io.kaitai.struct.spec.TestZlibWithHeader78 -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayStr">
        <test-method status="PASS" signature="testParamsPassArrayStr()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayStr@96def03]" name="testParamsPassArrayStr" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayStr -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayStr -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilS4">
        <test-method status="PASS" signature="testRepeatUntilS4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilS4@63021689]" name="testRepeatUntilS4" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilS4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilS4 -->
      <class name="io.kaitai.struct.spec.TestValidFailEqInt">
        <test-method status="PASS" signature="testValidFailEqInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqInt@25d250c6]" name="testValidFailEqInt" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not equal, expected 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 1: validation failed: not equal, expected 123, but got 80
	at io.kaitai.struct.testformats.ValidFailEqInt._read(ValidFailEqInt.java:32)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:27)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:16)
	at io.kaitai.struct.testformats.ValidFailEqInt.fromFile(ValidFailEqInt.java:12)
	at io.kaitai.struct.spec.TestValidFailEqInt.testValidFailEqInt(TestValidFailEqInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqInt -->
      <class name="io.kaitai.struct.spec.TestEofExceptionU4">
        <test-method status="PASS" signature="testEofExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionU4@7b227d8d]" name="testEofExceptionU4" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.Buffer.nextGetIndex(Buffer.java:506)
	at java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:681)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:269)
	at io.kaitai.struct.testformats.EofExceptionU4._read(EofExceptionU4.java:31)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:27)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:16)
	at io.kaitai.struct.testformats.EofExceptionU4.fromFile(EofExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEofExceptionU4.testEofExceptionU4(TestEofExceptionU4.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestValidShort">
        <test-method status="PASS" signature="testValidShort()[pri:0, instance:io.kaitai.struct.spec.TestValidShort@147ed70f]" name="testValidShort" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidShort -->
      </class> <!-- io.kaitai.struct.spec.TestValidShort -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStr">
        <test-method status="PASS" signature="testSwitchManualStr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStr@4b14c583]" name="testSwitchManualStr" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStr -->
      <class name="io.kaitai.struct.spec.TestTypeTernaryOpaque">
        <test-method status="PASS" signature="testTypeTernaryOpaque()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernaryOpaque@12d4bf7e]" name="testTypeTernaryOpaque" duration-ms="6" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernaryOpaque -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernaryOpaque -->
      <class name="io.kaitai.struct.spec.TestCombineBytes">
        <test-method status="PASS" signature="testCombineBytes()[pri:0, instance:io.kaitai.struct.spec.TestCombineBytes@4c1d9d4b]" name="testCombineBytes" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineBytes -->
      </class> <!-- io.kaitai.struct.spec.TestCombineBytes -->
      <class name="io.kaitai.struct.spec.TestNavParent">
        <test-method status="PASS" signature="testNavParent()[pri:0, instance:io.kaitai.struct.spec.TestNavParent@61dd025]" name="testNavParent" duration-ms="10" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent -->
      <class name="io.kaitai.struct.spec.TestDocstrings">
        <test-method status="PASS" signature="testDocstrings()[pri:0, instance:io.kaitai.struct.spec.TestDocstrings@6dbb137d]" name="testDocstrings" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstrings -->
      </class> <!-- io.kaitai.struct.spec.TestDocstrings -->
      <class name="io.kaitai.struct.spec.TestValidFailInst">
        <test-method status="PASS" signature="testValidFailInst()[pri:0, instance:io.kaitai.struct.spec.TestValidFailInst@77167fb7]" name="testValidFailInst" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49
	at io.kaitai.struct.testformats.ValidFailInst.inst(ValidFailInst.java:43)
	at io.kaitai.struct.testformats.ValidFailInst._read(ValidFailInst.java:30)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:27)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:16)
	at io.kaitai.struct.testformats.ValidFailInst.fromFile(ValidFailInst.java:12)
	at io.kaitai.struct.spec.TestValidFailInst.testValidFailInst(TestValidFailInst.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailInst -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailInst -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeBe">
        <test-method status="PASS" signature="testBcdUserTypeBe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeBe@2ea227af]" name="testBcdUserTypeBe" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeBe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeBe -->
      <class name="io.kaitai.struct.spec.TestIndexToParamEos">
        <test-method status="PASS" signature="testIndexToParamEos()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamEos@6580cfdd]" name="testIndexToParamEos" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamEos -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamEos -->
      <class name="io.kaitai.struct.spec.TestBitsSimple">
        <test-method status="PASS" signature="testBitsSimple()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimple@1700915]" name="testBitsSimple" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimple -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimple -->
      <class name="io.kaitai.struct.spec.TestDebugSwitchUser">
        <test-method status="PASS" signature="testDebugSwitchUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugSwitchUser@5be6e01c]" name="testDebugSwitchUser" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugSwitchUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugSwitchUser -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers2">
        <test-method status="PASS" signature="testSwitchIntegers2()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers2@d706f19]" name="testSwitchIntegers2" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers2 -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers2 -->
      <class name="io.kaitai.struct.spec.TestIfInstances">
        <test-method status="PASS" signature="testIfInstances()[pri:0, instance:io.kaitai.struct.spec.TestIfInstances@48fa0f47]" name="testIfInstances" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfInstances -->
      </class> <!-- io.kaitai.struct.spec.TestIfInstances -->
      <class name="io.kaitai.struct.spec.TestMetaXref">
        <test-method status="PASS" signature="testMetaXref()[pri:0, instance:io.kaitai.struct.spec.TestMetaXref@3901d134]" name="testMetaXref" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaXref -->
      </class> <!-- io.kaitai.struct.spec.TestMetaXref -->
      <class name="io.kaitai.struct.spec.TestInstanceStd">
        <test-method status="PASS" signature="testInstanceStd()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStd@4313f5bc]" name="testInstanceStd" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStd -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStd -->
      <class name="io.kaitai.struct.spec.TestEofExceptionBytes">
        <test-method status="PASS" signature="testEofExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionBytes@4690b489]" name="testEofExceptionBytes" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.DirectByteBuffer.get(DirectByteBuffer.java:271)
	at java.nio.ByteBuffer.get(ByteBuffer.java:715)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:324)
	at io.kaitai.struct.testformats.EofExceptionBytes._read(EofExceptionBytes.java:30)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EofExceptionBytes.fromFile(EofExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEofExceptionBytes.testEofExceptionBytes(TestEofExceptionBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestExprIoEof">
        <test-method status="PASS" signature="testExprIoEof()[pri:0, instance:io.kaitai.struct.spec.TestExprIoEof@222114ba]" name="testExprIoEof" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoEof -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoEof -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayInt">
        <test-method status="PASS" signature="testParamsPassArrayInt()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayInt@49d904ec]" name="testParamsPassArrayInt" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayInt -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayInt -->
      <class name="io.kaitai.struct.spec.TestEosExceptionU4">
        <test-method status="PASS" signature="testEosExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionU4@11a9e7c8]" name="testEosExceptionU4" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.Buffer.nextGetIndex(Buffer.java:506)
	at java.nio.HeapByteBuffer.getInt(HeapByteBuffer.java:361)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:269)
	at io.kaitai.struct.testformats.EosExceptionU4$Data._read(EosExceptionU4.java:55)
	at io.kaitai.struct.testformats.EosExceptionU4$Data.<init>(EosExceptionU4.java:51)
	at io.kaitai.struct.testformats.EosExceptionU4._read(EosExceptionU4.java:32)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:27)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:16)
	at io.kaitai.struct.testformats.EosExceptionU4.fromFile(EosExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEosExceptionU4.testEosExceptionU4(TestEosExceptionU4.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestImportsRel1">
        <test-method status="PASS" signature="testImportsRel1()[pri:0, instance:io.kaitai.struct.spec.TestImportsRel1@45b9a632]" name="testImportsRel1" duration-ms="10" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsRel1 -->
      </class> <!-- io.kaitai.struct.spec.TestImportsRel1 -->
      <class name="io.kaitai.struct.spec.TestProcessRepeatUsertype">
        <test-method status="PASS" signature="testProcessRepeatUsertype()[pri:0, instance:io.kaitai.struct.spec.TestProcessRepeatUsertype@3e2e18f2]" name="testProcessRepeatUsertype" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRepeatUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRepeatUsertype -->
      <class name="io.kaitai.struct.spec.TestIoLocalVar">
        <test-method status="PASS" signature="testIoLocalVar()[pri:0, instance:io.kaitai.struct.spec.TestIoLocalVar@9225652]" name="testIoLocalVar" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIoLocalVar -->
      </class> <!-- io.kaitai.struct.spec.TestIoLocalVar -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprException">
        <test-method status="PASS" signature="testDefaultEndianExprException()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprException@363ee3a2]" name="testDefaultEndianExprException" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$UndecidedEndiannessError">
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$UndecidedEndiannessError
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj._read(DefaultEndianExprException.java:98)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj.<init>(DefaultEndianExprException.java:82)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc._read(DefaultEndianExprException.java:62)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc.<init>(DefaultEndianExprException.java:58)
	at io.kaitai.struct.testformats.DefaultEndianExprException._read(DefaultEndianExprException.java:36)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:29)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:18)
	at io.kaitai.struct.testformats.DefaultEndianExprException.fromFile(DefaultEndianExprException.java:14)
	at io.kaitai.struct.spec.TestDefaultEndianExprException.testDefaultEndianExprException(TestDefaultEndianExprException.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$UndecidedEndiannessError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprException -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprException -->
      <class name="io.kaitai.struct.spec.TestUserType">
        <test-method status="PASS" signature="testUserType()[pri:0, instance:io.kaitai.struct.spec.TestUserType@659a969b]" name="testUserType" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserType -->
      </class> <!-- io.kaitai.struct.spec.TestUserType -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilComplex">
        <test-method status="PASS" signature="testRepeatUntilComplex()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilComplex@30ee2816]" name="testRepeatUntilComplex" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilComplex -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilComplex -->
      <class name="io.kaitai.struct.spec.TestEnumDeepLiterals">
        <test-method status="PASS" signature="testEnumDeepLiterals()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeepLiterals@47d90b9e]" name="testEnumDeepLiterals" duration-ms="4" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeepLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeepLiterals -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeStr">
        <test-method status="PASS" signature="testValidFailRangeStr()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeStr@670002]" name="testValidFailRangeStr" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not in range, max P1, but got PA]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 2: validation failed: not in range, max P1, but got PA
	at io.kaitai.struct.testformats.ValidFailRangeStr._read(ValidFailRangeStr.java:36)
	at io.kaitai.struct.testformats.ValidFailRangeStr.<init>(ValidFailRangeStr.java:28)
	at io.kaitai.struct.testformats.ValidFailRangeStr.<init>(ValidFailRangeStr.java:17)
	at io.kaitai.struct.testformats.ValidFailRangeStr.fromFile(ValidFailRangeStr.java:13)
	at io.kaitai.struct.spec.TestValidFailRangeStr.testValidFailRangeStr(TestValidFailRangeStr.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeStr -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeStr -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType02Parent">
        <test-method status="PASS" signature="testOpaqueExternalType02Parent()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType02Parent@29626d54]" name="testOpaqueExternalType02Parent" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType02Parent -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType02Parent -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers">
        <test-method status="PASS" signature="testSwitchIntegers()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers@149e0f5d]" name="testSwitchIntegers" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers -->
      <class name="io.kaitai.struct.spec.TestBitsSignedB32Le">
        <test-method status="PASS" signature="testBitsSignedB32Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsSignedB32Le@353d0772]" name="testBitsSignedB32Le" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSignedB32Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSignedB32Le -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValueSized">
        <test-method status="PASS" signature="testExprSizeofValueSized()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValueSized@61230f6a]" name="testExprSizeofValueSized" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValueSized -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValueSized -->
      <class name="io.kaitai.struct.spec.TestBytesPadTerm">
        <test-method status="PASS" signature="testBytesPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestBytesPadTerm@60d8c9b7]" name="testBytesPadTerm" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBytesPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestBytesPadTerm -->
      <class name="io.kaitai.struct.spec.TestValidSwitch">
        <test-method status="PASS" signature="testValidSwitch()[pri:0, instance:io.kaitai.struct.spec.TestValidSwitch@3c9d0b9d]" name="testValidSwitch" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestValidSwitch -->
      <class name="io.kaitai.struct.spec.TestStrEncodingsDefault">
        <test-method status="PASS" signature="testStrEncodingsDefault()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodingsDefault@d4342c2]" name="testStrEncodingsDefault" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodingsDefault -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodingsDefault -->
      <class name="io.kaitai.struct.spec.TestExprBytesOps">
        <test-method status="FAIL" signature="testExprBytesOps()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesOps@7e0b85f9]" name="testExprBytesOps" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [255] but found [-1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [255] but found [-1]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:389)
	at org.testng.Assert.assertEquals(Assert.java:399)
	at io.kaitai.struct.spec.CommonSpec.assertIntEquals(CommonSpec.java:36)
	at io.kaitai.struct.spec.TestExprBytesOps.testExprBytesOps(TestExprBytesOps.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesOps -->
      <class name="io.kaitai.struct.spec.TestZlibSurrounded">
        <test-method status="PASS" signature="testZlibSurrounded()[pri:0, instance:io.kaitai.struct.spec.TestZlibSurrounded@be64738]" name="testZlibSurrounded" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibSurrounded -->
      </class> <!-- io.kaitai.struct.spec.TestZlibSurrounded -->
      <class name="io.kaitai.struct.spec.TestEnumInvalid">
        <test-method status="PASS" signature="testEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestEnumInvalid@1a04f701]" name="testEnumInvalid" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitch">
        <test-method status="PASS" signature="testNavParentSwitch()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitch@54c562f7]" name="testNavParentSwitch" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitch -->
      <class name="io.kaitai.struct.spec.TestEnumIf">
        <test-method status="PASS" signature="testEnumIf()[pri:0, instance:io.kaitai.struct.spec.TestEnumIf@5276e6b0]" name="testEnumIf" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIf -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIf -->
      <class name="io.kaitai.struct.spec.TestInstanceIoUser">
        <test-method status="PASS" signature="testInstanceIoUser()[pri:0, instance:io.kaitai.struct.spec.TestInstanceIoUser@1e802ef9]" name="testInstanceIoUser" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceIoUser -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceIoUser -->
      <class name="io.kaitai.struct.spec.TestEnumToIClassBorder1">
        <test-method status="PASS" signature="testEnumToIClassBorder1()[pri:0, instance:io.kaitai.struct.spec.TestEnumToIClassBorder1@20d28811]" name="testEnumToIClassBorder1" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToIClassBorder1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToIClassBorder1 -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse">
        <test-method status="PASS" signature="testNavParentFalse()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse@7c0c77c7]" name="testNavParentFalse" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse -->
      <class name="io.kaitai.struct.spec.TestSwitchManualInt">
        <test-method status="PASS" signature="testSwitchManualInt()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualInt@6193932a]" name="testSwitchManualInt" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualInt -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualInt -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianMod">
        <test-method status="PASS" signature="testDefaultEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianMod@3d121db3]" name="testDefaultEndianMod" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianMod -->
      <class name="io.kaitai.struct.spec.TestSwitchCast">
        <test-method status="PASS" signature="testSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestSwitchCast@1ed1993a]" name="testSwitchCast" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchCast -->
      <class name="io.kaitai.struct.spec.TestBitsByteAligned">
        <test-method status="PASS" signature="testBitsByteAligned()[pri:0, instance:io.kaitai.struct.spec.TestBitsByteAligned@7c469c48]" name="testBitsByteAligned" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsByteAligned -->
      </class> <!-- io.kaitai.struct.spec.TestBitsByteAligned -->
      <class name="io.kaitai.struct.spec.TestEnumToI">
        <test-method status="PASS" signature="testEnumToI()[pri:0, instance:io.kaitai.struct.spec.TestEnumToI@18ce0030]" name="testEnumToI" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToI -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToI -->
      <class name="io.kaitai.struct.spec.TestRepeatEosU4">
        <test-method status="PASS" signature="testRepeatEosU4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosU4@19bb07ed]" name="testRepeatEosU4" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosU4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosU4 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeElse">
        <test-method status="PASS" signature="testSwitchManualIntSizeElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeElse@5cee5251]" name="testSwitchManualIntSizeElse" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeElse -->
      <class name="io.kaitai.struct.spec.TestParamsCallShort">
        <test-method status="PASS" signature="testParamsCallShort()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallShort@c267ef4]" name="testParamsCallShort" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallShort -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallShort -->
      <class name="io.kaitai.struct.spec.TestEnumFancy">
        <test-method status="PASS" signature="testEnumFancy()[pri:0, instance:io.kaitai.struct.spec.TestEnumFancy@1d119efb]" name="testEnumFancy" duration-ms="5" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumFancy -->
      </class> <!-- io.kaitai.struct.spec.TestEnumFancy -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeU">
        <test-method status="PASS" signature="testEnumLongRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeU@1b1473ab]" name="testEnumLongRangeU" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeU -->
      <class name="io.kaitai.struct.spec.TestValidFailExpr">
        <test-method status="PASS" signature="testValidFailExpr()[pri:0, instance:io.kaitai.struct.spec.TestValidFailExpr@51e5fc98]" name="testValidFailExpr" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationExprError">
            <message>
              <![CDATA[/seq/1: at pos 3: validation failed: not matching the expression, got -190]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationExprError: /seq/1: at pos 3: validation failed: not matching the expression, got -190
	at io.kaitai.struct.testformats.ValidFailExpr._read(ValidFailExpr.java:41)
	at io.kaitai.struct.testformats.ValidFailExpr.<init>(ValidFailExpr.java:27)
	at io.kaitai.struct.testformats.ValidFailExpr.<init>(ValidFailExpr.java:16)
	at io.kaitai.struct.testformats.ValidFailExpr.fromFile(ValidFailExpr.java:12)
	at io.kaitai.struct.spec.TestValidFailExpr.testValidFailExpr(TestValidFailExpr.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationExprError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailExpr -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailExpr -->
      <class name="io.kaitai.struct.spec.TestNestedTypes">
        <test-method status="PASS" signature="testNestedTypes()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes@1677d1]" name="testNestedTypes" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes -->
      <class name="io.kaitai.struct.spec.TestExprArray">
        <test-method status="PASS" signature="testExprArray()[pri:0, instance:io.kaitai.struct.spec.TestExprArray@4b5a5ed1]" name="testExprArray" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprArray -->
      </class> <!-- io.kaitai.struct.spec.TestExprArray -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeFloat">
        <test-method status="PASS" signature="testValidFailRangeFloat()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeFloat@31d7b7bf]" name="testValidFailRangeFloat" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 4: validation failed: not in range, max 0.4, but got 0.5]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 4: validation failed: not in range, max 0.4, but got 0.5
	at io.kaitai.struct.testformats.ValidFailRangeFloat._read(ValidFailRangeFloat.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeFloat.<init>(ValidFailRangeFloat.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeFloat.<init>(ValidFailRangeFloat.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeFloat.fromFile(ValidFailRangeFloat.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeFloat.testValidFailRangeFloat(TestValidFailRangeFloat.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeFloat -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeFloat -->
      <class name="io.kaitai.struct.spec.TestIfValues">
        <test-method status="PASS" signature="testIfValues()[pri:0, instance:io.kaitai.struct.spec.TestIfValues@45018215]" name="testIfValues" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfValues -->
      </class> <!-- io.kaitai.struct.spec.TestIfValues -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceBytes">
        <test-method status="PASS" signature="testProcessCoerceBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceBytes@433d61fb]" name="testProcessCoerceBytes" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceBytes -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype2">
        <test-method status="PASS" signature="testProcessCoerceUsertype2()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype2@2473d930]" name="testProcessCoerceUsertype2" duration-ms="32" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype2 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype2 -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeInt">
        <test-method status="PASS" signature="testValidFailRangeInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeInt@2928854b]" name="testValidFailRangeInt" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, max 10, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 1: validation failed: not in range, max 10, but got 80
	at io.kaitai.struct.testformats.ValidFailRangeInt._read(ValidFailRangeInt.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeInt.<init>(ValidFailRangeInt.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeInt.<init>(ValidFailRangeInt.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeInt.fromFile(ValidFailRangeInt.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeInt.testValidFailRangeInt(TestValidFailRangeInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeInt -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype1">
        <test-method status="PASS" signature="testProcessCoerceUsertype1()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype1@5dd6264]" name="testProcessCoerceUsertype1" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype1 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype1 -->
      <class name="io.kaitai.struct.spec.TestStrEncodings">
        <test-method status="PASS" signature="testStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodings@6ac13091]" name="testStrEncodings" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodings -->
      <class name="io.kaitai.struct.spec.TestParamsDef">
        <test-method status="PASS" signature="testParamsDef()[pri:0, instance:io.kaitai.struct.spec.TestParamsDef@1c93084c]" name="testParamsDef" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsDef -->
      </class> <!-- io.kaitai.struct.spec.TestParamsDef -->
      <class name="io.kaitai.struct.spec.TestEnumOfValueInst">
        <test-method status="PASS" signature="testEnumOfValueInst()[pri:0, instance:io.kaitai.struct.spec.TestEnumOfValueInst@5ccddd20]" name="testEnumOfValueInst" duration-ms="0" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumOfValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestEnumOfValueInst -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntElse">
        <test-method status="PASS" signature="testSwitchManualIntElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntElse@ec756bd]" name="testSwitchManualIntElse" duration-ms="5" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntElse -->
      <class name="io.kaitai.struct.spec.TestEnum1">
        <test-method status="PASS" signature="testEnum1()[pri:0, instance:io.kaitai.struct.spec.TestEnum1@1ddf84b8]" name="testEnum1" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum1 -->
      <class name="io.kaitai.struct.spec.TestEnum0">
        <test-method status="PASS" signature="testEnum0()[pri:0, instance:io.kaitai.struct.spec.TestEnum0@35047d03]" name="testEnum0" duration-ms="2" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum0 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum0 -->
      <class name="io.kaitai.struct.spec.TestValidNotParsedIf">
        <test-method status="PASS" signature="testValidNotParsedIf()[pri:0, instance:io.kaitai.struct.spec.TestValidNotParsedIf@5db250b4]" name="testValidNotParsedIf" duration-ms="39" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidNotParsedIf -->
      </class> <!-- io.kaitai.struct.spec.TestValidNotParsedIf -->
      <class name="io.kaitai.struct.spec.TestBitsSeqEndianCombo">
        <test-method status="PASS" signature="testBitsSeqEndianCombo()[pri:0, instance:io.kaitai.struct.spec.TestBitsSeqEndianCombo@6ef888f6]" name="testBitsSeqEndianCombo" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSeqEndianCombo -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSeqEndianCombo -->
      <class name="io.kaitai.struct.spec.TestParamsPassBool">
        <test-method status="PASS" signature="testParamsPassBool()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassBool@470f1802]" name="testParamsPassBool" duration-ms="4" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassBool -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassBool -->
      <class name="io.kaitai.struct.spec.TestValidFailEqBytes">
        <test-method status="PASS" signature="testValidFailEqBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqBytes@5e316c74]" name="testValidFailEqBytes" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailEqBytes._read(ValidFailEqBytes.java:33)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:28)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:17)
	at io.kaitai.struct.testformats.ValidFailEqBytes.fromFile(ValidFailEqBytes.java:13)
	at io.kaitai.struct.spec.TestValidFailEqBytes.testValidFailEqBytes(TestValidFailEqBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqBytes -->
      <class name="io.kaitai.struct.spec.TestRepeatNStruct">
        <test-method status="PASS" signature="testRepeatNStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStruct@2e4b8173]" name="testRepeatNStruct" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStruct -->
      <class name="io.kaitai.struct.spec.TestIndexToParamUntil">
        <test-method status="PASS" signature="testIndexToParamUntil()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamUntil@69b2283a]" name="testIndexToParamUntil" duration-ms="10" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamUntil -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamUntil -->
      <class name="io.kaitai.struct.spec.TestImportsAbsRel">
        <test-method status="PASS" signature="testImportsAbsRel()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsRel@635eaaf1]" name="testImportsAbsRel" duration-ms="3" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsRel -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsRel -->
      <class name="io.kaitai.struct.spec.TestEnumDeep">
        <test-method status="PASS" signature="testEnumDeep()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeep@2f112965]" name="testEnumDeep" duration-ms="1" started-at="2021-07-01T22:25:39Z" finished-at="2021-07-01T22:25:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeep -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeep -->
    </test> <!-- all -->
  </suite> <!-- Kaitai Struct Java specs -->
</testng-results>
