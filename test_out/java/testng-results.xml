<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="229" passed="219" failed="10" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-06-27T08:55:08Z" name="Kaitai Struct Java specs" finished-at="2023-06-27T08:55:08Z" duration-ms="592">
    <groups>
    </groups>
    <test started-at="2023-06-27T08:55:08Z" name="all" finished-at="2023-06-27T08:55:08Z" duration-ms="592">
      <class name="io.kaitai.struct.spec.TestExprBytesCmp">
        <test-method signature="testExprBytesCmp()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesCmp@6f36c2f0]" started-at="2023-06-27T08:55:08Z" name="testExprBytesCmp" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesCmp -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesCmp -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocrefMulti">
        <test-method signature="testDocstringsDocrefMulti()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocrefMulti@7dfb0c0f]" started-at="2023-06-27T08:55:08Z" name="testDocstringsDocrefMulti" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocrefMulti -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocrefMulti -->
      <class name="io.kaitai.struct.spec.TestRepeatEosStruct">
        <test-method signature="testRepeatEosStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosStruct@6f8e8894]" started-at="2023-06-27T08:55:08Z" name="testRepeatEosStruct" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosStruct -->
      <class name="io.kaitai.struct.spec.TestFixedStruct">
        <test-method signature="testFixedStruct()[pri:0, instance:io.kaitai.struct.spec.TestFixedStruct@7de62196]" started-at="2023-06-27T08:55:08Z" name="testFixedStruct" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestFixedStruct -->
      <class name="io.kaitai.struct.spec.TestProcessToUser">
        <test-method signature="testProcessToUser()[pri:0, instance:io.kaitai.struct.spec.TestProcessToUser@3b6d844d]" started-at="2023-06-27T08:55:08Z" name="testProcessToUser" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessToUser -->
      </class> <!-- io.kaitai.struct.spec.TestProcessToUser -->
      <class name="io.kaitai.struct.spec.TestParamsPassUsertype">
        <test-method signature="testParamsPassUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassUsertype@6c7a164b]" started-at="2023-06-27T08:55:08Z" name="testParamsPassUsertype" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassUsertype -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayStruct">
        <test-method signature="testParamsPassArrayStruct()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayStruct@2438dcd]" started-at="2023-06-27T08:55:08Z" name="testParamsPassArrayStruct" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayStruct -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayStruct -->
      <class name="io.kaitai.struct.spec.TestValidEqStrEncodings">
        <test-method signature="testValidEqStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestValidEqStrEncodings@2fb0623e]" started-at="2023-06-27T08:55:08Z" name="testValidEqStrEncodings" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidEqStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestValidEqStrEncodings -->
      <class name="io.kaitai.struct.spec.TestNonStandard">
        <test-method signature="testNonStandard()[pri:0, instance:io.kaitai.struct.spec.TestNonStandard@28194a50]" started-at="2023-06-27T08:55:08Z" name="testNonStandard" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonStandard -->
      </class> <!-- io.kaitai.struct.spec.TestNonStandard -->
      <class name="io.kaitai.struct.spec.TestFloatingPoints">
        <test-method signature="testFloatingPoints()[pri:0, instance:io.kaitai.struct.spec.TestFloatingPoints@163370c2]" started-at="2023-06-27T08:55:08Z" name="testFloatingPoints" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatingPoints -->
      </class> <!-- io.kaitai.struct.spec.TestFloatingPoints -->
      <class name="io.kaitai.struct.spec.TestImportsCircularA">
        <test-method signature="testImportsCircularA()[pri:0, instance:io.kaitai.struct.spec.TestImportsCircularA@1c9b0314]" started-at="2023-06-27T08:55:08Z" name="testImportsCircularA" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsCircularA -->
      </class> <!-- io.kaitai.struct.spec.TestImportsCircularA -->
      <class name="io.kaitai.struct.spec.TestStrPadTermEmpty">
        <test-method signature="testStrPadTermEmpty()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTermEmpty@24105dc5]" started-at="2023-06-27T08:55:08Z" name="testStrPadTermEmpty" finished-at="2023-06-27T08:55:08Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTermEmpty -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTermEmpty -->
      <class name="io.kaitai.struct.spec.TestValidFailMaxInt">
        <test-method signature="testValidFailMaxInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailMaxInt@12591ac8]" started-at="2023-06-27T08:55:08Z" name="testValidFailMaxInt" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, max 12, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 1: validation failed: not in range, max 12, but got 80
	at io.kaitai.struct.testformats.ValidFailMaxInt._read(ValidFailMaxInt.java:32)
	at io.kaitai.struct.testformats.ValidFailMaxInt.<init>(ValidFailMaxInt.java:27)
	at io.kaitai.struct.testformats.ValidFailMaxInt.<init>(ValidFailMaxInt.java:16)
	at io.kaitai.struct.testformats.ValidFailMaxInt.fromFile(ValidFailMaxInt.java:12)
	at io.kaitai.struct.spec.TestValidFailMaxInt.testValidFailMaxInt(TestValidFailMaxInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailMaxInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailMaxInt -->
      <class name="io.kaitai.struct.spec.TestBitsEnum">
        <test-method signature="testBitsEnum()[pri:0, instance:io.kaitai.struct.spec.TestBitsEnum@7dc19a70]" started-at="2023-06-27T08:55:08Z" name="testBitsEnum" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestBitsEnum -->
      <class name="io.kaitai.struct.spec.TestValidFailMinInt">
        <test-method signature="testValidFailMinInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailMinInt@61710c6]" started-at="2023-06-27T08:55:08Z" name="testValidFailMinInt" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationLessThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, min 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationLessThanError: /seq/0: at pos 1: validation failed: not in range, min 123, but got 80
	at io.kaitai.struct.testformats.ValidFailMinInt._read(ValidFailMinInt.java:32)
	at io.kaitai.struct.testformats.ValidFailMinInt.<init>(ValidFailMinInt.java:27)
	at io.kaitai.struct.testformats.ValidFailMinInt.<init>(ValidFailMinInt.java:16)
	at io.kaitai.struct.testformats.ValidFailMinInt.fromFile(ValidFailMinInt.java:12)
	at io.kaitai.struct.spec.TestValidFailMinInt.testValidFailMinInt(TestValidFailMinInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationLessThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailMinInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailMinInt -->
      <class name="io.kaitai.struct.spec.TestNestedTypeParam">
        <test-method signature="testNestedTypeParam()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypeParam@51bd8b5c]" started-at="2023-06-27T08:55:08Z" name="testNestedTypeParam" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypeParam -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypeParam -->
      <class name="io.kaitai.struct.spec.TestDefaultBigEndian">
        <test-method signature="testDefaultBigEndian()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBigEndian@2f953efd]" started-at="2023-06-27T08:55:08Z" name="testDefaultBigEndian" finished-at="2023-06-27T08:55:08Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBigEndian -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBigEndian -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValue0">
        <test-method signature="testExprSizeofValue0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValue0@147e2ae7]" started-at="2023-06-27T08:55:08Z" name="testExprSizeofValue0" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValue0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValue0 -->
      <class name="io.kaitai.struct.spec.TestExprStrOps">
        <test-method signature="testExprStrOps()[pri:0, instance:io.kaitai.struct.spec.TestExprStrOps@1e4f4a5c]" started-at="2023-06-27T08:55:08Z" name="testExprStrOps" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprStrOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprStrOps -->
      <class name="io.kaitai.struct.spec.TestExprIoPos">
        <test-method signature="testExprIoPos()[pri:0, instance:io.kaitai.struct.spec.TestExprIoPos@7fd7a283]" started-at="2023-06-27T08:55:08Z" name="testExprIoPos" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoPos -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoPos -->
      <class name="io.kaitai.struct.spec.TestProcessXorValue">
        <test-method signature="testProcessXorValue()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorValue@17503f6b]" started-at="2023-06-27T08:55:08Z" name="testProcessXorValue" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorValue -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorValue -->
      <class name="io.kaitai.struct.spec.TestHelloWorld">
        <test-method signature="testHelloWorld()[pri:0, instance:io.kaitai.struct.spec.TestHelloWorld@2e570ded]" started-at="2023-06-27T08:55:08Z" name="testHelloWorld" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHelloWorld -->
      </class> <!-- io.kaitai.struct.spec.TestHelloWorld -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Value">
        <test-method signature="testProcessXor4Value()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Value@700fb871]" started-at="2023-06-27T08:55:08Z" name="testProcessXor4Value" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Value -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Value -->
      <class name="io.kaitai.struct.spec.TestBitsSignedShiftB32Le">
        <test-method signature="testBitsSignedShiftB32Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsSignedShiftB32Le@1ec9bd38]" started-at="2023-06-27T08:55:08Z" name="testBitsSignedShiftB32Le" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSignedShiftB32Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSignedShiftB32Le -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse2">
        <test-method signature="testNavParentFalse2()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse2@6933b6c6]" started-at="2023-06-27T08:55:08Z" name="testNavParentFalse2" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse2 -->
      <class name="io.kaitai.struct.spec.TestCombineBool">
        <test-method signature="testCombineBool()[pri:0, instance:io.kaitai.struct.spec.TestCombineBool@41f69e84]" started-at="2023-06-27T08:55:08Z" name="testCombineBool" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineBool -->
      </class> <!-- io.kaitai.struct.spec.TestCombineBool -->
      <class name="io.kaitai.struct.spec.TestIntegersMinMax">
        <test-method signature="testIntegersMinMax()[pri:0, instance:io.kaitai.struct.spec.TestIntegersMinMax@53f3bdbd]" started-at="2023-06-27T08:55:08Z" name="testIntegersMinMax" finished-at="2023-06-27T08:55:08Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegersMinMax -->
      </class> <!-- io.kaitai.struct.spec.TestIntegersMinMax -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnum">
        <test-method signature="testSwitchManualEnum()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnum@f68f0dc]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualEnum" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnum -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnum -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStrElse">
        <test-method signature="testSwitchManualStrElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStrElse@18317edc]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualStrElse" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStrElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStrElse -->
      <class name="io.kaitai.struct.spec.TestValidLong">
        <test-method signature="testValidLong()[pri:0, instance:io.kaitai.struct.spec.TestValidLong@1a5b6f42]" started-at="2023-06-27T08:55:08Z" name="testValidLong" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLong -->
      </class> <!-- io.kaitai.struct.spec.TestValidLong -->
      <class name="io.kaitai.struct.spec.TestRecursiveOne">
        <test-method signature="testRecursiveOne()[pri:0, instance:io.kaitai.struct.spec.TestRecursiveOne@2254127a]" started-at="2023-06-27T08:55:08Z" name="testRecursiveOne" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRecursiveOne -->
      </class> <!-- io.kaitai.struct.spec.TestRecursiveOne -->
      <class name="io.kaitai.struct.spec.TestCombineEnum">
        <test-method signature="testCombineEnum()[pri:0, instance:io.kaitai.struct.spec.TestCombineEnum@45efd90f]" started-at="2023-06-27T08:55:08Z" name="testCombineEnum" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineEnum -->
      </class> <!-- io.kaitai.struct.spec.TestCombineEnum -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitchCast">
        <test-method signature="testNavParentSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitchCast@50029372]" started-at="2023-06-27T08:55:08Z" name="testNavParentSwitchCast" finished-at="2023-06-27T08:55:08Z" duration-ms="19" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitchCast -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeEos">
        <test-method signature="testSwitchManualIntSizeEos()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeEos@1ebea008]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualIntSizeEos" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeEos -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeEos -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayUsertype">
        <test-method signature="testParamsPassArrayUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayUsertype@54e041a4]" started-at="2023-06-27T08:55:08Z" name="testParamsPassArrayUsertype" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayUsertype -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrz">
        <test-method signature="testRepeatNStrz()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrz@5c7bfdc1]" started-at="2023-06-27T08:55:08Z" name="testRepeatNStrz" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrz -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrz -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsBe">
        <test-method signature="testDefaultEndianExprIsBe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsBe@3cce57c7]" started-at="2023-06-27T08:55:08Z" name="testDefaultEndianExprIsBe" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsBe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsBe -->
      <class name="io.kaitai.struct.spec.TestPositionAbs">
        <test-method signature="testPositionAbs()[pri:0, instance:io.kaitai.struct.spec.TestPositionAbs@264f218]" started-at="2023-06-27T08:55:08Z" name="testPositionAbs" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionAbs -->
      </class> <!-- io.kaitai.struct.spec.TestPositionAbs -->
      <class name="io.kaitai.struct.spec.TestStrLiterals">
        <test-method signature="testStrLiterals()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals@1f760b47]" started-at="2023-06-27T08:55:08Z" name="testStrLiterals" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals -->
      <class name="io.kaitai.struct.spec.TestExprMod">
        <test-method signature="testExprMod()[pri:0, instance:io.kaitai.struct.spec.TestExprMod@36804139]" started-at="2023-06-27T08:55:08Z" name="testExprMod" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprMod -->
      </class> <!-- io.kaitai.struct.spec.TestExprMod -->
      <class name="io.kaitai.struct.spec.TestValidFailAnyofInt">
        <test-method signature="testValidFailAnyofInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailAnyofInt@35b74c5c]" started-at="2023-06-27T08:55:08Z" name="testValidFailAnyofInt" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not any of the list, got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError: /seq/0: at pos 1: validation failed: not any of the list, got 80
	at io.kaitai.struct.testformats.ValidFailAnyofInt._read(ValidFailAnyofInt.java:32)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.<init>(ValidFailAnyofInt.java:27)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.<init>(ValidFailAnyofInt.java:16)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.fromFile(ValidFailAnyofInt.java:12)
	at io.kaitai.struct.spec.TestValidFailAnyofInt.testValidFailAnyofInt(TestValidFailAnyofInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailAnyofInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailAnyofInt -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse">
        <test-method signature="testSwitchManualEnumInvalidElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse@f58853c]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualEnumInvalidElse" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalidElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse -->
      <class name="io.kaitai.struct.spec.TestBitsUnalignedB64Be">
        <test-method signature="testBitsUnalignedB64Be()[pri:0, instance:io.kaitai.struct.spec.TestBitsUnalignedB64Be@1807f5a7]" started-at="2023-06-27T08:55:08Z" name="testBitsUnalignedB64Be" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsUnalignedB64Be -->
      </class> <!-- io.kaitai.struct.spec.TestBitsUnalignedB64Be -->
      <class name="io.kaitai.struct.spec.TestOptionalId">
        <test-method signature="testOptionalId()[pri:0, instance:io.kaitai.struct.spec.TestOptionalId@448c8166]" started-at="2023-06-27T08:55:08Z" name="testOptionalId" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptionalId -->
      </class> <!-- io.kaitai.struct.spec.TestOptionalId -->
      <class name="io.kaitai.struct.spec.TestIfStruct">
        <test-method signature="testIfStruct()[pri:0, instance:io.kaitai.struct.spec.TestIfStruct@4808bc9b]" started-at="2023-06-27T08:55:08Z" name="testIfStruct" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfStruct -->
      </class> <!-- io.kaitai.struct.spec.TestIfStruct -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilSized">
        <test-method signature="testRepeatUntilSized()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilSized@238d68ff]" started-at="2023-06-27T08:55:08Z" name="testRepeatUntilSized" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/RepeatUntilSized]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/RepeatUntilSized
	at io.kaitai.struct.spec.TestRepeatUntilSized.testRepeatUntilSized(TestRepeatUntilSized.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.RepeatUntilSized
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilSized -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilSized -->
      <class name="io.kaitai.struct.spec.TestStrPadTerm">
        <test-method signature="testStrPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTerm@461ad730]" started-at="2023-06-27T08:55:08Z" name="testStrPadTerm" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTerm -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocref">
        <test-method signature="testDocstringsDocref()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocref@2d29b4ee]" started-at="2023-06-27T08:55:08Z" name="testDocstringsDocref" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocref -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocref -->
      <class name="io.kaitai.struct.spec.TestExpr3">
        <test-method signature="testExpr3()[pri:0, instance:io.kaitai.struct.spec.TestExpr3@6e2aa843]" started-at="2023-06-27T08:55:08Z" name="testExpr3" finished-at="2023-06-27T08:55:08Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr3 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr3 -->
      <class name="io.kaitai.struct.spec.TestExpr2">
        <test-method signature="testExpr2()[pri:0, instance:io.kaitai.struct.spec.TestExpr2@34129c78]" started-at="2023-06-27T08:55:08Z" name="testExpr2" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr2 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr2 -->
      <class name="io.kaitai.struct.spec.TestOpaqueWithParam">
        <test-method signature="testOpaqueWithParam()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueWithParam@2ad48653]" started-at="2023-06-27T08:55:08Z" name="testOpaqueWithParam" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueWithParam -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueWithParam -->
      <class name="io.kaitai.struct.spec.TestNestedTypes3">
        <test-method signature="testNestedTypes3()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes3@7283d3eb]" started-at="2023-06-27T08:55:08Z" name="testNestedTypes3" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes3 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes3 -->
      <class name="io.kaitai.struct.spec.TestTermBytes">
        <test-method signature="testTermBytes()[pri:0, instance:io.kaitai.struct.spec.TestTermBytes@7d7758be]" started-at="2023-06-27T08:55:08Z" name="testTermBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermBytes -->
      </class> <!-- io.kaitai.struct.spec.TestTermBytes -->
      <class name="io.kaitai.struct.spec.TestSwitchBytearray">
        <test-method signature="testSwitchBytearray()[pri:0, instance:io.kaitai.struct.spec.TestSwitchBytearray@660acfb]" started-at="2023-06-27T08:55:08Z" name="testSwitchBytearray" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchBytearray -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchBytearray -->
      <class name="io.kaitai.struct.spec.TestExpr1">
        <test-method signature="testExpr1()[pri:0, instance:io.kaitai.struct.spec.TestExpr1@7d61eb55]" started-at="2023-06-27T08:55:08Z" name="testExpr1" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr1 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr1 -->
      <class name="io.kaitai.struct.spec.TestExpr0">
        <test-method signature="testExpr0()[pri:0, instance:io.kaitai.struct.spec.TestExpr0@5f9edf14]" started-at="2023-06-27T08:55:08Z" name="testExpr0" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr0 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr0 -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType">
        <test-method signature="testOpaqueExternalType()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType@6a4f1a55]" started-at="2023-06-27T08:55:08Z" name="testOpaqueExternalType" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType -->
      <class name="io.kaitai.struct.spec.TestNestedTypes2">
        <test-method signature="testNestedTypes2()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes2@45385f75]" started-at="2023-06-27T08:55:08Z" name="testNestedTypes2" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes2 -->
      <class name="io.kaitai.struct.spec.TestTermU1Val">
        <test-method signature="testTermU1Val()[pri:0, instance:io.kaitai.struct.spec.TestTermU1Val@c667f46]" started-at="2023-06-27T08:55:08Z" name="testTermU1Val" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermU1Val -->
      </class> <!-- io.kaitai.struct.spec.TestTermU1Val -->
      <class name="io.kaitai.struct.spec.TestMetaTags">
        <test-method signature="testMetaTags()[pri:0, instance:io.kaitai.struct.spec.TestMetaTags@4c5ae43b]" started-at="2023-06-27T08:55:08Z" name="testMetaTags" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaTags -->
      </class> <!-- io.kaitai.struct.spec.TestMetaTags -->
      <class name="io.kaitai.struct.spec.TestStrLiterals2">
        <test-method signature="testStrLiterals2()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals2@5276d6ee]" started-at="2023-06-27T08:55:08Z" name="testStrLiterals2" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals2 -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals2 -->
      <class name="io.kaitai.struct.spec.TestParamsCallExtraParens">
        <test-method signature="testParamsCallExtraParens()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallExtraParens@4470fbd6]" started-at="2023-06-27T08:55:08Z" name="testParamsCallExtraParens" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallExtraParens -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallExtraParens -->
      <class name="io.kaitai.struct.spec.TestParamsPassStruct">
        <test-method signature="testParamsPassStruct()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassStruct@2f01783a]" started-at="2023-06-27T08:55:08Z" name="testParamsPassStruct" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassStruct -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassStruct -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeU">
        <test-method signature="testEnumIntRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeU@2235eaab]" started-at="2023-06-27T08:55:08Z" name="testEnumIntRangeU" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeU -->
      <class name="io.kaitai.struct.spec.TestExprStrEncodings">
        <test-method signature="testExprStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestExprStrEncodings@7d3e8655]" started-at="2023-06-27T08:55:08Z" name="testExprStrEncodings" finished-at="2023-06-27T08:55:08Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestExprStrEncodings -->
      <class name="io.kaitai.struct.spec.TestFixedContents">
        <test-method signature="testFixedContents()[pri:0, instance:io.kaitai.struct.spec.TestFixedContents@57db2b13]" started-at="2023-06-27T08:55:08Z" name="testFixedContents" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedContents -->
      </class> <!-- io.kaitai.struct.spec.TestFixedContents -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeS">
        <test-method signature="testEnumIntRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeS@76b07f29]" started-at="2023-06-27T08:55:08Z" name="testEnumIntRangeS" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeS -->
      <class name="io.kaitai.struct.spec.TestIndexSizes">
        <test-method signature="testIndexSizes()[pri:0, instance:io.kaitai.struct.spec.TestIndexSizes@1e13529a]" started-at="2023-06-27T08:55:08Z" name="testIndexSizes" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexSizes -->
      </class> <!-- io.kaitai.struct.spec.TestIndexSizes -->
      <class name="io.kaitai.struct.spec.TestTypeTernary">
        <test-method signature="testTypeTernary()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary@730d2164]" started-at="2023-06-27T08:55:08Z" name="testTypeTernary" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary -->
      <class name="io.kaitai.struct.spec.TestInstanceStdArray">
        <test-method signature="testInstanceStdArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStdArray@5167f57d]" started-at="2023-06-27T08:55:08Z" name="testInstanceStdArray" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStdArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStdArray -->
      <class name="io.kaitai.struct.spec.TestNavParent2">
        <test-method signature="testNavParent2()[pri:0, instance:io.kaitai.struct.spec.TestNavParent2@7eecb5b8]" started-at="2023-06-27T08:55:08Z" name="testNavParent2" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent2 -->
      <class name="io.kaitai.struct.spec.TestNavParent3">
        <test-method signature="testNavParent3()[pri:0, instance:io.kaitai.struct.spec.TestNavParent3@41488b16]" started-at="2023-06-27T08:55:08Z" name="testNavParent3" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent3 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent3 -->
      <class name="io.kaitai.struct.spec.TestExprIfIntOps">
        <test-method signature="testExprIfIntOps()[pri:0, instance:io.kaitai.struct.spec.TestExprIfIntOps@415b0b49]" started-at="2023-06-27T08:55:08Z" name="testExprIfIntOps" finished-at="2023-06-27T08:55:08Z" duration-ms="4" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:305)
	at org.testng.Assert.assertEquals(Assert.java:315)
	at io.kaitai.struct.spec.CommonSpec.assertIntEquals(CommonSpec.java:48)
	at io.kaitai.struct.spec.TestExprIfIntOps.testExprIfIntOps(TestExprIfIntOps.java:15)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIfIntOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprIfIntOps -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType0">
        <test-method signature="testExprSizeofType0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType0@565f390]" started-at="2023-06-27T08:55:08Z" name="testExprSizeofType0" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType0 -->
      <class name="io.kaitai.struct.spec.TestCastToTop">
        <test-method signature="testCastToTop()[pri:0, instance:io.kaitai.struct.spec.TestCastToTop@536dbea0]" started-at="2023-06-27T08:55:08Z" name="testCastToTop" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToTop -->
      </class> <!-- io.kaitai.struct.spec.TestCastToTop -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType1">
        <test-method signature="testExprSizeofType1()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType1@508dec2b]" started-at="2023-06-27T08:55:08Z" name="testExprSizeofType1" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType1 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType1 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSize">
        <test-method signature="testSwitchManualIntSize()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSize@38145825]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualIntSize" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSize -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSize -->
      <class name="io.kaitai.struct.spec.TestEosExceptionBytes">
        <test-method signature="testEosExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionBytes@13d73f29]" started-at="2023-06-27T08:55:08Z" name="testEosExceptionBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.DirectByteBuffer.get(DirectByteBuffer.java:294)
	at java.base/java.nio.ByteBuffer.get(ByteBuffer.java:770)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:329)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data._read(EosExceptionBytes.java:53)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data.<init>(EosExceptionBytes.java:50)
	at io.kaitai.struct.testformats.EosExceptionBytes._read(EosExceptionBytes.java:31)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EosExceptionBytes.fromFile(EosExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEosExceptionBytes.testEosExceptionBytes(TestEosExceptionBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestImports0">
        <test-method signature="testImports0()[pri:0, instance:io.kaitai.struct.spec.TestImports0@1169afe1]" started-at="2023-06-27T08:55:08Z" name="testImports0" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImports0 -->
      </class> <!-- io.kaitai.struct.spec.TestImports0 -->
      <class name="io.kaitai.struct.spec.TestBitsShiftByB32Le">
        <test-method signature="testBitsShiftByB32Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsShiftByB32Le@311bf055]" started-at="2023-06-27T08:55:08Z" name="testBitsShiftByB32Le" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsShiftByB32Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsShiftByB32Le -->
      <class name="io.kaitai.struct.spec.TestNestedSameName">
        <test-method signature="testNestedSameName()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName@24c1b2d2]" started-at="2023-06-27T08:55:08Z" name="testNestedSameName" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName -->
      <class name="io.kaitai.struct.spec.TestPositionToEnd">
        <test-method signature="testPositionToEnd()[pri:0, instance:io.kaitai.struct.spec.TestPositionToEnd@6ca18a14]" started-at="2023-06-27T08:55:08Z" name="testPositionToEnd" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionToEnd -->
      </class> <!-- io.kaitai.struct.spec.TestPositionToEnd -->
      <class name="io.kaitai.struct.spec.TestImportsAbs">
        <test-method signature="testImportsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbs@3e0e1046]" started-at="2023-06-27T08:55:08Z" name="testImportsAbs" finished-at="2023-06-27T08:55:08Z" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbs -->
      <class name="io.kaitai.struct.spec.TestBitsSignedResB32Le">
        <test-method signature="testBitsSignedResB32Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsSignedResB32Le@2bdd8394]" started-at="2023-06-27T08:55:08Z" name="testBitsSignedResB32Le" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSignedResB32Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSignedResB32Le -->
      <class name="io.kaitai.struct.spec.TestTypeIntUnaryOp">
        <test-method signature="testTypeIntUnaryOp()[pri:0, instance:io.kaitai.struct.spec.TestTypeIntUnaryOp@7dfd3c81]" started-at="2023-06-27T08:55:08Z" name="testTypeIntUnaryOp" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeIntUnaryOp -->
      </class> <!-- io.kaitai.struct.spec.TestTypeIntUnaryOp -->
      <class name="io.kaitai.struct.spec.TestFloatToI">
        <test-method signature="testFloatToI()[pri:0, instance:io.kaitai.struct.spec.TestFloatToI@465232e9]" started-at="2023-06-27T08:55:08Z" name="testFloatToI" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatToI -->
      </class> <!-- io.kaitai.struct.spec.TestFloatToI -->
      <class name="io.kaitai.struct.spec.TestMultipleUse">
        <test-method signature="testMultipleUse()[pri:0, instance:io.kaitai.struct.spec.TestMultipleUse@626abbd0]" started-at="2023-06-27T08:55:08Z" name="testMultipleUse" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultipleUse -->
      </class> <!-- io.kaitai.struct.spec.TestMultipleUse -->
      <class name="io.kaitai.struct.spec.TestSwitchElseOnly">
        <test-method signature="testSwitchElseOnly()[pri:0, instance:io.kaitai.struct.spec.TestSwitchElseOnly@1a5a4e19]" started-at="2023-06-27T08:55:08Z" name="testSwitchElseOnly" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchElseOnly -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchElseOnly -->
      <class name="io.kaitai.struct.spec.TestCombineStr">
        <test-method signature="testCombineStr()[pri:0, instance:io.kaitai.struct.spec.TestCombineStr@81d9a72]" started-at="2023-06-27T08:55:08Z" name="testCombineStr" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineStr -->
      </class> <!-- io.kaitai.struct.spec.TestCombineStr -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalid">
        <test-method signature="testSwitchManualEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalid@5efa40fe]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualEnumInvalid" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestBitsSignedShiftB64Le">
        <test-method signature="testBitsSignedShiftB64Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsSignedShiftB64Le@4e0ae11f]" started-at="2023-06-27T08:55:08Z" name="testBitsSignedShiftB64Le" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSignedShiftB64Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSignedShiftB64Le -->
      <class name="io.kaitai.struct.spec.TestProcessRotate">
        <test-method signature="testProcessRotate()[pri:0, instance:io.kaitai.struct.spec.TestProcessRotate@62656be4]" started-at="2023-06-27T08:55:08Z" name="testProcessRotate" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRotate -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRotate -->
      <class name="io.kaitai.struct.spec.TestJsSignedRightShift">
        <test-method signature="testJsSignedRightShift()[pri:0, instance:io.kaitai.struct.spec.TestJsSignedRightShift@78fa769e]" started-at="2023-06-27T08:55:08Z" name="testJsSignedRightShift" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJsSignedRightShift -->
      </class> <!-- io.kaitai.struct.spec.TestJsSignedRightShift -->
      <class name="io.kaitai.struct.spec.TestEnumImport">
        <test-method signature="testEnumImport()[pri:0, instance:io.kaitai.struct.spec.TestEnumImport@1b66c0fb]" started-at="2023-06-27T08:55:08Z" name="testEnumImport" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumImport -->
      </class> <!-- io.kaitai.struct.spec.TestEnumImport -->
      <class name="io.kaitai.struct.spec.TestDefaultBitEndianMod">
        <test-method signature="testDefaultBitEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBitEndianMod@b86de0d]" started-at="2023-06-27T08:55:08Z" name="testDefaultBitEndianMod" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBitEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBitEndianMod -->
      <class name="io.kaitai.struct.spec.TestProcessCustomNoArgs">
        <test-method signature="testProcessCustomNoArgs()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustomNoArgs@33f676f6]" started-at="2023-06-27T08:55:08Z" name="testProcessCustomNoArgs" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustomNoArgs -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustomNoArgs -->
      <class name="io.kaitai.struct.spec.TestNavParentOverride">
        <test-method signature="testNavParentOverride()[pri:0, instance:io.kaitai.struct.spec.TestNavParentOverride@7d9f158f]" started-at="2023-06-27T08:55:08Z" name="testNavParentOverride" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentOverride -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentOverride -->
      <class name="io.kaitai.struct.spec.TestBitsUnalignedB32Le">
        <test-method signature="testBitsUnalignedB32Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsUnalignedB32Le@49b2a47d]" started-at="2023-06-27T08:55:08Z" name="testBitsUnalignedB32Le" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsUnalignedB32Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsUnalignedB32Le -->
      <class name="io.kaitai.struct.spec.TestStrEos">
        <test-method signature="testStrEos()[pri:0, instance:io.kaitai.struct.spec.TestStrEos@3e2055d6]" started-at="2023-06-27T08:55:08Z" name="testStrEos" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEos -->
      </class> <!-- io.kaitai.struct.spec.TestStrEos -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeLe">
        <test-method signature="testBcdUserTypeLe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeLe@1f9e9475]" started-at="2023-06-27T08:55:08Z" name="testBcdUserTypeLe" finished-at="2023-06-27T08:55:08Z" duration-ms="59" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeLe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeLe -->
      <class name="io.kaitai.struct.spec.TestNestedSameName2">
        <test-method signature="testNestedSameName2()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName2@d2de489]" started-at="2023-06-27T08:55:08Z" name="testNestedSameName2" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName2 -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsLe">
        <test-method signature="testDefaultEndianExprIsLe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsLe@32115b28]" started-at="2023-06-27T08:55:08Z" name="testDefaultEndianExprIsLe" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsLe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsLe -->
      <class name="io.kaitai.struct.spec.TestProcessRepeatBytes">
        <test-method signature="testProcessRepeatBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessRepeatBytes@6bb4dd34]" started-at="2023-06-27T08:55:08Z" name="testProcessRepeatBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRepeatBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRepeatBytes -->
      <class name="io.kaitai.struct.spec.TestExprCalcArrayOps">
        <test-method signature="testExprCalcArrayOps()[pri:0, instance:io.kaitai.struct.spec.TestExprCalcArrayOps@1df8da7a]" started-at="2023-06-27T08:55:08Z" name="testExprCalcArrayOps" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprCalcArrayOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprCalcArrayOps -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilCalcArrayType">
        <test-method signature="testRepeatUntilCalcArrayType()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilCalcArrayType@66ea810]" started-at="2023-06-27T08:55:08Z" name="testRepeatUntilCalcArrayType" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/RepeatUntilCalcArrayType]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/RepeatUntilCalcArrayType
	at io.kaitai.struct.spec.TestRepeatUntilCalcArrayType.testRepeatUntilCalcArrayType(TestRepeatUntilCalcArrayType.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.RepeatUntilCalcArrayType
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilCalcArrayType -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilCalcArrayType -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeBytes">
        <test-method signature="testValidFailRangeBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeBytes@7486b455]" started-at="2023-06-27T08:55:08Z" name="testValidFailRangeBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="6" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not in range, max [50 31], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 2: validation failed: not in range, max [50 31], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailRangeBytes._read(ValidFailRangeBytes.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeBytes.<init>(ValidFailRangeBytes.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeBytes.<init>(ValidFailRangeBytes.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeBytes.fromFile(ValidFailRangeBytes.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeBytes.testValidFailRangeBytes(TestValidFailRangeBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeBytes -->
      <class name="io.kaitai.struct.spec.TestEnumNegative">
        <test-method signature="testEnumNegative()[pri:0, instance:io.kaitai.struct.spec.TestEnumNegative@14dd7b39]" started-at="2023-06-27T08:55:08Z" name="testEnumNegative" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumNegative -->
      </class> <!-- io.kaitai.struct.spec.TestEnumNegative -->
      <class name="io.kaitai.struct.spec.TestImportsAbsAbs">
        <test-method signature="testImportsAbsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsAbs@14bdbc74]" started-at="2023-06-27T08:55:08Z" name="testImportsAbsAbs" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsAbs -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceSwitch">
        <test-method signature="testProcessCoerceSwitch()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceSwitch@4b8729ff]" started-at="2023-06-27T08:55:08Z" name="testProcessCoerceSwitch" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceSwitch -->
      <class name="io.kaitai.struct.spec.TestExprIntDiv">
        <test-method signature="testExprIntDiv()[pri:0, instance:io.kaitai.struct.spec.TestExprIntDiv@7ac296f6]" started-at="2023-06-27T08:55:08Z" name="testExprIntDiv" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [-757] but found [-756]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [-757] but found [-756]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:389)
	at org.testng.Assert.assertEquals(Assert.java:399)
	at io.kaitai.struct.spec.CommonSpec.assertIntEquals(CommonSpec.java:36)
	at io.kaitai.struct.spec.TestExprIntDiv.testExprIntDiv(TestExprIntDiv.java:17)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIntDiv -->
      </class> <!-- io.kaitai.struct.spec.TestExprIntDiv -->
      <class name="io.kaitai.struct.spec.TestSwitchRepeatExprInvalid">
        <test-method signature="testSwitchRepeatExprInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchRepeatExprInvalid@17d919b6]" started-at="2023-06-27T08:55:08Z" name="testSwitchRepeatExprInvalid" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/SwitchRepeatExprInvalid]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/SwitchRepeatExprInvalid
	at io.kaitai.struct.spec.TestSwitchRepeatExprInvalid.testSwitchRepeatExprInvalid(TestSwitchRepeatExprInvalid.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.SwitchRepeatExprInvalid
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchRepeatExprInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchRepeatExprInvalid -->
      <class name="io.kaitai.struct.spec.TestPositionInSeq">
        <test-method signature="testPositionInSeq()[pri:0, instance:io.kaitai.struct.spec.TestPositionInSeq@51bf5add]" started-at="2023-06-27T08:55:08Z" name="testPositionInSeq" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionInSeq -->
      </class> <!-- io.kaitai.struct.spec.TestPositionInSeq -->
      <class name="io.kaitai.struct.spec.TestValidFailEqStr">
        <test-method signature="testValidFailEqStr()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqStr@15d49048]" started-at="2023-06-27T08:55:08Z" name="testValidFailEqStr" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 4: validation failed: not equal, expected BACK, but got PACK]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 4: validation failed: not equal, expected BACK, but got PACK
	at io.kaitai.struct.testformats.ValidFailEqStr._read(ValidFailEqStr.java:33)
	at io.kaitai.struct.testformats.ValidFailEqStr.<init>(ValidFailEqStr.java:28)
	at io.kaitai.struct.testformats.ValidFailEqStr.<init>(ValidFailEqStr.java:17)
	at io.kaitai.struct.testformats.ValidFailEqStr.fromFile(ValidFailEqStr.java:13)
	at io.kaitai.struct.spec.TestValidFailEqStr.testValidFailEqStr(TestValidFailEqStr.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqStr -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqStr -->
      <class name="io.kaitai.struct.spec.TestDebugArrayUser">
        <test-method signature="testDebugArrayUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugArrayUser@7d322cad]" started-at="2023-06-27T08:55:08Z" name="testDebugArrayUser" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugArrayUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugArrayUser -->
      <class name="io.kaitai.struct.spec.TestParamsEnum">
        <test-method signature="testParamsEnum()[pri:0, instance:io.kaitai.struct.spec.TestParamsEnum@2ca923bb]" started-at="2023-06-27T08:55:08Z" name="testParamsEnum" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestParamsEnum -->
      <class name="io.kaitai.struct.spec.TestDebug0">
        <test-method signature="testDebug0()[pri:0, instance:io.kaitai.struct.spec.TestDebug0@47c81abf]" started-at="2023-06-27T08:55:08Z" name="testDebug0" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebug0 -->
      </class> <!-- io.kaitai.struct.spec.TestDebug0 -->
      <class name="io.kaitai.struct.spec.TestRepeatEosBit">
        <test-method signature="testRepeatEosBit()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosBit@4dc27487]" started-at="2023-06-27T08:55:08Z" name="testRepeatEosBit" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosBit -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosBit -->
      <class name="io.kaitai.struct.spec.TestIntegersDoubleOverflow">
        <test-method signature="testIntegersDoubleOverflow()[pri:0, instance:io.kaitai.struct.spec.TestIntegersDoubleOverflow@4149c063]" started-at="2023-06-27T08:55:08Z" name="testIntegersDoubleOverflow" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegersDoubleOverflow -->
      </class> <!-- io.kaitai.struct.spec.TestIntegersDoubleOverflow -->
      <class name="io.kaitai.struct.spec.TestIntegers">
        <test-method signature="testIntegers()[pri:0, instance:io.kaitai.struct.spec.TestIntegers@e3b3b2f]" started-at="2023-06-27T08:55:08Z" name="testIntegers" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestIntegers -->
      <class name="io.kaitai.struct.spec.TestBitsSimpleLe">
        <test-method signature="testBitsSimpleLe()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimpleLe@7bbc8656]" started-at="2023-06-27T08:55:08Z" name="testBitsSimpleLe" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimpleLe -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimpleLe -->
      <class name="io.kaitai.struct.spec.TestNavParentVsValueInst">
        <test-method signature="testNavParentVsValueInst()[pri:0, instance:io.kaitai.struct.spec.TestNavParentVsValueInst@7f2cfe3f]" started-at="2023-06-27T08:55:08Z" name="testNavParentVsValueInst" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentVsValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentVsValueInst -->
      <class name="io.kaitai.struct.spec.TestYamlInts">
        <test-method signature="testYamlInts()[pri:0, instance:io.kaitai.struct.spec.TestYamlInts@7dc3712]" started-at="2023-06-27T08:55:08Z" name="testYamlInts" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testYamlInts -->
      </class> <!-- io.kaitai.struct.spec.TestYamlInts -->
      <class name="io.kaitai.struct.spec.TestInstanceUserArray">
        <test-method signature="testInstanceUserArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceUserArray@74287ea3]" started-at="2023-06-27T08:55:08Z" name="testInstanceUserArray" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/InstanceUserArray]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/InstanceUserArray
	at io.kaitai.struct.spec.TestInstanceUserArray.testInstanceUserArray(TestInstanceUserArray.java:11)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.InstanceUserArray
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceUserArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceUserArray -->
      <class name="io.kaitai.struct.spec.TestExprEnum">
        <test-method signature="testExprEnum()[pri:0, instance:io.kaitai.struct.spec.TestExprEnum@23941fb4]" started-at="2023-06-27T08:55:08Z" name="testExprEnum" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprEnum -->
      </class> <!-- io.kaitai.struct.spec.TestExprEnum -->
      <class name="io.kaitai.struct.spec.TestProcessXorConst">
        <test-method signature="testProcessXorConst()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorConst@2c78324b]" started-at="2023-06-27T08:55:08Z" name="testProcessXorConst" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorConst -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorConst -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprInherited">
        <test-method signature="testDefaultEndianExprInherited()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprInherited@4b86805d]" started-at="2023-06-27T08:55:08Z" name="testDefaultEndianExprInherited" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprInherited -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprInherited -->
      <class name="io.kaitai.struct.spec.TestProcessCustom">
        <test-method signature="testProcessCustom()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustom@9cb8225]" started-at="2023-06-27T08:55:08Z" name="testProcessCustom" finished-at="2023-06-27T08:55:08Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustom -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustom -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Const">
        <test-method signature="testProcessXor4Const()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Const@503f91c3]" started-at="2023-06-27T08:55:08Z" name="testProcessXor4Const" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Const -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Const -->
      <class name="io.kaitai.struct.spec.TestCastToImported">
        <test-method signature="testCastToImported()[pri:0, instance:io.kaitai.struct.spec.TestCastToImported@22f59fa]" started-at="2023-06-27T08:55:08Z" name="testCastToImported" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToImported -->
      </class> <!-- io.kaitai.struct.spec.TestCastToImported -->
      <class name="io.kaitai.struct.spec.TestBitsShiftByB64Le">
        <test-method signature="testBitsShiftByB64Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsShiftByB64Le@64b0598]" started-at="2023-06-27T08:55:08Z" name="testBitsShiftByB64Le" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsShiftByB64Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsShiftByB64Le -->
      <class name="io.kaitai.struct.spec.TestValidOptionalId">
        <test-method signature="testValidOptionalId()[pri:0, instance:io.kaitai.struct.spec.TestValidOptionalId@389b0789]" started-at="2023-06-27T08:55:08Z" name="testValidOptionalId" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidOptionalId -->
      </class> <!-- io.kaitai.struct.spec.TestValidOptionalId -->
      <class name="io.kaitai.struct.spec.TestIndexToParamExpr">
        <test-method signature="testIndexToParamExpr()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamExpr@13d9cbf5]" started-at="2023-06-27T08:55:08Z" name="testIndexToParamExpr" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamExpr -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamExpr -->
      <class name="io.kaitai.struct.spec.TestDebugEnumName">
        <test-method signature="testDebugEnumName()[pri:0, instance:io.kaitai.struct.spec.TestDebugEnumName@5852c06f]" started-at="2023-06-27T08:55:08Z" name="testDebugEnumName" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugEnumName -->
      </class> <!-- io.kaitai.struct.spec.TestDebugEnumName -->
      <class name="io.kaitai.struct.spec.TestCastNested">
        <test-method signature="testCastNested()[pri:0, instance:io.kaitai.struct.spec.TestCastNested@126253fd]" started-at="2023-06-27T08:55:08Z" name="testCastNested" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastNested -->
      </class> <!-- io.kaitai.struct.spec.TestCastNested -->
      <class name="io.kaitai.struct.spec.TestEnumForUnknownId">
        <test-method signature="testEnumForUnknownId()[pri:0, instance:io.kaitai.struct.spec.TestEnumForUnknownId@3214ee6]" started-at="2023-06-27T08:55:08Z" name="testEnumForUnknownId" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumForUnknownId -->
      </class> <!-- io.kaitai.struct.spec.TestEnumForUnknownId -->
      <class name="io.kaitai.struct.spec.TestSwitchMultiBoolOps">
        <test-method signature="testSwitchMultiBoolOps()[pri:0, instance:io.kaitai.struct.spec.TestSwitchMultiBoolOps@3e78b6a5]" started-at="2023-06-27T08:55:08Z" name="testSwitchMultiBoolOps" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchMultiBoolOps -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchMultiBoolOps -->
      <class name="io.kaitai.struct.spec.TestValidFailContents">
        <test-method signature="testValidFailContents()[pri:0, instance:io.kaitai.struct.spec.TestValidFailContents@4bff7da0]" started-at="2023-06-27T08:55:08Z" name="testValidFailContents" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailContents._read(ValidFailContents.java:33)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:28)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:17)
	at io.kaitai.struct.testformats.ValidFailContents.fromFile(ValidFailContents.java:13)
	at io.kaitai.struct.spec.TestValidFailContents.testValidFailContents(TestValidFailContents.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailContents -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailContents -->
      <class name="io.kaitai.struct.spec.TestTermStrz">
        <test-method signature="testTermStrz()[pri:0, instance:io.kaitai.struct.spec.TestTermStrz@16612a51]" started-at="2023-06-27T08:55:08Z" name="testTermStrz" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermStrz -->
      </class> <!-- io.kaitai.struct.spec.TestTermStrz -->
      <class name="io.kaitai.struct.spec.TestNavRoot">
        <test-method signature="testNavRoot()[pri:0, instance:io.kaitai.struct.spec.TestNavRoot@798162bc]" started-at="2023-06-27T08:55:08Z" name="testNavRoot" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavRoot -->
      </class> <!-- io.kaitai.struct.spec.TestNavRoot -->
      <class name="io.kaitai.struct.spec.TestTypeTernary2ndFalsy">
        <test-method signature="testTypeTernary2ndFalsy()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary2ndFalsy@71687585]" started-at="2023-06-27T08:55:08Z" name="testTypeTernary2ndFalsy" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary2ndFalsy -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary2ndFalsy -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrzDouble">
        <test-method signature="testRepeatNStrzDouble()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrzDouble@5be1d0a4]" started-at="2023-06-27T08:55:08Z" name="testRepeatNStrzDouble" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrzDouble -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrzDouble -->
      <class name="io.kaitai.struct.spec.TestTsPacketHeader">
        <test-method signature="testTsPacketHeader()[pri:0, instance:io.kaitai.struct.spec.TestTsPacketHeader@747f281]" started-at="2023-06-27T08:55:08Z" name="testTsPacketHeader" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTsPacketHeader -->
      </class> <!-- io.kaitai.struct.spec.TestTsPacketHeader -->
      <class name="io.kaitai.struct.spec.TestZlibWithHeader78">
        <test-method signature="testZlibWithHeader78()[pri:0, instance:io.kaitai.struct.spec.TestZlibWithHeader78@68878f6d]" started-at="2023-06-27T08:55:08Z" name="testZlibWithHeader78" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibWithHeader78 -->
      </class> <!-- io.kaitai.struct.spec.TestZlibWithHeader78 -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayStr">
        <test-method signature="testParamsPassArrayStr()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayStr@3576ddc2]" started-at="2023-06-27T08:55:08Z" name="testParamsPassArrayStr" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayStr -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayStr -->
      <class name="io.kaitai.struct.spec.TestValidFailEqInt">
        <test-method signature="testValidFailEqInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqInt@41330d4f]" started-at="2023-06-27T08:55:08Z" name="testValidFailEqInt" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not equal, expected 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 1: validation failed: not equal, expected 123, but got 80
	at io.kaitai.struct.testformats.ValidFailEqInt._read(ValidFailEqInt.java:32)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:27)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:16)
	at io.kaitai.struct.testformats.ValidFailEqInt.fromFile(ValidFailEqInt.java:12)
	at io.kaitai.struct.spec.TestValidFailEqInt.testValidFailEqInt(TestValidFailEqInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqInt -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilS4">
        <test-method signature="testRepeatUntilS4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilS4@4ee203eb]" started-at="2023-06-27T08:55:08Z" name="testRepeatUntilS4" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilS4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilS4 -->
      <class name="io.kaitai.struct.spec.TestEofExceptionU4">
        <test-method signature="testEofExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionU4@475c9c31]" started-at="2023-06-27T08:55:08Z" name="testEofExceptionU4" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.Buffer.nextGetIndex(Buffer.java:651)
	at java.base/java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:750)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:274)
	at io.kaitai.struct.testformats.EofExceptionU4._read(EofExceptionU4.java:31)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:27)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:16)
	at io.kaitai.struct.testformats.EofExceptionU4.fromFile(EofExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEofExceptionU4.testEofExceptionU4(TestEofExceptionU4.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestValidShort">
        <test-method signature="testValidShort()[pri:0, instance:io.kaitai.struct.spec.TestValidShort@35a3d49f]" started-at="2023-06-27T08:55:08Z" name="testValidShort" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidShort -->
      </class> <!-- io.kaitai.struct.spec.TestValidShort -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStr">
        <test-method signature="testSwitchManualStr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStr@376a0d86]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualStr" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStr -->
      <class name="io.kaitai.struct.spec.TestTypeTernaryOpaque">
        <test-method signature="testTypeTernaryOpaque()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernaryOpaque@20bd8be5]" started-at="2023-06-27T08:55:08Z" name="testTypeTernaryOpaque" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernaryOpaque -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernaryOpaque -->
      <class name="io.kaitai.struct.spec.TestCombineBytes">
        <test-method signature="testCombineBytes()[pri:0, instance:io.kaitai.struct.spec.TestCombineBytes@7905a0b8]" started-at="2023-06-27T08:55:08Z" name="testCombineBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombineBytes -->
      </class> <!-- io.kaitai.struct.spec.TestCombineBytes -->
      <class name="io.kaitai.struct.spec.TestNavParent">
        <test-method signature="testNavParent()[pri:0, instance:io.kaitai.struct.spec.TestNavParent@3e62d773]" started-at="2023-06-27T08:55:08Z" name="testNavParent" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent -->
      <class name="io.kaitai.struct.spec.TestDocstrings">
        <test-method signature="testDocstrings()[pri:0, instance:io.kaitai.struct.spec.TestDocstrings@638ef7ed]" started-at="2023-06-27T08:55:08Z" name="testDocstrings" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstrings -->
      </class> <!-- io.kaitai.struct.spec.TestDocstrings -->
      <class name="io.kaitai.struct.spec.TestValidFailInst">
        <test-method signature="testValidFailInst()[pri:0, instance:io.kaitai.struct.spec.TestValidFailInst@24959ca4]" started-at="2023-06-27T08:55:08Z" name="testValidFailInst" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49
	at io.kaitai.struct.testformats.ValidFailInst.inst(ValidFailInst.java:43)
	at io.kaitai.struct.testformats.ValidFailInst._read(ValidFailInst.java:30)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:27)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:16)
	at io.kaitai.struct.testformats.ValidFailInst.fromFile(ValidFailInst.java:12)
	at io.kaitai.struct.spec.TestValidFailInst.testValidFailInst(TestValidFailInst.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailInst -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailInst -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeBe">
        <test-method signature="testBcdUserTypeBe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeBe@3f1d2e23]" started-at="2023-06-27T08:55:08Z" name="testBcdUserTypeBe" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeBe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeBe -->
      <class name="io.kaitai.struct.spec.TestIndexToParamEos">
        <test-method signature="testIndexToParamEos()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamEos@79defdc]" started-at="2023-06-27T08:55:08Z" name="testIndexToParamEos" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamEos -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamEos -->
      <class name="io.kaitai.struct.spec.TestBitsSimple">
        <test-method signature="testBitsSimple()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimple@2f67a4d3]" started-at="2023-06-27T08:55:08Z" name="testBitsSimple" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimple -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimple -->
      <class name="io.kaitai.struct.spec.TestDebugSwitchUser">
        <test-method signature="testDebugSwitchUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugSwitchUser@68746f22]" started-at="2023-06-27T08:55:08Z" name="testDebugSwitchUser" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugSwitchUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugSwitchUser -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers2">
        <test-method signature="testSwitchIntegers2()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers2@4f49f6af]" started-at="2023-06-27T08:55:08Z" name="testSwitchIntegers2" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers2 -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers2 -->
      <class name="io.kaitai.struct.spec.TestIfInstances">
        <test-method signature="testIfInstances()[pri:0, instance:io.kaitai.struct.spec.TestIfInstances@18f8cd79]" started-at="2023-06-27T08:55:08Z" name="testIfInstances" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfInstances -->
      </class> <!-- io.kaitai.struct.spec.TestIfInstances -->
      <class name="io.kaitai.struct.spec.TestMetaXref">
        <test-method signature="testMetaXref()[pri:0, instance:io.kaitai.struct.spec.TestMetaXref@3b35a229]" started-at="2023-06-27T08:55:08Z" name="testMetaXref" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaXref -->
      </class> <!-- io.kaitai.struct.spec.TestMetaXref -->
      <class name="io.kaitai.struct.spec.TestInstanceStd">
        <test-method signature="testInstanceStd()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStd@21be3395]" started-at="2023-06-27T08:55:08Z" name="testInstanceStd" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStd -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStd -->
      <class name="io.kaitai.struct.spec.TestEofExceptionBytes">
        <test-method signature="testEofExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionBytes@1787f2a0]" started-at="2023-06-27T08:55:08Z" name="testEofExceptionBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.DirectByteBuffer.get(DirectByteBuffer.java:294)
	at java.base/java.nio.ByteBuffer.get(ByteBuffer.java:770)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:329)
	at io.kaitai.struct.testformats.EofExceptionBytes._read(EofExceptionBytes.java:30)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EofExceptionBytes.fromFile(EofExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEofExceptionBytes.testEofExceptionBytes(TestEofExceptionBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestExprIoEof">
        <test-method signature="testExprIoEof()[pri:0, instance:io.kaitai.struct.spec.TestExprIoEof@1b410b60]" started-at="2023-06-27T08:55:08Z" name="testExprIoEof" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoEof -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoEof -->
      <class name="io.kaitai.struct.spec.TestParamsPassArrayInt">
        <test-method signature="testParamsPassArrayInt()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassArrayInt@9816741]" started-at="2023-06-27T08:55:08Z" name="testParamsPassArrayInt" finished-at="2023-06-27T08:55:08Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassArrayInt -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassArrayInt -->
      <class name="io.kaitai.struct.spec.TestEosExceptionU4">
        <test-method signature="testEosExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionU4@60db1c0e]" started-at="2023-06-27T08:55:08Z" name="testEosExceptionU4" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.Buffer.nextGetIndex(Buffer.java:651)
	at java.base/java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:750)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:274)
	at io.kaitai.struct.testformats.EosExceptionU4$Data._read(EosExceptionU4.java:54)
	at io.kaitai.struct.testformats.EosExceptionU4$Data.<init>(EosExceptionU4.java:50)
	at io.kaitai.struct.testformats.EosExceptionU4._read(EosExceptionU4.java:31)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:27)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:16)
	at io.kaitai.struct.testformats.EosExceptionU4.fromFile(EosExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEosExceptionU4.testEosExceptionU4(TestEosExceptionU4.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestProcessRepeatUsertype">
        <test-method signature="testProcessRepeatUsertype()[pri:0, instance:io.kaitai.struct.spec.TestProcessRepeatUsertype@6b0d80ed]" started-at="2023-06-27T08:55:08Z" name="testProcessRepeatUsertype" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRepeatUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRepeatUsertype -->
      <class name="io.kaitai.struct.spec.TestImportsRel1">
        <test-method signature="testImportsRel1()[pri:0, instance:io.kaitai.struct.spec.TestImportsRel1@19b843ba]" started-at="2023-06-27T08:55:08Z" name="testImportsRel1" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsRel1 -->
      </class> <!-- io.kaitai.struct.spec.TestImportsRel1 -->
      <class name="io.kaitai.struct.spec.TestIoLocalVar">
        <test-method signature="testIoLocalVar()[pri:0, instance:io.kaitai.struct.spec.TestIoLocalVar@776a6d9b]" started-at="2023-06-27T08:55:08Z" name="testIoLocalVar" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIoLocalVar -->
      </class> <!-- io.kaitai.struct.spec.TestIoLocalVar -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprException">
        <test-method signature="testDefaultEndianExprException()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprException@72d6b3ba]" started-at="2023-06-27T08:55:08Z" name="testDefaultEndianExprException" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$UndecidedEndiannessError">
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$UndecidedEndiannessError
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj._read(DefaultEndianExprException.java:98)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj.<init>(DefaultEndianExprException.java:82)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc._read(DefaultEndianExprException.java:62)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc.<init>(DefaultEndianExprException.java:58)
	at io.kaitai.struct.testformats.DefaultEndianExprException._read(DefaultEndianExprException.java:36)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:29)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:18)
	at io.kaitai.struct.testformats.DefaultEndianExprException.fromFile(DefaultEndianExprException.java:14)
	at io.kaitai.struct.spec.TestDefaultEndianExprException.testDefaultEndianExprException(TestDefaultEndianExprException.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$UndecidedEndiannessError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprException -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprException -->
      <class name="io.kaitai.struct.spec.TestUserType">
        <test-method signature="testUserType()[pri:0, instance:io.kaitai.struct.spec.TestUserType@49c90a9c]" started-at="2023-06-27T08:55:08Z" name="testUserType" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserType -->
      </class> <!-- io.kaitai.struct.spec.TestUserType -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilComplex">
        <test-method signature="testRepeatUntilComplex()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilComplex@3aa078fd]" started-at="2023-06-27T08:55:08Z" name="testRepeatUntilComplex" finished-at="2023-06-27T08:55:08Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilComplex -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilComplex -->
      <class name="io.kaitai.struct.spec.TestEnumDeepLiterals">
        <test-method signature="testEnumDeepLiterals()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeepLiterals@69ee81fc]" started-at="2023-06-27T08:55:08Z" name="testEnumDeepLiterals" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeepLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeepLiterals -->
      <class name="io.kaitai.struct.spec.TestBitsUnalignedB64Le">
        <test-method signature="testBitsUnalignedB64Le()[pri:0, instance:io.kaitai.struct.spec.TestBitsUnalignedB64Le@a8ef162]" started-at="2023-06-27T08:55:08Z" name="testBitsUnalignedB64Le" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsUnalignedB64Le -->
      </class> <!-- io.kaitai.struct.spec.TestBitsUnalignedB64Le -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeStr">
        <test-method signature="testValidFailRangeStr()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeStr@5d908d47]" started-at="2023-06-27T08:55:08Z" name="testValidFailRangeStr" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not in range, max P1, but got PA]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 2: validation failed: not in range, max P1, but got PA
	at io.kaitai.struct.testformats.ValidFailRangeStr._read(ValidFailRangeStr.java:36)
	at io.kaitai.struct.testformats.ValidFailRangeStr.<init>(ValidFailRangeStr.java:28)
	at io.kaitai.struct.testformats.ValidFailRangeStr.<init>(ValidFailRangeStr.java:17)
	at io.kaitai.struct.testformats.ValidFailRangeStr.fromFile(ValidFailRangeStr.java:13)
	at io.kaitai.struct.spec.TestValidFailRangeStr.testValidFailRangeStr(TestValidFailRangeStr.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeStr -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeStr -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType02Parent">
        <test-method signature="testOpaqueExternalType02Parent()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType02Parent@2ca26d77]" started-at="2023-06-27T08:55:08Z" name="testOpaqueExternalType02Parent" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType02Parent -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType02Parent -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers">
        <test-method signature="testSwitchIntegers()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers@13526e59]" started-at="2023-06-27T08:55:08Z" name="testSwitchIntegers" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers -->
      <class name="io.kaitai.struct.spec.TestBitsSignedResB32Be">
        <test-method signature="testBitsSignedResB32Be()[pri:0, instance:io.kaitai.struct.spec.TestBitsSignedResB32Be@1b919693]" started-at="2023-06-27T08:55:08Z" name="testBitsSignedResB32Be" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSignedResB32Be -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSignedResB32Be -->
      <class name="io.kaitai.struct.spec.TestBytesPadTerm">
        <test-method signature="testBytesPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestBytesPadTerm@478db956]" started-at="2023-06-27T08:55:08Z" name="testBytesPadTerm" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBytesPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestBytesPadTerm -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValueSized">
        <test-method signature="testExprSizeofValueSized()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValueSized@7975d1d8]" started-at="2023-06-27T08:55:08Z" name="testExprSizeofValueSized" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValueSized -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValueSized -->
      <class name="io.kaitai.struct.spec.TestValidSwitch">
        <test-method signature="testValidSwitch()[pri:0, instance:io.kaitai.struct.spec.TestValidSwitch@7068e664]" started-at="2023-06-27T08:55:08Z" name="testValidSwitch" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestValidSwitch -->
      <class name="io.kaitai.struct.spec.TestExprBytesOps">
        <test-method signature="testExprBytesOps()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesOps@18ece7f4]" started-at="2023-06-27T08:55:08Z" name="testExprBytesOps" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [255] but found [-1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [255] but found [-1]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:389)
	at org.testng.Assert.assertEquals(Assert.java:399)
	at io.kaitai.struct.spec.CommonSpec.assertIntEquals(CommonSpec.java:36)
	at io.kaitai.struct.spec.TestExprBytesOps.testExprBytesOps(TestExprBytesOps.java:17)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesOps -->
      <class name="io.kaitai.struct.spec.TestStrEncodingsDefault">
        <test-method signature="testStrEncodingsDefault()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodingsDefault@5c86dbc5]" started-at="2023-06-27T08:55:08Z" name="testStrEncodingsDefault" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodingsDefault -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodingsDefault -->
      <class name="io.kaitai.struct.spec.TestZlibSurrounded">
        <test-method signature="testZlibSurrounded()[pri:0, instance:io.kaitai.struct.spec.TestZlibSurrounded@29f7cefd]" started-at="2023-06-27T08:55:08Z" name="testZlibSurrounded" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibSurrounded -->
      </class> <!-- io.kaitai.struct.spec.TestZlibSurrounded -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitch">
        <test-method signature="testNavParentSwitch()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitch@1f9f6368]" started-at="2023-06-27T08:55:08Z" name="testNavParentSwitch" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitch -->
      <class name="io.kaitai.struct.spec.TestEnumInvalid">
        <test-method signature="testEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestEnumInvalid@78452606]" started-at="2023-06-27T08:55:08Z" name="testEnumInvalid" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestEnumIf">
        <test-method signature="testEnumIf()[pri:0, instance:io.kaitai.struct.spec.TestEnumIf@3bcd05cb]" started-at="2023-06-27T08:55:08Z" name="testEnumIf" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIf -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIf -->
      <class name="io.kaitai.struct.spec.TestInstanceIoUser">
        <test-method signature="testInstanceIoUser()[pri:0, instance:io.kaitai.struct.spec.TestInstanceIoUser@2d0399f4]" started-at="2023-06-27T08:55:08Z" name="testInstanceIoUser" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceIoUser -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceIoUser -->
      <class name="io.kaitai.struct.spec.TestExprOpsParens">
        <test-method signature="testExprOpsParens()[pri:0, instance:io.kaitai.struct.spec.TestExprOpsParens@222a59e6]" started-at="2023-06-27T08:55:08Z" name="testExprOpsParens" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/ExprOpsParens]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/ExprOpsParens
	at io.kaitai.struct.spec.TestExprOpsParens.testExprOpsParens(TestExprOpsParens.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.ExprOpsParens
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprOpsParens -->
      </class> <!-- io.kaitai.struct.spec.TestExprOpsParens -->
      <class name="io.kaitai.struct.spec.TestEnumToIClassBorder1">
        <test-method signature="testEnumToIClassBorder1()[pri:0, instance:io.kaitai.struct.spec.TestEnumToIClassBorder1@7139992f]" started-at="2023-06-27T08:55:08Z" name="testEnumToIClassBorder1" finished-at="2023-06-27T08:55:08Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToIClassBorder1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToIClassBorder1 -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse">
        <test-method signature="testNavParentFalse()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse@7b50df34]" started-at="2023-06-27T08:55:08Z" name="testNavParentFalse" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse -->
      <class name="io.kaitai.struct.spec.TestSwitchManualInt">
        <test-method signature="testSwitchManualInt()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualInt@1224144a]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualInt" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualInt -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualInt -->
      <class name="io.kaitai.struct.spec.TestExprBytesNonLiteral">
        <test-method signature="testExprBytesNonLiteral()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesNonLiteral@169bb4dd]" started-at="2023-06-27T08:55:08Z" name="testExprBytesNonLiteral" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/ExprBytesNonLiteral]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/ExprBytesNonLiteral
	at io.kaitai.struct.spec.TestExprBytesNonLiteral.testExprBytesNonLiteral(TestExprBytesNonLiteral.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.ExprBytesNonLiteral
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesNonLiteral -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesNonLiteral -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianMod">
        <test-method signature="testDefaultEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianMod@6cc4cdb9]" started-at="2023-06-27T08:55:08Z" name="testDefaultEndianMod" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianMod -->
      <class name="io.kaitai.struct.spec.TestSwitchCast">
        <test-method signature="testSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestSwitchCast@2462cb01]" started-at="2023-06-27T08:55:08Z" name="testSwitchCast" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchCast -->
      <class name="io.kaitai.struct.spec.TestBitsByteAligned">
        <test-method signature="testBitsByteAligned()[pri:0, instance:io.kaitai.struct.spec.TestBitsByteAligned@4a07d605]" started-at="2023-06-27T08:55:08Z" name="testBitsByteAligned" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsByteAligned -->
      </class> <!-- io.kaitai.struct.spec.TestBitsByteAligned -->
      <class name="io.kaitai.struct.spec.TestRepeatEosU4">
        <test-method signature="testRepeatEosU4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosU4@7fb4f2a9]" started-at="2023-06-27T08:55:08Z" name="testRepeatEosU4" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosU4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosU4 -->
      <class name="io.kaitai.struct.spec.TestEnumToI">
        <test-method signature="testEnumToI()[pri:0, instance:io.kaitai.struct.spec.TestEnumToI@5dafbe45]" started-at="2023-06-27T08:55:08Z" name="testEnumToI" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToI -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToI -->
      <class name="io.kaitai.struct.spec.TestExprBits">
        <test-method signature="testExprBits()[pri:0, instance:io.kaitai.struct.spec.TestExprBits@2584b82d]" started-at="2023-06-27T08:55:08Z" name="testExprBits" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/ExprBits]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/ExprBits
	at io.kaitai.struct.spec.TestExprBits.testExprBits(TestExprBits.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.ExprBits
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBits -->
      </class> <!-- io.kaitai.struct.spec.TestExprBits -->
      <class name="io.kaitai.struct.spec.TestBitsUnalignedB32Be">
        <test-method signature="testBitsUnalignedB32Be()[pri:0, instance:io.kaitai.struct.spec.TestBitsUnalignedB32Be@7098b907]" started-at="2023-06-27T08:55:08Z" name="testBitsUnalignedB32Be" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsUnalignedB32Be -->
      </class> <!-- io.kaitai.struct.spec.TestBitsUnalignedB32Be -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeElse">
        <test-method signature="testSwitchManualIntSizeElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeElse@13df2a8c]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualIntSizeElse" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeElse -->
      <class name="io.kaitai.struct.spec.TestParamsCallShort">
        <test-method signature="testParamsCallShort()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallShort@10289886]" started-at="2023-06-27T08:55:08Z" name="testParamsCallShort" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallShort -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallShort -->
      <class name="io.kaitai.struct.spec.TestEnumFancy">
        <test-method signature="testEnumFancy()[pri:0, instance:io.kaitai.struct.spec.TestEnumFancy@452e19ca]" started-at="2023-06-27T08:55:08Z" name="testEnumFancy" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumFancy -->
      </class> <!-- io.kaitai.struct.spec.TestEnumFancy -->
      <class name="io.kaitai.struct.spec.TestValidFailExpr">
        <test-method signature="testValidFailExpr()[pri:0, instance:io.kaitai.struct.spec.TestValidFailExpr@d23e042]" started-at="2023-06-27T08:55:08Z" name="testValidFailExpr" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationExprError">
            <message>
              <![CDATA[/seq/1: at pos 3: validation failed: not matching the expression, got -190]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationExprError: /seq/1: at pos 3: validation failed: not matching the expression, got -190
	at io.kaitai.struct.testformats.ValidFailExpr._read(ValidFailExpr.java:41)
	at io.kaitai.struct.testformats.ValidFailExpr.<init>(ValidFailExpr.java:27)
	at io.kaitai.struct.testformats.ValidFailExpr.<init>(ValidFailExpr.java:16)
	at io.kaitai.struct.testformats.ValidFailExpr.fromFile(ValidFailExpr.java:12)
	at io.kaitai.struct.spec.TestValidFailExpr.testValidFailExpr(TestValidFailExpr.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationExprError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailExpr -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailExpr -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeU">
        <test-method signature="testEnumLongRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeU@64ec96c6]" started-at="2023-06-27T08:55:08Z" name="testEnumLongRangeU" finished-at="2023-06-27T08:55:08Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeU -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeS">
        <test-method signature="testEnumLongRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeS@769a1df5]" started-at="2023-06-27T08:55:08Z" name="testEnumLongRangeS" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeS -->
      <class name="io.kaitai.struct.spec.TestNestedTypes">
        <test-method signature="testNestedTypes()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes@70e38ce1]" started-at="2023-06-27T08:55:08Z" name="testNestedTypes" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes -->
      <class name="io.kaitai.struct.spec.TestExprArray">
        <test-method signature="testExprArray()[pri:0, instance:io.kaitai.struct.spec.TestExprArray@456d6c1e]" started-at="2023-06-27T08:55:08Z" name="testExprArray" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprArray -->
      </class> <!-- io.kaitai.struct.spec.TestExprArray -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeFloat">
        <test-method signature="testValidFailRangeFloat()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeFloat@1500b2f3]" started-at="2023-06-27T08:55:08Z" name="testValidFailRangeFloat" finished-at="2023-06-27T08:55:08Z" duration-ms="37" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 4: validation failed: not in range, max 0.4, but got 0.5]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 4: validation failed: not in range, max 0.4, but got 0.5
	at io.kaitai.struct.testformats.ValidFailRangeFloat._read(ValidFailRangeFloat.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeFloat.<init>(ValidFailRangeFloat.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeFloat.<init>(ValidFailRangeFloat.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeFloat.fromFile(ValidFailRangeFloat.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeFloat.testValidFailRangeFloat(TestValidFailRangeFloat.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeFloat -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeFloat -->
      <class name="io.kaitai.struct.spec.TestIfValues">
        <test-method signature="testIfValues()[pri:0, instance:io.kaitai.struct.spec.TestIfValues@21d03963]" started-at="2023-06-27T08:55:08Z" name="testIfValues" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfValues -->
      </class> <!-- io.kaitai.struct.spec.TestIfValues -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceBytes">
        <test-method signature="testProcessCoerceBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceBytes@5c86a017]" started-at="2023-06-27T08:55:08Z" name="testProcessCoerceBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceBytes -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype2">
        <test-method signature="testProcessCoerceUsertype2()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype2@5a7fe64f]" started-at="2023-06-27T08:55:08Z" name="testProcessCoerceUsertype2" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype2 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype2 -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeInt">
        <test-method signature="testValidFailRangeInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeInt@5e3f861]" started-at="2023-06-27T08:55:08Z" name="testValidFailRangeInt" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, max 10, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 1: validation failed: not in range, max 10, but got 80
	at io.kaitai.struct.testformats.ValidFailRangeInt._read(ValidFailRangeInt.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeInt.<init>(ValidFailRangeInt.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeInt.<init>(ValidFailRangeInt.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeInt.fromFile(ValidFailRangeInt.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeInt.testValidFailRangeInt(TestValidFailRangeInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeInt -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype1">
        <test-method signature="testProcessCoerceUsertype1()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype1@642a7222]" started-at="2023-06-27T08:55:08Z" name="testProcessCoerceUsertype1" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype1 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype1 -->
      <class name="io.kaitai.struct.spec.TestStrEncodings">
        <test-method signature="testStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodings@6d5620ce]" started-at="2023-06-27T08:55:08Z" name="testStrEncodings" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodings -->
      <class name="io.kaitai.struct.spec.TestParamsDef">
        <test-method signature="testParamsDef()[pri:0, instance:io.kaitai.struct.spec.TestParamsDef@37313c65]" started-at="2023-06-27T08:55:08Z" name="testParamsDef" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsDef -->
      </class> <!-- io.kaitai.struct.spec.TestParamsDef -->
      <class name="io.kaitai.struct.spec.TestEnumOfValueInst">
        <test-method signature="testEnumOfValueInst()[pri:0, instance:io.kaitai.struct.spec.TestEnumOfValueInst@38af9828]" started-at="2023-06-27T08:55:08Z" name="testEnumOfValueInst" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumOfValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestEnumOfValueInst -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntElse">
        <test-method signature="testSwitchManualIntElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntElse@46d59067]" started-at="2023-06-27T08:55:08Z" name="testSwitchManualIntElse" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntElse -->
      <class name="io.kaitai.struct.spec.TestEnum1">
        <test-method signature="testEnum1()[pri:0, instance:io.kaitai.struct.spec.TestEnum1@5038d0b5]" started-at="2023-06-27T08:55:08Z" name="testEnum1" finished-at="2023-06-27T08:55:08Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum1 -->
      <class name="io.kaitai.struct.spec.TestEnum0">
        <test-method signature="testEnum0()[pri:0, instance:io.kaitai.struct.spec.TestEnum0@4ef74c30]" started-at="2023-06-27T08:55:08Z" name="testEnum0" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum0 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum0 -->
      <class name="io.kaitai.struct.spec.TestValidNotParsedIf">
        <test-method signature="testValidNotParsedIf()[pri:0, instance:io.kaitai.struct.spec.TestValidNotParsedIf@77659b30]" started-at="2023-06-27T08:55:08Z" name="testValidNotParsedIf" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidNotParsedIf -->
      </class> <!-- io.kaitai.struct.spec.TestValidNotParsedIf -->
      <class name="io.kaitai.struct.spec.TestBitsSeqEndianCombo">
        <test-method signature="testBitsSeqEndianCombo()[pri:0, instance:io.kaitai.struct.spec.TestBitsSeqEndianCombo@383dc82c]" started-at="2023-06-27T08:55:08Z" name="testBitsSeqEndianCombo" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSeqEndianCombo -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSeqEndianCombo -->
      <class name="io.kaitai.struct.spec.TestParamsPassBool">
        <test-method signature="testParamsPassBool()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassBool@1e16c0aa]" started-at="2023-06-27T08:55:08Z" name="testParamsPassBool" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassBool -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassBool -->
      <class name="io.kaitai.struct.spec.TestValidFailEqBytes">
        <test-method signature="testValidFailEqBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqBytes@4c2bb6e0]" started-at="2023-06-27T08:55:08Z" name="testValidFailEqBytes" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailEqBytes._read(ValidFailEqBytes.java:33)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:28)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:17)
	at io.kaitai.struct.testformats.ValidFailEqBytes.fromFile(ValidFailEqBytes.java:13)
	at io.kaitai.struct.spec.TestValidFailEqBytes.testValidFailEqBytes(TestValidFailEqBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqBytes -->
      <class name="io.kaitai.struct.spec.TestRepeatNStruct">
        <test-method signature="testRepeatNStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStruct@2eea88a1]" started-at="2023-06-27T08:55:08Z" name="testRepeatNStruct" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStruct -->
      <class name="io.kaitai.struct.spec.TestIndexToParamUntil">
        <test-method signature="testIndexToParamUntil()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamUntil@50f6ac94]" started-at="2023-06-27T08:55:08Z" name="testIndexToParamUntil" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamUntil -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamUntil -->
      <class name="io.kaitai.struct.spec.TestStrEncodingsUtf16">
        <test-method signature="testStrEncodingsUtf16()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodingsUtf16@51891008]" started-at="2023-06-27T08:55:08Z" name="testStrEncodingsUtf16" finished-at="2023-06-27T08:55:08Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodingsUtf16 -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodingsUtf16 -->
      <class name="io.kaitai.struct.spec.TestImportsAbsRel">
        <test-method signature="testImportsAbsRel()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsRel@1cf56a1c]" started-at="2023-06-27T08:55:08Z" name="testImportsAbsRel" finished-at="2023-06-27T08:55:08Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsRel -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsRel -->
      <class name="io.kaitai.struct.spec.TestEnumDeep">
        <test-method signature="testEnumDeep()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeep@6cd24612]" started-at="2023-06-27T08:55:08Z" name="testEnumDeep" finished-at="2023-06-27T08:55:08Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeep -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeep -->
    </test> <!-- all -->
  </suite> <!-- Kaitai Struct Java specs -->
</testng-results>
