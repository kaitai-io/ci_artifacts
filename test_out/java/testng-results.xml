<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="178" passed="178">
  <reporter-output>
  </reporter-output>
  <suite name="Kaitai Struct Java specs" duration-ms="361" started-at="2020-01-19T14:37:15Z" finished-at="2020-01-19T14:37:16Z">
    <groups>
    </groups>
    <test name="all" duration-ms="361" started-at="2020-01-19T14:37:15Z" finished-at="2020-01-19T14:37:16Z">
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsLe">
        <test-method status="PASS" signature="testDefaultEndianExprIsLe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsLe@1e9e725a]" name="testDefaultEndianExprIsLe" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsLe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsLe -->
      <class name="io.kaitai.struct.spec.TestExprBytesCmp">
        <test-method status="PASS" signature="testExprBytesCmp()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesCmp@4206a205]" name="testExprBytesCmp" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesCmp -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesCmp -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocrefMulti">
        <test-method status="PASS" signature="testDocstringsDocrefMulti()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocrefMulti@2b546384]" name="testDocstringsDocrefMulti" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocrefMulti -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocrefMulti -->
      <class name="io.kaitai.struct.spec.TestRepeatEosStruct">
        <test-method status="PASS" signature="testRepeatEosStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosStruct@7d68ef40]" name="testRepeatEosStruct" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosStruct -->
      <class name="io.kaitai.struct.spec.TestExprCalcArrayOps">
        <test-method status="PASS" signature="testExprCalcArrayOps()[pri:0, instance:io.kaitai.struct.spec.TestExprCalcArrayOps@70b0b186]" name="testExprCalcArrayOps" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprCalcArrayOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprCalcArrayOps -->
      <class name="io.kaitai.struct.spec.TestProcessToUser">
        <test-method status="PASS" signature="testProcessToUser()[pri:0, instance:io.kaitai.struct.spec.TestProcessToUser@29ba4338]" name="testProcessToUser" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessToUser -->
      </class> <!-- io.kaitai.struct.spec.TestProcessToUser -->
      <class name="io.kaitai.struct.spec.TestParamsPassUsertype">
        <test-method status="PASS" signature="testParamsPassUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassUsertype@3bbc39f8]" name="testParamsPassUsertype" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassUsertype -->
      <class name="io.kaitai.struct.spec.TestFixedStruct">
        <test-method status="PASS" signature="testFixedStruct()[pri:0, instance:io.kaitai.struct.spec.TestFixedStruct@4034c28c]" name="testFixedStruct" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestFixedStruct -->
      <class name="io.kaitai.struct.spec.TestFloatingPoints">
        <test-method status="PASS" signature="testFloatingPoints()[pri:0, instance:io.kaitai.struct.spec.TestFloatingPoints@6591f517]" name="testFloatingPoints" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatingPoints -->
      </class> <!-- io.kaitai.struct.spec.TestFloatingPoints -->
      <class name="io.kaitai.struct.spec.TestNonStandard">
        <test-method status="PASS" signature="testNonStandard()[pri:0, instance:io.kaitai.struct.spec.TestNonStandard@1b083826]" name="testNonStandard" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonStandard -->
      </class> <!-- io.kaitai.struct.spec.TestNonStandard -->
      <class name="io.kaitai.struct.spec.TestStrCombine">
        <test-method status="PASS" signature="testStrCombine()[pri:0, instance:io.kaitai.struct.spec.TestStrCombine@44a664f2]" name="testStrCombine" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrCombine -->
      </class> <!-- io.kaitai.struct.spec.TestStrCombine -->
      <class name="io.kaitai.struct.spec.TestImportsCircularA">
        <test-method status="PASS" signature="testImportsCircularA()[pri:0, instance:io.kaitai.struct.spec.TestImportsCircularA@1a38c59b]" name="testImportsCircularA" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsCircularA -->
      </class> <!-- io.kaitai.struct.spec.TestImportsCircularA -->
      <class name="io.kaitai.struct.spec.TestImportsAbsAbs">
        <test-method status="PASS" signature="testImportsAbsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsAbs@2aece37d]" name="testImportsAbsAbs" duration-ms="15" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsAbs -->
      <class name="io.kaitai.struct.spec.TestEnumNegative">
        <test-method status="PASS" signature="testEnumNegative()[pri:0, instance:io.kaitai.struct.spec.TestEnumNegative@67e2d983]" name="testEnumNegative" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumNegative -->
      </class> <!-- io.kaitai.struct.spec.TestEnumNegative -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceSwitch">
        <test-method status="PASS" signature="testProcessCoerceSwitch()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceSwitch@5ef60048]" name="testProcessCoerceSwitch" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceSwitch -->
      <class name="io.kaitai.struct.spec.TestStrPadTermEmpty">
        <test-method status="PASS" signature="testStrPadTermEmpty()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTermEmpty@25b485ba]" name="testStrPadTermEmpty" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTermEmpty -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTermEmpty -->
      <class name="io.kaitai.struct.spec.TestBitsEnum">
        <test-method status="PASS" signature="testBitsEnum()[pri:0, instance:io.kaitai.struct.spec.TestBitsEnum@400cff1a]" name="testBitsEnum" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestBitsEnum -->
      <class name="io.kaitai.struct.spec.TestPositionInSeq">
        <test-method status="PASS" signature="testPositionInSeq()[pri:0, instance:io.kaitai.struct.spec.TestPositionInSeq@50a7bc6e]" name="testPositionInSeq" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionInSeq -->
      </class> <!-- io.kaitai.struct.spec.TestPositionInSeq -->
      <class name="io.kaitai.struct.spec.TestDefaultBigEndian">
        <test-method status="PASS" signature="testDefaultBigEndian()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBigEndian@667a738]" name="testDefaultBigEndian" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBigEndian -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBigEndian -->
      <class name="io.kaitai.struct.spec.TestDebugArrayUser">
        <test-method status="PASS" signature="testDebugArrayUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugArrayUser@3b2c72c2]" name="testDebugArrayUser" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugArrayUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugArrayUser -->
      <class name="io.kaitai.struct.spec.TestParamsEnum">
        <test-method status="PASS" signature="testParamsEnum()[pri:0, instance:io.kaitai.struct.spec.TestParamsEnum@5762806e]" name="testParamsEnum" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestParamsEnum -->
      <class name="io.kaitai.struct.spec.TestRepeatEosBit">
        <test-method status="PASS" signature="testRepeatEosBit()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosBit@345965f2]" name="testRepeatEosBit" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosBit -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosBit -->
      <class name="io.kaitai.struct.spec.TestDebug0">
        <test-method status="PASS" signature="testDebug0()[pri:0, instance:io.kaitai.struct.spec.TestDebug0@2c34f934]" name="testDebug0" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebug0 -->
      </class> <!-- io.kaitai.struct.spec.TestDebug0 -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValue0">
        <test-method status="PASS" signature="testExprSizeofValue0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValue0@279ad2e3]" name="testExprSizeofValue0" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValue0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValue0 -->
      <class name="io.kaitai.struct.spec.TestIntegers">
        <test-method status="PASS" signature="testIntegers()[pri:0, instance:io.kaitai.struct.spec.TestIntegers@55ca8de8]" name="testIntegers" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestIntegers -->
      <class name="io.kaitai.struct.spec.TestExprIoPos">
        <test-method status="PASS" signature="testExprIoPos()[pri:0, instance:io.kaitai.struct.spec.TestExprIoPos@8e0379d]" name="testExprIoPos" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoPos -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoPos -->
      <class name="io.kaitai.struct.spec.TestNavParentVsValueInst">
        <test-method status="PASS" signature="testNavParentVsValueInst()[pri:0, instance:io.kaitai.struct.spec.TestNavParentVsValueInst@64d2d351]" name="testNavParentVsValueInst" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentVsValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentVsValueInst -->
      <class name="io.kaitai.struct.spec.TestYamlInts">
        <test-method status="PASS" signature="testYamlInts()[pri:0, instance:io.kaitai.struct.spec.TestYamlInts@7ff2a664]" name="testYamlInts" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testYamlInts -->
      </class> <!-- io.kaitai.struct.spec.TestYamlInts -->
      <class name="io.kaitai.struct.spec.TestProcessXorValue">
        <test-method status="PASS" signature="testProcessXorValue()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorValue@780cb77]" name="testProcessXorValue" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorValue -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorValue -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Value">
        <test-method status="PASS" signature="testProcessXor4Value()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Value@14a2f921]" name="testProcessXor4Value" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Value -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Value -->
      <class name="io.kaitai.struct.spec.TestHelloWorld">
        <test-method status="PASS" signature="testHelloWorld()[pri:0, instance:io.kaitai.struct.spec.TestHelloWorld@2357d90a]" name="testHelloWorld" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHelloWorld -->
      </class> <!-- io.kaitai.struct.spec.TestHelloWorld -->
      <class name="io.kaitai.struct.spec.TestInstanceUserArray">
        <test-method status="PASS" signature="testInstanceUserArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceUserArray@145eaa29]" name="testInstanceUserArray" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceUserArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceUserArray -->
      <class name="io.kaitai.struct.spec.TestExprEnum">
        <test-method status="PASS" signature="testExprEnum()[pri:0, instance:io.kaitai.struct.spec.TestExprEnum@797badd3]" name="testExprEnum" duration-ms="4" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprEnum -->
      </class> <!-- io.kaitai.struct.spec.TestExprEnum -->
      <class name="io.kaitai.struct.spec.TestProcessXorConst">
        <test-method status="PASS" signature="testProcessXorConst()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorConst@731f8236]" name="testProcessXorConst" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorConst -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorConst -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprInherited">
        <test-method status="PASS" signature="testDefaultEndianExprInherited()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprInherited@564718df]" name="testDefaultEndianExprInherited" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprInherited -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprInherited -->
      <class name="io.kaitai.struct.spec.TestProcessCustom">
        <test-method status="PASS" signature="testProcessCustom()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustom@5906ebcb]" name="testProcessCustom" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustom -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustom -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Const">
        <test-method status="PASS" signature="testProcessXor4Const()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Const@6b419da]" name="testProcessXor4Const" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Const -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Const -->
      <class name="io.kaitai.struct.spec.TestCastToImported">
        <test-method status="PASS" signature="testCastToImported()[pri:0, instance:io.kaitai.struct.spec.TestCastToImported@568bf312]" name="testCastToImported" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToImported -->
      </class> <!-- io.kaitai.struct.spec.TestCastToImported -->
      <class name="io.kaitai.struct.spec.TestBufferedStruct">
        <test-method status="PASS" signature="testBufferedStruct()[pri:0, instance:io.kaitai.struct.spec.TestBufferedStruct@6b1274d2]" name="testBufferedStruct" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBufferedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestBufferedStruct -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse2">
        <test-method status="PASS" signature="testNavParentFalse2()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse2@55a1c291]" name="testNavParentFalse2" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse2 -->
      <class name="io.kaitai.struct.spec.TestIndexToParamExpr">
        <test-method status="PASS" signature="testIndexToParamExpr()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamExpr@4d826d77]" name="testIndexToParamExpr" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamExpr -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamExpr -->
      <class name="io.kaitai.struct.spec.TestDebugEnumName">
        <test-method status="PASS" signature="testDebugEnumName()[pri:0, instance:io.kaitai.struct.spec.TestDebugEnumName@36f0f1be]" name="testDebugEnumName" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugEnumName -->
      </class> <!-- io.kaitai.struct.spec.TestDebugEnumName -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnum">
        <test-method status="PASS" signature="testSwitchManualEnum()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnum@15d9bc04]" name="testSwitchManualEnum" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnum -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnum -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStrElse">
        <test-method status="PASS" signature="testSwitchManualStrElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStrElse@8b96fde]" name="testSwitchManualStrElse" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStrElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStrElse -->
      <class name="io.kaitai.struct.spec.TestCastNested">
        <test-method status="PASS" signature="testCastNested()[pri:0, instance:io.kaitai.struct.spec.TestCastNested@548a102f]" name="testCastNested" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastNested -->
      </class> <!-- io.kaitai.struct.spec.TestCastNested -->
      <class name="io.kaitai.struct.spec.TestSwitchMultiBoolOps">
        <test-method status="PASS" signature="testSwitchMultiBoolOps()[pri:0, instance:io.kaitai.struct.spec.TestSwitchMultiBoolOps@4de5031f]" name="testSwitchMultiBoolOps" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchMultiBoolOps -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchMultiBoolOps -->
      <class name="io.kaitai.struct.spec.TestEnumForUnknownId">
        <test-method status="PASS" signature="testEnumForUnknownId()[pri:0, instance:io.kaitai.struct.spec.TestEnumForUnknownId@4c40b76e]" name="testEnumForUnknownId" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumForUnknownId -->
      </class> <!-- io.kaitai.struct.spec.TestEnumForUnknownId -->
      <class name="io.kaitai.struct.spec.TestValidLong">
        <test-method status="PASS" signature="testValidLong()[pri:0, instance:io.kaitai.struct.spec.TestValidLong@6279cee3]" name="testValidLong" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLong -->
      </class> <!-- io.kaitai.struct.spec.TestValidLong -->
      <class name="io.kaitai.struct.spec.TestRecursiveOne">
        <test-method status="PASS" signature="testRecursiveOne()[pri:0, instance:io.kaitai.struct.spec.TestRecursiveOne@4461c7e3]" name="testRecursiveOne" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRecursiveOne -->
      </class> <!-- io.kaitai.struct.spec.TestRecursiveOne -->
      <class name="io.kaitai.struct.spec.TestValidFailContents">
        <test-method status="PASS" signature="testValidFailContents()[pri:0, instance:io.kaitai.struct.spec.TestValidFailContents@16aa0a0a]" name="testValidFailContents" duration-ms="5" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailContents._read(ValidFailContents.java:33)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:28)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:17)
	at io.kaitai.struct.testformats.ValidFailContents.fromFile(ValidFailContents.java:13)
	at io.kaitai.struct.spec.TestValidFailContents.testValidFailContents(TestValidFailContents.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailContents -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailContents -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitchCast">
        <test-method status="PASS" signature="testNavParentSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitchCast@4ae3c1cd]" name="testNavParentSwitchCast" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitchCast -->
      <class name="io.kaitai.struct.spec.TestTermStrz">
        <test-method status="PASS" signature="testTermStrz()[pri:0, instance:io.kaitai.struct.spec.TestTermStrz@75c072cb]" name="testTermStrz" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermStrz -->
      </class> <!-- io.kaitai.struct.spec.TestTermStrz -->
      <class name="io.kaitai.struct.spec.TestNavRoot">
        <test-method status="PASS" signature="testNavRoot()[pri:0, instance:io.kaitai.struct.spec.TestNavRoot@709ba3fb]" name="testNavRoot" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavRoot -->
      </class> <!-- io.kaitai.struct.spec.TestNavRoot -->
      <class name="io.kaitai.struct.spec.TestTsPacketHeader">
        <test-method status="PASS" signature="testTsPacketHeader()[pri:0, instance:io.kaitai.struct.spec.TestTsPacketHeader@4d339552]" name="testTsPacketHeader" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTsPacketHeader -->
      </class> <!-- io.kaitai.struct.spec.TestTsPacketHeader -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrzDouble">
        <test-method status="PASS" signature="testRepeatNStrzDouble()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrzDouble@3c0a50da]" name="testRepeatNStrzDouble" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrzDouble -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrzDouble -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeEos">
        <test-method status="PASS" signature="testSwitchManualIntSizeEos()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeEos@4f9a3314]" name="testSwitchManualIntSizeEos" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeEos -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeEos -->
      <class name="io.kaitai.struct.spec.TestZlibWithHeader78">
        <test-method status="PASS" signature="testZlibWithHeader78()[pri:0, instance:io.kaitai.struct.spec.TestZlibWithHeader78@5d740a0f]" name="testZlibWithHeader78" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibWithHeader78 -->
      </class> <!-- io.kaitai.struct.spec.TestZlibWithHeader78 -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrz">
        <test-method status="PASS" signature="testRepeatNStrz()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrz@20d3d15a]" name="testRepeatNStrz" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrz -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrz -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilS4">
        <test-method status="PASS" signature="testRepeatUntilS4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilS4@2893de87]" name="testRepeatUntilS4" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilS4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilS4 -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsBe">
        <test-method status="PASS" signature="testDefaultEndianExprIsBe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsBe@275710fc]" name="testDefaultEndianExprIsBe" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsBe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsBe -->
      <class name="io.kaitai.struct.spec.TestValidFailEqInt">
        <test-method status="PASS" signature="testValidFailEqInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqInt@5a4aa2f2]" name="testValidFailEqInt" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not equal, expected 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 1: validation failed: not equal, expected 123, but got 80
	at io.kaitai.struct.testformats.ValidFailEqInt._read(ValidFailEqInt.java:32)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:27)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:16)
	at io.kaitai.struct.testformats.ValidFailEqInt.fromFile(ValidFailEqInt.java:12)
	at io.kaitai.struct.spec.TestValidFailEqInt.testValidFailEqInt(TestValidFailEqInt.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqInt -->
      <class name="io.kaitai.struct.spec.TestEofExceptionU4">
        <test-method status="PASS" signature="testEofExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionU4@dd3b207]" name="testEofExceptionU4" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.Buffer.nextGetIndex(Buffer.java:506)
	at java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:681)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:269)
	at io.kaitai.struct.testformats.EofExceptionU4._read(EofExceptionU4.java:31)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:27)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:16)
	at io.kaitai.struct.testformats.EofExceptionU4.fromFile(EofExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEofExceptionU4.testEofExceptionU4(TestEofExceptionU4.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestPositionAbs">
        <test-method status="PASS" signature="testPositionAbs()[pri:0, instance:io.kaitai.struct.spec.TestPositionAbs@58c1c010]" name="testPositionAbs" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionAbs -->
      </class> <!-- io.kaitai.struct.spec.TestPositionAbs -->
      <class name="io.kaitai.struct.spec.TestStrLiterals">
        <test-method status="PASS" signature="testStrLiterals()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals@29f69090]" name="testStrLiterals" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals -->
      <class name="io.kaitai.struct.spec.TestExprMod">
        <test-method status="PASS" signature="testExprMod()[pri:0, instance:io.kaitai.struct.spec.TestExprMod@c540f5a]" name="testExprMod" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprMod -->
      </class> <!-- io.kaitai.struct.spec.TestExprMod -->
      <class name="io.kaitai.struct.spec.TestValidShort">
        <test-method status="PASS" signature="testValidShort()[pri:0, instance:io.kaitai.struct.spec.TestValidShort@7364985f]" name="testValidShort" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidShort -->
      </class> <!-- io.kaitai.struct.spec.TestValidShort -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse">
        <test-method status="PASS" signature="testSwitchManualEnumInvalidElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse@255b53dc]" name="testSwitchManualEnumInvalidElse" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalidElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStr">
        <test-method status="PASS" signature="testSwitchManualStr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStr@1e67a849]" name="testSwitchManualStr" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStr -->
      <class name="io.kaitai.struct.spec.TestOptionalId">
        <test-method status="PASS" signature="testOptionalId()[pri:0, instance:io.kaitai.struct.spec.TestOptionalId@971d0d8]" name="testOptionalId" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptionalId -->
      </class> <!-- io.kaitai.struct.spec.TestOptionalId -->
      <class name="io.kaitai.struct.spec.TestIfStruct">
        <test-method status="PASS" signature="testIfStruct()[pri:0, instance:io.kaitai.struct.spec.TestIfStruct@ca263c2]" name="testIfStruct" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfStruct -->
      </class> <!-- io.kaitai.struct.spec.TestIfStruct -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilSized">
        <test-method status="PASS" signature="testRepeatUntilSized()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilSized@1f1c7bf6]" name="testRepeatUntilSized" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilSized -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilSized -->
      <class name="io.kaitai.struct.spec.TestStrPadTerm">
        <test-method status="PASS" signature="testStrPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTerm@2ed0fbae]" name="testStrPadTerm" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTerm -->
      <class name="io.kaitai.struct.spec.TestTypeTernaryOpaque">
        <test-method status="PASS" signature="testTypeTernaryOpaque()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernaryOpaque@78a2da20]" name="testTypeTernaryOpaque" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernaryOpaque -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernaryOpaque -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocref">
        <test-method status="PASS" signature="testDocstringsDocref()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocref@1dd92fe2]" name="testDocstringsDocref" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocref -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocref -->
      <class name="io.kaitai.struct.spec.TestExpr3">
        <test-method status="PASS" signature="testExpr3()[pri:0, instance:io.kaitai.struct.spec.TestExpr3@448ff1a8]" name="testExpr3" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr3 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr3 -->
      <class name="io.kaitai.struct.spec.TestOpaqueWithParam">
        <test-method status="PASS" signature="testOpaqueWithParam()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueWithParam@7920ba90]" name="testOpaqueWithParam" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueWithParam -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueWithParam -->
      <class name="io.kaitai.struct.spec.TestExpr2">
        <test-method status="PASS" signature="testExpr2()[pri:0, instance:io.kaitai.struct.spec.TestExpr2@35fc6dc4]" name="testExpr2" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr2 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr2 -->
      <class name="io.kaitai.struct.spec.TestNavParent">
        <test-method status="PASS" signature="testNavParent()[pri:0, instance:io.kaitai.struct.spec.TestNavParent@5d20e46]" name="testNavParent" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent -->
      <class name="io.kaitai.struct.spec.TestNestedTypes3">
        <test-method status="PASS" signature="testNestedTypes3()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes3@52e677af]" name="testNestedTypes3" duration-ms="4" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes3 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes3 -->
      <class name="io.kaitai.struct.spec.TestSwitchBytearray">
        <test-method status="PASS" signature="testSwitchBytearray()[pri:0, instance:io.kaitai.struct.spec.TestSwitchBytearray@161b062a]" name="testSwitchBytearray" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchBytearray -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchBytearray -->
      <class name="io.kaitai.struct.spec.TestExpr1">
        <test-method status="PASS" signature="testExpr1()[pri:0, instance:io.kaitai.struct.spec.TestExpr1@473b46c3]" name="testExpr1" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr1 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr1 -->
      <class name="io.kaitai.struct.spec.TestTermBytes">
        <test-method status="PASS" signature="testTermBytes()[pri:0, instance:io.kaitai.struct.spec.TestTermBytes@75f9eccc]" name="testTermBytes" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermBytes -->
      </class> <!-- io.kaitai.struct.spec.TestTermBytes -->
      <class name="io.kaitai.struct.spec.TestExpr0">
        <test-method status="PASS" signature="testExpr0()[pri:0, instance:io.kaitai.struct.spec.TestExpr0@429bd883]" name="testExpr0" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr0 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr0 -->
      <class name="io.kaitai.struct.spec.TestDocstrings">
        <test-method status="PASS" signature="testDocstrings()[pri:0, instance:io.kaitai.struct.spec.TestDocstrings@58134517]" name="testDocstrings" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstrings -->
      </class> <!-- io.kaitai.struct.spec.TestDocstrings -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType">
        <test-method status="PASS" signature="testOpaqueExternalType()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType@61d47554]" name="testOpaqueExternalType" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType -->
      <class name="io.kaitai.struct.spec.TestNestedTypes2">
        <test-method status="PASS" signature="testNestedTypes2()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes2@69b794e2]" name="testNestedTypes2" duration-ms="3" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes2 -->
      <class name="io.kaitai.struct.spec.TestValidFailInst">
        <test-method status="PASS" signature="testValidFailInst()[pri:0, instance:io.kaitai.struct.spec.TestValidFailInst@6a472554]" name="testValidFailInst" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49
	at io.kaitai.struct.testformats.ValidFailInst.inst(ValidFailInst.java:43)
	at io.kaitai.struct.testformats.ValidFailInst._read(ValidFailInst.java:30)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:27)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:16)
	at io.kaitai.struct.testformats.ValidFailInst.fromFile(ValidFailInst.java:12)
	at io.kaitai.struct.spec.TestValidFailInst.testValidFailInst(TestValidFailInst.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailInst -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailInst -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeBe">
        <test-method status="PASS" signature="testBcdUserTypeBe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeBe@157632c9]" name="testBcdUserTypeBe" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeBe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeBe -->
      <class name="io.kaitai.struct.spec.TestMetaTags">
        <test-method status="PASS" signature="testMetaTags()[pri:0, instance:io.kaitai.struct.spec.TestMetaTags@64c87930]" name="testMetaTags" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaTags -->
      </class> <!-- io.kaitai.struct.spec.TestMetaTags -->
      <class name="io.kaitai.struct.spec.TestIndexToParamEos">
        <test-method status="PASS" signature="testIndexToParamEos()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamEos@17c1bced]" name="testIndexToParamEos" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamEos -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamEos -->
      <class name="io.kaitai.struct.spec.TestBitsSimple">
        <test-method status="PASS" signature="testBitsSimple()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimple@358c99f5]" name="testBitsSimple" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimple -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimple -->
      <class name="io.kaitai.struct.spec.TestDebugSwitchUser">
        <test-method status="PASS" signature="testDebugSwitchUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugSwitchUser@589b3632]" name="testDebugSwitchUser" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugSwitchUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugSwitchUser -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers2">
        <test-method status="PASS" signature="testSwitchIntegers2()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers2@58fdd99]" name="testSwitchIntegers2" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers2 -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers2 -->
      <class name="io.kaitai.struct.spec.TestIfInstances">
        <test-method status="PASS" signature="testIfInstances()[pri:0, instance:io.kaitai.struct.spec.TestIfInstances@18a70f16]" name="testIfInstances" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfInstances -->
      </class> <!-- io.kaitai.struct.spec.TestIfInstances -->
      <class name="io.kaitai.struct.spec.TestStrLiterals2">
        <test-method status="PASS" signature="testStrLiterals2()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals2@525b461a]" name="testStrLiterals2" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals2 -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals2 -->
      <class name="io.kaitai.struct.spec.TestInstanceStd">
        <test-method status="PASS" signature="testInstanceStd()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStd@57175e74]" name="testInstanceStd" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStd -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStd -->
      <class name="io.kaitai.struct.spec.TestMetaXref">
        <test-method status="PASS" signature="testMetaXref()[pri:0, instance:io.kaitai.struct.spec.TestMetaXref@23a5fd2]" name="testMetaXref" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaXref -->
      </class> <!-- io.kaitai.struct.spec.TestMetaXref -->
      <class name="io.kaitai.struct.spec.TestEofExceptionBytes">
        <test-method status="PASS" signature="testEofExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionBytes@55040f2f]" name="testEofExceptionBytes" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.DirectByteBuffer.get(DirectByteBuffer.java:271)
	at java.nio.ByteBuffer.get(ByteBuffer.java:715)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:324)
	at io.kaitai.struct.testformats.EofExceptionBytes._read(EofExceptionBytes.java:30)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EofExceptionBytes.fromFile(EofExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEofExceptionBytes.testEofExceptionBytes(TestEofExceptionBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestExprIoEof">
        <test-method status="PASS" signature="testExprIoEof()[pri:0, instance:io.kaitai.struct.spec.TestExprIoEof@77be656f]" name="testExprIoEof" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoEof -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoEof -->
      <class name="io.kaitai.struct.spec.TestEosExceptionU4">
        <test-method status="PASS" signature="testEosExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionU4@62bd765]" name="testEosExceptionU4" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.Buffer.nextGetIndex(Buffer.java:506)
	at java.nio.HeapByteBuffer.getInt(HeapByteBuffer.java:361)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:269)
	at io.kaitai.struct.testformats.EosExceptionU4$Data._read(EosExceptionU4.java:55)
	at io.kaitai.struct.testformats.EosExceptionU4$Data.<init>(EosExceptionU4.java:51)
	at io.kaitai.struct.testformats.EosExceptionU4._read(EosExceptionU4.java:32)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:27)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:16)
	at io.kaitai.struct.testformats.EosExceptionU4.fromFile(EosExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEosExceptionU4.testEosExceptionU4(TestEosExceptionU4.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestImportsRel1">
        <test-method status="PASS" signature="testImportsRel1()[pri:0, instance:io.kaitai.struct.spec.TestImportsRel1@f0f2775]" name="testImportsRel1" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsRel1 -->
      </class> <!-- io.kaitai.struct.spec.TestImportsRel1 -->
      <class name="io.kaitai.struct.spec.TestIoLocalVar">
        <test-method status="PASS" signature="testIoLocalVar()[pri:0, instance:io.kaitai.struct.spec.TestIoLocalVar@691a7f8f]" name="testIoLocalVar" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIoLocalVar -->
      </class> <!-- io.kaitai.struct.spec.TestIoLocalVar -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprException">
        <test-method status="PASS" signature="testDefaultEndianExprException()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprException@6ee12bac]" name="testDefaultEndianExprException" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="io.kaitai.struct.KaitaiStream$UndecidedEndiannessError">
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$UndecidedEndiannessError
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj._read(DefaultEndianExprException.java:98)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj.<init>(DefaultEndianExprException.java:82)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc._read(DefaultEndianExprException.java:62)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc.<init>(DefaultEndianExprException.java:58)
	at io.kaitai.struct.testformats.DefaultEndianExprException._read(DefaultEndianExprException.java:36)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:29)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:18)
	at io.kaitai.struct.testformats.DefaultEndianExprException.fromFile(DefaultEndianExprException.java:14)
	at io.kaitai.struct.spec.TestDefaultEndianExprException.testDefaultEndianExprException(TestDefaultEndianExprException.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$UndecidedEndiannessError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprException -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprException -->
      <class name="io.kaitai.struct.spec.TestUserType">
        <test-method status="PASS" signature="testUserType()[pri:0, instance:io.kaitai.struct.spec.TestUserType@40e6dfe1]" name="testUserType" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserType -->
      </class> <!-- io.kaitai.struct.spec.TestUserType -->
      <class name="io.kaitai.struct.spec.TestEnumDeepLiterals">
        <test-method status="PASS" signature="testEnumDeepLiterals()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeepLiterals@52aa2946]" name="testEnumDeepLiterals" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeepLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeepLiterals -->
      <class name="io.kaitai.struct.spec.TestParamsCallExtraParens">
        <test-method status="PASS" signature="testParamsCallExtraParens()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallExtraParens@240237d2]" name="testParamsCallExtraParens" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallExtraParens -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallExtraParens -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilComplex">
        <test-method status="PASS" signature="testRepeatUntilComplex()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilComplex@4b168fa9]" name="testRepeatUntilComplex" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilComplex -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilComplex -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType02Parent">
        <test-method status="PASS" signature="testOpaqueExternalType02Parent()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType02Parent@212bf671]" name="testOpaqueExternalType02Parent" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType02Parent -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType02Parent -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers">
        <test-method status="PASS" signature="testSwitchIntegers()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers@5d47c63f]" name="testSwitchIntegers" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers -->
      <class name="io.kaitai.struct.spec.TestBytesPadTerm">
        <test-method status="PASS" signature="testBytesPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestBytesPadTerm@15bb6bea]" name="testBytesPadTerm" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBytesPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestBytesPadTerm -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValueSized">
        <test-method status="PASS" signature="testExprSizeofValueSized()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValueSized@214b199c]" name="testExprSizeofValueSized" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValueSized -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValueSized -->
      <class name="io.kaitai.struct.spec.TestValidSwitch">
        <test-method status="PASS" signature="testValidSwitch()[pri:0, instance:io.kaitai.struct.spec.TestValidSwitch@4450d156]" name="testValidSwitch" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestValidSwitch -->
      <class name="io.kaitai.struct.spec.TestExprBytesOps">
        <test-method status="PASS" signature="testExprBytesOps()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesOps@2d9d4f9d]" name="testExprBytesOps" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesOps -->
      <class name="io.kaitai.struct.spec.TestStrEncodingsDefault">
        <test-method status="PASS" signature="testStrEncodingsDefault()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodingsDefault@7fe8ea47]" name="testStrEncodingsDefault" duration-ms="38" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodingsDefault -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodingsDefault -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeU">
        <test-method status="PASS" signature="testEnumIntRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeU@b7f23d9]" name="testEnumIntRangeU" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeU -->
      <class name="io.kaitai.struct.spec.TestEnumInvalid">
        <test-method status="PASS" signature="testEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestEnumInvalid@77e4c80f]" name="testEnumInvalid" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitch">
        <test-method status="PASS" signature="testNavParentSwitch()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitch@4d49af10]" name="testNavParentSwitch" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitch -->
      <class name="io.kaitai.struct.spec.TestFixedContents">
        <test-method status="PASS" signature="testFixedContents()[pri:0, instance:io.kaitai.struct.spec.TestFixedContents@3c87521]" name="testFixedContents" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedContents -->
      </class> <!-- io.kaitai.struct.spec.TestFixedContents -->
      <class name="io.kaitai.struct.spec.TestEnumIf">
        <test-method status="PASS" signature="testEnumIf()[pri:0, instance:io.kaitai.struct.spec.TestEnumIf@6b53e23f]" name="testEnumIf" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIf -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIf -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeS">
        <test-method status="PASS" signature="testEnumIntRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeS@3b2da18f]" name="testEnumIntRangeS" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeS -->
      <class name="io.kaitai.struct.spec.TestInstanceIoUser">
        <test-method status="PASS" signature="testInstanceIoUser()[pri:0, instance:io.kaitai.struct.spec.TestInstanceIoUser@7bb58ca3]" name="testInstanceIoUser" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceIoUser -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceIoUser -->
      <class name="io.kaitai.struct.spec.TestIndexSizes">
        <test-method status="PASS" signature="testIndexSizes()[pri:0, instance:io.kaitai.struct.spec.TestIndexSizes@35083305]" name="testIndexSizes" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexSizes -->
      </class> <!-- io.kaitai.struct.spec.TestIndexSizes -->
      <class name="io.kaitai.struct.spec.TestTypeTernary">
        <test-method status="PASS" signature="testTypeTernary()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary@ba8d91c]" name="testTypeTernary" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary -->
      <class name="io.kaitai.struct.spec.TestEnumToIClassBorder1">
        <test-method status="PASS" signature="testEnumToIClassBorder1()[pri:0, instance:io.kaitai.struct.spec.TestEnumToIClassBorder1@6328d34a]" name="testEnumToIClassBorder1" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToIClassBorder1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToIClassBorder1 -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse">
        <test-method status="PASS" signature="testNavParentFalse()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse@2d2e5f00]" name="testNavParentFalse" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse -->
      <class name="io.kaitai.struct.spec.TestInstanceStdArray">
        <test-method status="PASS" signature="testInstanceStdArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStdArray@2145433b]" name="testInstanceStdArray" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStdArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStdArray -->
      <class name="io.kaitai.struct.spec.TestSwitchManualInt">
        <test-method status="PASS" signature="testSwitchManualInt()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualInt@1b68b9a4]" name="testSwitchManualInt" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualInt -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualInt -->
      <class name="io.kaitai.struct.spec.TestNavParent2">
        <test-method status="PASS" signature="testNavParent2()[pri:0, instance:io.kaitai.struct.spec.TestNavParent2@5af97850]" name="testNavParent2" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent2 -->
      <class name="io.kaitai.struct.spec.TestNavParent3">
        <test-method status="PASS" signature="testNavParent3()[pri:0, instance:io.kaitai.struct.spec.TestNavParent3@e50a6f6]" name="testNavParent3" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent3 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent3 -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianMod">
        <test-method status="PASS" signature="testDefaultEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianMod@221af3c0]" name="testDefaultEndianMod" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianMod -->
      <class name="io.kaitai.struct.spec.TestSwitchCast">
        <test-method status="PASS" signature="testSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestSwitchCast@77e9807f]" name="testSwitchCast" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchCast -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType0">
        <test-method status="PASS" signature="testExprSizeofType0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType0@5b0abc94]" name="testExprSizeofType0" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType0 -->
      <class name="io.kaitai.struct.spec.TestCastToTop">
        <test-method status="PASS" signature="testCastToTop()[pri:0, instance:io.kaitai.struct.spec.TestCastToTop@7f9fcf7f]" name="testCastToTop" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToTop -->
      </class> <!-- io.kaitai.struct.spec.TestCastToTop -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSize">
        <test-method status="PASS" signature="testSwitchManualIntSize()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSize@770c2e6b]" name="testSwitchManualIntSize" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSize -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSize -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType1">
        <test-method status="PASS" signature="testExprSizeofType1()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType1@3ee0fea4]" name="testExprSizeofType1" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType1 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType1 -->
      <class name="io.kaitai.struct.spec.TestEosExceptionBytes">
        <test-method status="PASS" signature="testEosExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionBytes@2b4a2ec7]" name="testEosExceptionBytes" duration-ms="3" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.nio.HeapByteBuffer.get(HeapByteBuffer.java:151)
	at java.nio.ByteBuffer.get(ByteBuffer.java:715)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:324)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data._read(EosExceptionBytes.java:54)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data.<init>(EosExceptionBytes.java:51)
	at io.kaitai.struct.testformats.EosExceptionBytes._read(EosExceptionBytes.java:32)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EosExceptionBytes.fromFile(EosExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEosExceptionBytes.testEosExceptionBytes(TestEosExceptionBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestImports0">
        <test-method status="PASS" signature="testImports0()[pri:0, instance:io.kaitai.struct.spec.TestImports0@53ca01a2]" name="testImports0" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImports0 -->
      </class> <!-- io.kaitai.struct.spec.TestImports0 -->
      <class name="io.kaitai.struct.spec.TestBitsByteAligned">
        <test-method status="PASS" signature="testBitsByteAligned()[pri:0, instance:io.kaitai.struct.spec.TestBitsByteAligned@51931956]" name="testBitsByteAligned" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsByteAligned -->
      </class> <!-- io.kaitai.struct.spec.TestBitsByteAligned -->
      <class name="io.kaitai.struct.spec.TestNestedSameName">
        <test-method status="PASS" signature="testNestedSameName()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName@482cd91f]" name="testNestedSameName" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName -->
      <class name="io.kaitai.struct.spec.TestRepeatEosU4">
        <test-method status="PASS" signature="testRepeatEosU4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosU4@17c386de]" name="testRepeatEosU4" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosU4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosU4 -->
      <class name="io.kaitai.struct.spec.TestEnumToI">
        <test-method status="PASS" signature="testEnumToI()[pri:0, instance:io.kaitai.struct.spec.TestEnumToI@3f200884]" name="testEnumToI" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToI -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToI -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeElse">
        <test-method status="PASS" signature="testSwitchManualIntSizeElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeElse@2ea6137]" name="testSwitchManualIntSizeElse" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeElse -->
      <class name="io.kaitai.struct.spec.TestPositionToEnd">
        <test-method status="PASS" signature="testPositionToEnd()[pri:0, instance:io.kaitai.struct.spec.TestPositionToEnd@57d5872c]" name="testPositionToEnd" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionToEnd -->
      </class> <!-- io.kaitai.struct.spec.TestPositionToEnd -->
      <class name="io.kaitai.struct.spec.TestParamsCallShort">
        <test-method status="PASS" signature="testParamsCallShort()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallShort@48524010]" name="testParamsCallShort" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallShort -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallShort -->
      <class name="io.kaitai.struct.spec.TestImportsAbs">
        <test-method status="PASS" signature="testImportsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbs@3d36e4cd]" name="testImportsAbs" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbs -->
      <class name="io.kaitai.struct.spec.TestEnumFancy">
        <test-method status="PASS" signature="testEnumFancy()[pri:0, instance:io.kaitai.struct.spec.TestEnumFancy@2890c451]" name="testEnumFancy" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumFancy -->
      </class> <!-- io.kaitai.struct.spec.TestEnumFancy -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeU">
        <test-method status="PASS" signature="testEnumLongRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeU@5ea434c8]" name="testEnumLongRangeU" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeU -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeS">
        <test-method status="PASS" signature="testEnumLongRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeS@646be2c3]" name="testEnumLongRangeS" duration-ms="3" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeS -->
      <class name="io.kaitai.struct.spec.TestNestedTypes">
        <test-method status="PASS" signature="testNestedTypes()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes@51b7e5df]" name="testNestedTypes" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes -->
      <class name="io.kaitai.struct.spec.TestExprArray">
        <test-method status="PASS" signature="testExprArray()[pri:0, instance:io.kaitai.struct.spec.TestExprArray@7f77e91b]" name="testExprArray" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprArray -->
      </class> <!-- io.kaitai.struct.spec.TestExprArray -->
      <class name="io.kaitai.struct.spec.TestSwitchRepeatExpr">
        <test-method status="PASS" signature="testSwitchRepeatExpr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchRepeatExpr@14ec4505]" name="testSwitchRepeatExpr" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchRepeatExpr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchRepeatExpr -->
      <class name="io.kaitai.struct.spec.TestTypeIntUnaryOp">
        <test-method status="PASS" signature="testTypeIntUnaryOp()[pri:0, instance:io.kaitai.struct.spec.TestTypeIntUnaryOp@226a82c4]" name="testTypeIntUnaryOp" duration-ms="3" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeIntUnaryOp -->
      </class> <!-- io.kaitai.struct.spec.TestTypeIntUnaryOp -->
      <class name="io.kaitai.struct.spec.TestIfValues">
        <test-method status="PASS" signature="testIfValues()[pri:0, instance:io.kaitai.struct.spec.TestIfValues@551bdc27]" name="testIfValues" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfValues -->
      </class> <!-- io.kaitai.struct.spec.TestIfValues -->
      <class name="io.kaitai.struct.spec.TestFloatToI">
        <test-method status="PASS" signature="testFloatToI()[pri:0, instance:io.kaitai.struct.spec.TestFloatToI@4c6e276e]" name="testFloatToI" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatToI -->
      </class> <!-- io.kaitai.struct.spec.TestFloatToI -->
      <class name="io.kaitai.struct.spec.TestMultipleUse">
        <test-method status="PASS" signature="testMultipleUse()[pri:0, instance:io.kaitai.struct.spec.TestMultipleUse@534df152]" name="testMultipleUse" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultipleUse -->
      </class> <!-- io.kaitai.struct.spec.TestMultipleUse -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceBytes">
        <test-method status="PASS" signature="testProcessCoerceBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceBytes@41ee392b]" name="testProcessCoerceBytes" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceBytes -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype2">
        <test-method status="PASS" signature="testProcessCoerceUsertype2()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype2@105fece7]" name="testProcessCoerceUsertype2" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype2 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype2 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalid">
        <test-method status="PASS" signature="testSwitchManualEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalid@525f1e4e]" name="testSwitchManualEnumInvalid" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype1">
        <test-method status="PASS" signature="testProcessCoerceUsertype1()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype1@176d53b2]" name="testProcessCoerceUsertype1" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype1 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype1 -->
      <class name="io.kaitai.struct.spec.TestStrEncodings">
        <test-method status="PASS" signature="testStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodings@62e136d3]" name="testStrEncodings" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodings -->
      <class name="io.kaitai.struct.spec.TestParamsDef">
        <test-method status="PASS" signature="testParamsDef()[pri:0, instance:io.kaitai.struct.spec.TestParamsDef@45f45fa1]" name="testParamsDef" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsDef -->
      </class> <!-- io.kaitai.struct.spec.TestParamsDef -->
      <class name="io.kaitai.struct.spec.TestEnumOfValueInst">
        <test-method status="PASS" signature="testEnumOfValueInst()[pri:0, instance:io.kaitai.struct.spec.TestEnumOfValueInst@61009542]" name="testEnumOfValueInst" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumOfValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestEnumOfValueInst -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntElse">
        <test-method status="PASS" signature="testSwitchManualIntElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntElse@516be40f]" name="testSwitchManualIntElse" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntElse -->
      <class name="io.kaitai.struct.spec.TestEnum1">
        <test-method status="PASS" signature="testEnum1()[pri:0, instance:io.kaitai.struct.spec.TestEnum1@23282c25]" name="testEnum1" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum1 -->
      <class name="io.kaitai.struct.spec.TestEnum0">
        <test-method status="PASS" signature="testEnum0()[pri:0, instance:io.kaitai.struct.spec.TestEnum0@3ec300f1]" name="testEnum0" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum0 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum0 -->
      <class name="io.kaitai.struct.spec.TestValidNotParsedIf">
        <test-method status="PASS" signature="testValidNotParsedIf()[pri:0, instance:io.kaitai.struct.spec.TestValidNotParsedIf@28c4711c]" name="testValidNotParsedIf" duration-ms="40" started-at="2020-01-19T14:37:15Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidNotParsedIf -->
      </class> <!-- io.kaitai.struct.spec.TestValidNotParsedIf -->
      <class name="io.kaitai.struct.spec.TestProcessRotate">
        <test-method status="PASS" signature="testProcessRotate()[pri:0, instance:io.kaitai.struct.spec.TestProcessRotate@491666ad]" name="testProcessRotate" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRotate -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRotate -->
      <class name="io.kaitai.struct.spec.TestEnumImport">
        <test-method status="PASS" signature="testEnumImport()[pri:0, instance:io.kaitai.struct.spec.TestEnumImport@19dc67c2]" name="testEnumImport" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumImport -->
      </class> <!-- io.kaitai.struct.spec.TestEnumImport -->
      <class name="io.kaitai.struct.spec.TestJsSignedRightShift">
        <test-method status="PASS" signature="testJsSignedRightShift()[pri:0, instance:io.kaitai.struct.spec.TestJsSignedRightShift@25a65b77]" name="testJsSignedRightShift" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJsSignedRightShift -->
      </class> <!-- io.kaitai.struct.spec.TestJsSignedRightShift -->
      <class name="io.kaitai.struct.spec.TestNavParentOverride">
        <test-method status="PASS" signature="testNavParentOverride()[pri:0, instance:io.kaitai.struct.spec.TestNavParentOverride@7bc1a03d]" name="testNavParentOverride" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentOverride -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentOverride -->
      <class name="io.kaitai.struct.spec.TestValidFailEqBytes">
        <test-method status="PASS" signature="testValidFailEqBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqBytes@c8e4bb0]" name="testValidFailEqBytes" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailEqBytes._read(ValidFailEqBytes.java:33)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:28)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:17)
	at io.kaitai.struct.testformats.ValidFailEqBytes.fromFile(ValidFailEqBytes.java:13)
	at io.kaitai.struct.spec.TestValidFailEqBytes.testValidFailEqBytes(TestValidFailEqBytes.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqBytes -->
      <class name="io.kaitai.struct.spec.TestRepeatNStruct">
        <test-method status="PASS" signature="testRepeatNStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStruct@12d3a4e9]" name="testRepeatNStruct" duration-ms="5" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStruct -->
      <class name="io.kaitai.struct.spec.TestIndexToParamUntil">
        <test-method status="PASS" signature="testIndexToParamUntil()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamUntil@341b80b2]" name="testIndexToParamUntil" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamUntil -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamUntil -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeLe">
        <test-method status="PASS" signature="testBcdUserTypeLe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeLe@1d548a08]" name="testBcdUserTypeLe" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeLe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeLe -->
      <class name="io.kaitai.struct.spec.TestStrEos">
        <test-method status="PASS" signature="testStrEos()[pri:0, instance:io.kaitai.struct.spec.TestStrEos@123f1134]" name="testStrEos" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEos -->
      </class> <!-- io.kaitai.struct.spec.TestStrEos -->
      <class name="io.kaitai.struct.spec.TestNestedSameName2">
        <test-method status="PASS" signature="testNestedSameName2()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName2@1a052a00]" name="testNestedSameName2" duration-ms="2" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName2 -->
      <class name="io.kaitai.struct.spec.TestImportsAbsRel">
        <test-method status="PASS" signature="testImportsAbsRel()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsRel@1a84f40f]" name="testImportsAbsRel" duration-ms="0" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsRel -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsRel -->
      <class name="io.kaitai.struct.spec.TestEnumDeep">
        <test-method status="PASS" signature="testEnumDeep()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeep@351d0846]" name="testEnumDeep" duration-ms="1" started-at="2020-01-19T14:37:16Z" finished-at="2020-01-19T14:37:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeep -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeep -->
    </test> <!-- all -->
  </suite> <!-- Kaitai Struct Java specs -->
</testng-results>
