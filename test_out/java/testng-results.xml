<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="191" passed="189" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-03-21T22:35:47Z" name="Kaitai Struct Java specs" finished-at="2020-03-21T22:35:47Z" duration-ms="630">
    <groups>
    </groups>
    <test started-at="2020-03-21T22:35:47Z" name="all" finished-at="2020-03-21T22:35:47Z" duration-ms="630">
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsLe">
        <test-method signature="testDefaultEndianExprIsLe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsLe@7eecb5b8]" started-at="2020-03-21T22:35:47Z" name="testDefaultEndianExprIsLe" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsLe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsLe -->
      <class name="io.kaitai.struct.spec.TestExprBytesCmp">
        <test-method signature="testExprBytesCmp()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesCmp@2a8448fa]" started-at="2020-03-21T22:35:47Z" name="testExprBytesCmp" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesCmp -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesCmp -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocrefMulti">
        <test-method signature="testDocstringsDocrefMulti()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocrefMulti@433defed]" started-at="2020-03-21T22:35:47Z" name="testDocstringsDocrefMulti" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocrefMulti -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocrefMulti -->
      <class name="io.kaitai.struct.spec.TestProcessRepeatBytes">
        <test-method signature="testProcessRepeatBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessRepeatBytes@38467116]" started-at="2020-03-21T22:35:47Z" name="testProcessRepeatBytes" finished-at="2020-03-21T22:35:47Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRepeatBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRepeatBytes -->
      <class name="io.kaitai.struct.spec.TestRepeatEosStruct">
        <test-method signature="testRepeatEosStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosStruct@3f4faf53]" started-at="2020-03-21T22:35:47Z" name="testRepeatEosStruct" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosStruct -->
      <class name="io.kaitai.struct.spec.TestExprCalcArrayOps">
        <test-method signature="testExprCalcArrayOps()[pri:0, instance:io.kaitai.struct.spec.TestExprCalcArrayOps@23f5b5dc]" started-at="2020-03-21T22:35:47Z" name="testExprCalcArrayOps" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprCalcArrayOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprCalcArrayOps -->
      <class name="io.kaitai.struct.spec.TestProcessToUser">
        <test-method signature="testProcessToUser()[pri:0, instance:io.kaitai.struct.spec.TestProcessToUser@6f53b8a]" started-at="2020-03-21T22:35:47Z" name="testProcessToUser" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessToUser -->
      </class> <!-- io.kaitai.struct.spec.TestProcessToUser -->
      <class name="io.kaitai.struct.spec.TestParamsPassUsertype">
        <test-method signature="testParamsPassUsertype()[pri:0, instance:io.kaitai.struct.spec.TestParamsPassUsertype@70ed52de]" started-at="2020-03-21T22:35:47Z" name="testParamsPassUsertype" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsPassUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestParamsPassUsertype -->
      <class name="io.kaitai.struct.spec.TestFixedStruct">
        <test-method signature="testFixedStruct()[pri:0, instance:io.kaitai.struct.spec.TestFixedStruct@126253fd]" started-at="2020-03-21T22:35:47Z" name="testFixedStruct" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestFixedStruct -->
      <class name="io.kaitai.struct.spec.TestFloatingPoints">
        <test-method signature="testFloatingPoints()[pri:0, instance:io.kaitai.struct.spec.TestFloatingPoints@61c4eee0]" started-at="2020-03-21T22:35:47Z" name="testFloatingPoints" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatingPoints -->
      </class> <!-- io.kaitai.struct.spec.TestFloatingPoints -->
      <class name="io.kaitai.struct.spec.TestNonStandard">
        <test-method signature="testNonStandard()[pri:0, instance:io.kaitai.struct.spec.TestNonStandard@548a24a]" started-at="2020-03-21T22:35:47Z" name="testNonStandard" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonStandard -->
      </class> <!-- io.kaitai.struct.spec.TestNonStandard -->
      <class name="io.kaitai.struct.spec.TestStrCombine">
        <test-method signature="testStrCombine()[pri:0, instance:io.kaitai.struct.spec.TestStrCombine@446a1e84]" started-at="2020-03-21T22:35:47Z" name="testStrCombine" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrCombine -->
      </class> <!-- io.kaitai.struct.spec.TestStrCombine -->
      <class name="io.kaitai.struct.spec.TestImportsAbsAbs">
        <test-method signature="testImportsAbsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsAbs@4f0f2942]" started-at="2020-03-21T22:35:47Z" name="testImportsAbsAbs" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsAbs -->
      <class name="io.kaitai.struct.spec.TestImportsCircularA">
        <test-method signature="testImportsCircularA()[pri:0, instance:io.kaitai.struct.spec.TestImportsCircularA@16150369]" started-at="2020-03-21T22:35:47Z" name="testImportsCircularA" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsCircularA -->
      </class> <!-- io.kaitai.struct.spec.TestImportsCircularA -->
      <class name="io.kaitai.struct.spec.TestEnumNegative">
        <test-method signature="testEnumNegative()[pri:0, instance:io.kaitai.struct.spec.TestEnumNegative@7e990ed7]" started-at="2020-03-21T22:35:47Z" name="testEnumNegative" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumNegative -->
      </class> <!-- io.kaitai.struct.spec.TestEnumNegative -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceSwitch">
        <test-method signature="testProcessCoerceSwitch()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceSwitch@4a8355dd]" started-at="2020-03-21T22:35:47Z" name="testProcessCoerceSwitch" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceSwitch -->
      <class name="io.kaitai.struct.spec.TestStrPadTermEmpty">
        <test-method signature="testStrPadTermEmpty()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTermEmpty@194fad1]" started-at="2020-03-21T22:35:47Z" name="testStrPadTermEmpty" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTermEmpty -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTermEmpty -->
      <class name="io.kaitai.struct.spec.TestValidFailMaxInt">
        <test-method signature="testValidFailMaxInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailMaxInt@6e535154]" started-at="2020-03-21T22:35:47Z" name="testValidFailMaxInt" finished-at="2020-03-21T22:35:47Z" duration-ms="9" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, max 12, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 1: validation failed: not in range, max 12, but got 80
	at io.kaitai.struct.testformats.ValidFailMaxInt._read(ValidFailMaxInt.java:32)
	at io.kaitai.struct.testformats.ValidFailMaxInt.<init>(ValidFailMaxInt.java:27)
	at io.kaitai.struct.testformats.ValidFailMaxInt.<init>(ValidFailMaxInt.java:16)
	at io.kaitai.struct.testformats.ValidFailMaxInt.fromFile(ValidFailMaxInt.java:12)
	at io.kaitai.struct.spec.TestValidFailMaxInt.testValidFailMaxInt(TestValidFailMaxInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailMaxInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailMaxInt -->
      <class name="io.kaitai.struct.spec.TestBitsEnum">
        <test-method signature="testBitsEnum()[pri:0, instance:io.kaitai.struct.spec.TestBitsEnum@1be2019a]" started-at="2020-03-21T22:35:47Z" name="testBitsEnum" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestBitsEnum -->
      <class name="io.kaitai.struct.spec.TestPositionInSeq">
        <test-method signature="testPositionInSeq()[pri:0, instance:io.kaitai.struct.spec.TestPositionInSeq@6f43c82]" started-at="2020-03-21T22:35:47Z" name="testPositionInSeq" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionInSeq -->
      </class> <!-- io.kaitai.struct.spec.TestPositionInSeq -->
      <class name="io.kaitai.struct.spec.TestValidFailMinInt">
        <test-method signature="testValidFailMinInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailMinInt@69504ae9]" started-at="2020-03-21T22:35:47Z" name="testValidFailMinInt" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationLessThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, min 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationLessThanError: /seq/0: at pos 1: validation failed: not in range, min 123, but got 80
	at io.kaitai.struct.testformats.ValidFailMinInt._read(ValidFailMinInt.java:32)
	at io.kaitai.struct.testformats.ValidFailMinInt.<init>(ValidFailMinInt.java:27)
	at io.kaitai.struct.testformats.ValidFailMinInt.<init>(ValidFailMinInt.java:16)
	at io.kaitai.struct.testformats.ValidFailMinInt.fromFile(ValidFailMinInt.java:12)
	at io.kaitai.struct.spec.TestValidFailMinInt.testValidFailMinInt(TestValidFailMinInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationLessThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailMinInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailMinInt -->
      <class name="io.kaitai.struct.spec.TestDebugArrayUser">
        <test-method signature="testDebugArrayUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugArrayUser@533bda92]" started-at="2020-03-21T22:35:47Z" name="testDebugArrayUser" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugArrayUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugArrayUser -->
      <class name="io.kaitai.struct.spec.TestDefaultBigEndian">
        <test-method signature="testDefaultBigEndian()[pri:0, instance:io.kaitai.struct.spec.TestDefaultBigEndian@1972e513]" started-at="2020-03-21T22:35:47Z" name="testDefaultBigEndian" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultBigEndian -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultBigEndian -->
      <class name="io.kaitai.struct.spec.TestParamsEnum">
        <test-method signature="testParamsEnum()[pri:0, instance:io.kaitai.struct.spec.TestParamsEnum@6f204a1a]" started-at="2020-03-21T22:35:47Z" name="testParamsEnum" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsEnum -->
      </class> <!-- io.kaitai.struct.spec.TestParamsEnum -->
      <class name="io.kaitai.struct.spec.TestRepeatEosBit">
        <test-method signature="testRepeatEosBit()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosBit@5fb759d6]" started-at="2020-03-21T22:35:47Z" name="testRepeatEosBit" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosBit -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosBit -->
      <class name="io.kaitai.struct.spec.TestDebug0">
        <test-method signature="testDebug0()[pri:0, instance:io.kaitai.struct.spec.TestDebug0@15a34df2]" started-at="2020-03-21T22:35:47Z" name="testDebug0" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebug0 -->
      </class> <!-- io.kaitai.struct.spec.TestDebug0 -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValue0">
        <test-method signature="testExprSizeofValue0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValue0@4f32a3ad]" started-at="2020-03-21T22:35:47Z" name="testExprSizeofValue0" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValue0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValue0 -->
      <class name="io.kaitai.struct.spec.TestIntegers">
        <test-method signature="testIntegers()[pri:0, instance:io.kaitai.struct.spec.TestIntegers@3cce5371]" started-at="2020-03-21T22:35:47Z" name="testIntegers" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestIntegers -->
      <class name="io.kaitai.struct.spec.TestNavParentVsValueInst">
        <test-method signature="testNavParentVsValueInst()[pri:0, instance:io.kaitai.struct.spec.TestNavParentVsValueInst@73eb439a]" started-at="2020-03-21T22:35:47Z" name="testNavParentVsValueInst" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentVsValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentVsValueInst -->
      <class name="io.kaitai.struct.spec.TestExprStrOps">
        <test-method signature="testExprStrOps()[pri:0, instance:io.kaitai.struct.spec.TestExprStrOps@2ab4bc72]" started-at="2020-03-21T22:35:47Z" name="testExprStrOps" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprStrOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprStrOps -->
      <class name="io.kaitai.struct.spec.TestExprIoPos">
        <test-method signature="testExprIoPos()[pri:0, instance:io.kaitai.struct.spec.TestExprIoPos@c430e6c]" started-at="2020-03-21T22:35:47Z" name="testExprIoPos" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoPos -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoPos -->
      <class name="io.kaitai.struct.spec.TestYamlInts">
        <test-method signature="testYamlInts()[pri:0, instance:io.kaitai.struct.spec.TestYamlInts@2b40ff9c]" started-at="2020-03-21T22:35:47Z" name="testYamlInts" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testYamlInts -->
      </class> <!-- io.kaitai.struct.spec.TestYamlInts -->
      <class name="io.kaitai.struct.spec.TestProcessXorValue">
        <test-method signature="testProcessXorValue()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorValue@c05fddc]" started-at="2020-03-21T22:35:47Z" name="testProcessXorValue" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorValue -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorValue -->
      <class name="io.kaitai.struct.spec.TestHelloWorld">
        <test-method signature="testHelloWorld()[pri:0, instance:io.kaitai.struct.spec.TestHelloWorld@7188af83]" started-at="2020-03-21T22:35:47Z" name="testHelloWorld" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHelloWorld -->
      </class> <!-- io.kaitai.struct.spec.TestHelloWorld -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Value">
        <test-method signature="testProcessXor4Value()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Value@5b38c1ec]" started-at="2020-03-21T22:35:47Z" name="testProcessXor4Value" finished-at="2020-03-21T22:35:47Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Value -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Value -->
      <class name="io.kaitai.struct.spec.TestInstanceUserArray">
        <test-method signature="testInstanceUserArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceUserArray@6be968ce]" started-at="2020-03-21T22:35:47Z" name="testInstanceUserArray" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceUserArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceUserArray -->
      <class name="io.kaitai.struct.spec.TestExprEnum">
        <test-method signature="testExprEnum()[pri:0, instance:io.kaitai.struct.spec.TestExprEnum@48e1f6c7]" started-at="2020-03-21T22:35:47Z" name="testExprEnum" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprEnum -->
      </class> <!-- io.kaitai.struct.spec.TestExprEnum -->
      <class name="io.kaitai.struct.spec.TestProcessXorConst">
        <test-method signature="testProcessXorConst()[pri:0, instance:io.kaitai.struct.spec.TestProcessXorConst@338fc1d8]" started-at="2020-03-21T22:35:47Z" name="testProcessXorConst" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXorConst -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXorConst -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprInherited">
        <test-method signature="testDefaultEndianExprInherited()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprInherited@68c9d179]" started-at="2020-03-21T22:35:47Z" name="testDefaultEndianExprInherited" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprInherited -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprInherited -->
      <class name="io.kaitai.struct.spec.TestProcessCustom">
        <test-method signature="testProcessCustom()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustom@31ea9581]" started-at="2020-03-21T22:35:47Z" name="testProcessCustom" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustom -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustom -->
      <class name="io.kaitai.struct.spec.TestProcessXor4Const">
        <test-method signature="testProcessXor4Const()[pri:0, instance:io.kaitai.struct.spec.TestProcessXor4Const@3e08ff24]" started-at="2020-03-21T22:35:47Z" name="testProcessXor4Const" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessXor4Const -->
      </class> <!-- io.kaitai.struct.spec.TestProcessXor4Const -->
      <class name="io.kaitai.struct.spec.TestCastToImported">
        <test-method signature="testCastToImported()[pri:0, instance:io.kaitai.struct.spec.TestCastToImported@7a6d7e92]" started-at="2020-03-21T22:35:47Z" name="testCastToImported" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToImported -->
      </class> <!-- io.kaitai.struct.spec.TestCastToImported -->
      <class name="io.kaitai.struct.spec.TestBufferedStruct">
        <test-method signature="testBufferedStruct()[pri:0, instance:io.kaitai.struct.spec.TestBufferedStruct@5745ca0e]" started-at="2020-03-21T22:35:47Z" name="testBufferedStruct" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBufferedStruct -->
      </class> <!-- io.kaitai.struct.spec.TestBufferedStruct -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse2">
        <test-method signature="testNavParentFalse2()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse2@15888343]" started-at="2020-03-21T22:35:47Z" name="testNavParentFalse2" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse2 -->
      <class name="io.kaitai.struct.spec.TestIndexToParamExpr">
        <test-method signature="testIndexToParamExpr()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamExpr@dc7df28]" started-at="2020-03-21T22:35:47Z" name="testIndexToParamExpr" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamExpr -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamExpr -->
      <class name="io.kaitai.struct.spec.TestDebugEnumName">
        <test-method signature="testDebugEnumName()[pri:0, instance:io.kaitai.struct.spec.TestDebugEnumName@14fc5f04]" started-at="2020-03-21T22:35:47Z" name="testDebugEnumName" finished-at="2020-03-21T22:35:47Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugEnumName -->
      </class> <!-- io.kaitai.struct.spec.TestDebugEnumName -->
      <class name="io.kaitai.struct.spec.TestIntegersMinMax">
        <test-method signature="testIntegersMinMax()[pri:0, instance:io.kaitai.struct.spec.TestIntegersMinMax@29d80d2b]" started-at="2020-03-21T22:35:47Z" name="testIntegersMinMax" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegersMinMax -->
      </class> <!-- io.kaitai.struct.spec.TestIntegersMinMax -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnum">
        <test-method signature="testSwitchManualEnum()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnum@35841320]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualEnum" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnum -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnum -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStrElse">
        <test-method signature="testSwitchManualStrElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStrElse@6f10d5b6]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualStrElse" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStrElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStrElse -->
      <class name="io.kaitai.struct.spec.TestCastNested">
        <test-method signature="testCastNested()[pri:0, instance:io.kaitai.struct.spec.TestCastNested@70cf32e3]" started-at="2020-03-21T22:35:47Z" name="testCastNested" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastNested -->
      </class> <!-- io.kaitai.struct.spec.TestCastNested -->
      <class name="io.kaitai.struct.spec.TestSwitchMultiBoolOps">
        <test-method signature="testSwitchMultiBoolOps()[pri:0, instance:io.kaitai.struct.spec.TestSwitchMultiBoolOps@3ad83a66]" started-at="2020-03-21T22:35:47Z" name="testSwitchMultiBoolOps" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchMultiBoolOps -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchMultiBoolOps -->
      <class name="io.kaitai.struct.spec.TestEnumForUnknownId">
        <test-method signature="testEnumForUnknownId()[pri:0, instance:io.kaitai.struct.spec.TestEnumForUnknownId@723ca036]" started-at="2020-03-21T22:35:47Z" name="testEnumForUnknownId" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumForUnknownId -->
      </class> <!-- io.kaitai.struct.spec.TestEnumForUnknownId -->
      <class name="io.kaitai.struct.spec.TestValidLong">
        <test-method signature="testValidLong()[pri:0, instance:io.kaitai.struct.spec.TestValidLong@4d1bf319]" started-at="2020-03-21T22:35:47Z" name="testValidLong" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLong -->
      </class> <!-- io.kaitai.struct.spec.TestValidLong -->
      <class name="io.kaitai.struct.spec.TestRecursiveOne">
        <test-method signature="testRecursiveOne()[pri:0, instance:io.kaitai.struct.spec.TestRecursiveOne@33ecda92]" started-at="2020-03-21T22:35:47Z" name="testRecursiveOne" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRecursiveOne -->
      </class> <!-- io.kaitai.struct.spec.TestRecursiveOne -->
      <class name="io.kaitai.struct.spec.TestValidFailContents">
        <test-method signature="testValidFailContents()[pri:0, instance:io.kaitai.struct.spec.TestValidFailContents@5f8e8a9d]" started-at="2020-03-21T22:35:47Z" name="testValidFailContents" finished-at="2020-03-21T22:35:47Z" duration-ms="8" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailContents._read(ValidFailContents.java:33)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:28)
	at io.kaitai.struct.testformats.ValidFailContents.<init>(ValidFailContents.java:17)
	at io.kaitai.struct.testformats.ValidFailContents.fromFile(ValidFailContents.java:13)
	at io.kaitai.struct.spec.TestValidFailContents.testValidFailContents(TestValidFailContents.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailContents -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailContents -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitchCast">
        <test-method signature="testNavParentSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitchCast@221a3fa4]" started-at="2020-03-21T22:35:47Z" name="testNavParentSwitchCast" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitchCast -->
      <class name="io.kaitai.struct.spec.TestTermStrz">
        <test-method signature="testTermStrz()[pri:0, instance:io.kaitai.struct.spec.TestTermStrz@5a5a729f]" started-at="2020-03-21T22:35:47Z" name="testTermStrz" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermStrz -->
      </class> <!-- io.kaitai.struct.spec.TestTermStrz -->
      <class name="io.kaitai.struct.spec.TestNavRoot">
        <test-method signature="testNavRoot()[pri:0, instance:io.kaitai.struct.spec.TestNavRoot@20b2475a]" started-at="2020-03-21T22:35:47Z" name="testNavRoot" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavRoot -->
      </class> <!-- io.kaitai.struct.spec.TestNavRoot -->
      <class name="io.kaitai.struct.spec.TestTsPacketHeader">
        <test-method signature="testTsPacketHeader()[pri:0, instance:io.kaitai.struct.spec.TestTsPacketHeader@17bffc17]" started-at="2020-03-21T22:35:47Z" name="testTsPacketHeader" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTsPacketHeader -->
      </class> <!-- io.kaitai.struct.spec.TestTsPacketHeader -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrzDouble">
        <test-method signature="testRepeatNStrzDouble()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrzDouble@1a245833]" started-at="2020-03-21T22:35:47Z" name="testRepeatNStrzDouble" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrzDouble -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrzDouble -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeEos">
        <test-method signature="testSwitchManualIntSizeEos()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeEos@2657d4dd]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualIntSizeEos" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeEos -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeEos -->
      <class name="io.kaitai.struct.spec.TestZlibWithHeader78">
        <test-method signature="testZlibWithHeader78()[pri:0, instance:io.kaitai.struct.spec.TestZlibWithHeader78@55de24cc]" started-at="2020-03-21T22:35:47Z" name="testZlibWithHeader78" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibWithHeader78 -->
      </class> <!-- io.kaitai.struct.spec.TestZlibWithHeader78 -->
      <class name="io.kaitai.struct.spec.TestRepeatNStrz">
        <test-method signature="testRepeatNStrz()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStrz@59402b8f]" started-at="2020-03-21T22:35:47Z" name="testRepeatNStrz" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStrz -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStrz -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprIsBe">
        <test-method signature="testDefaultEndianExprIsBe()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprIsBe@491b9b8]" started-at="2020-03-21T22:35:47Z" name="testDefaultEndianExprIsBe" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprIsBe -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprIsBe -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilS4">
        <test-method signature="testRepeatUntilS4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilS4@28cda624]" started-at="2020-03-21T22:35:47Z" name="testRepeatUntilS4" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilS4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilS4 -->
      <class name="io.kaitai.struct.spec.TestValidFailEqInt">
        <test-method signature="testValidFailEqInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqInt@2dfaea86]" started-at="2020-03-21T22:35:47Z" name="testValidFailEqInt" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not equal, expected 123, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 1: validation failed: not equal, expected 123, but got 80
	at io.kaitai.struct.testformats.ValidFailEqInt._read(ValidFailEqInt.java:32)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:27)
	at io.kaitai.struct.testformats.ValidFailEqInt.<init>(ValidFailEqInt.java:16)
	at io.kaitai.struct.testformats.ValidFailEqInt.fromFile(ValidFailEqInt.java:12)
	at io.kaitai.struct.spec.TestValidFailEqInt.testValidFailEqInt(TestValidFailEqInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqInt -->
      <class name="io.kaitai.struct.spec.TestPositionAbs">
        <test-method signature="testPositionAbs()[pri:0, instance:io.kaitai.struct.spec.TestPositionAbs@3feb2dda]" started-at="2020-03-21T22:35:47Z" name="testPositionAbs" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionAbs -->
      </class> <!-- io.kaitai.struct.spec.TestPositionAbs -->
      <class name="io.kaitai.struct.spec.TestEofExceptionU4">
        <test-method signature="testEofExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionU4@4722ef0c]" started-at="2020-03-21T22:35:47Z" name="testEofExceptionU4" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.Buffer.nextGetIndex(Buffer.java:647)
	at java.base/java.nio.DirectByteBuffer.getInt(DirectByteBuffer.java:751)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:269)
	at io.kaitai.struct.testformats.EofExceptionU4._read(EofExceptionU4.java:31)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:27)
	at io.kaitai.struct.testformats.EofExceptionU4.<init>(EofExceptionU4.java:16)
	at io.kaitai.struct.testformats.EofExceptionU4.fromFile(EofExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEofExceptionU4.testEofExceptionU4(TestEofExceptionU4.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestStrLiterals">
        <test-method signature="testStrLiterals()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals@23e84203]" started-at="2020-03-21T22:35:47Z" name="testStrLiterals" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals -->
      <class name="io.kaitai.struct.spec.TestExprMod">
        <test-method signature="testExprMod()[pri:0, instance:io.kaitai.struct.spec.TestExprMod@210ab13f]" started-at="2020-03-21T22:35:47Z" name="testExprMod" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprMod -->
      </class> <!-- io.kaitai.struct.spec.TestExprMod -->
      <class name="io.kaitai.struct.spec.TestValidShort">
        <test-method signature="testValidShort()[pri:0, instance:io.kaitai.struct.spec.TestValidShort@30f842ca]" started-at="2020-03-21T22:35:47Z" name="testValidShort" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidShort -->
      </class> <!-- io.kaitai.struct.spec.TestValidShort -->
      <class name="io.kaitai.struct.spec.TestValidFailAnyofInt">
        <test-method signature="testValidFailAnyofInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailAnyofInt@65987993]" started-at="2020-03-21T22:35:47Z" name="testValidFailAnyofInt" finished-at="2020-03-21T22:35:47Z" duration-ms="5" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not any of the list, got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError: /seq/0: at pos 1: validation failed: not any of the list, got 80
	at io.kaitai.struct.testformats.ValidFailAnyofInt._read(ValidFailAnyofInt.java:32)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.<init>(ValidFailAnyofInt.java:27)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.<init>(ValidFailAnyofInt.java:16)
	at io.kaitai.struct.testformats.ValidFailAnyofInt.fromFile(ValidFailAnyofInt.java:12)
	at io.kaitai.struct.spec.TestValidFailAnyofInt.testValidFailAnyofInt(TestValidFailAnyofInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotAnyOfError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailAnyofInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailAnyofInt -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse">
        <test-method signature="testSwitchManualEnumInvalidElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse@792b749c]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualEnumInvalidElse" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalidElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalidElse -->
      <class name="io.kaitai.struct.spec.TestOptionalId">
        <test-method signature="testOptionalId()[pri:0, instance:io.kaitai.struct.spec.TestOptionalId@7b4c50bc]" started-at="2020-03-21T22:35:47Z" name="testOptionalId" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptionalId -->
      </class> <!-- io.kaitai.struct.spec.TestOptionalId -->
      <class name="io.kaitai.struct.spec.TestSwitchManualStr">
        <test-method signature="testSwitchManualStr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualStr@4007f65e]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualStr" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualStr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualStr -->
      <class name="io.kaitai.struct.spec.TestIfStruct">
        <test-method signature="testIfStruct()[pri:0, instance:io.kaitai.struct.spec.TestIfStruct@231f98ef]" started-at="2020-03-21T22:35:47Z" name="testIfStruct" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfStruct -->
      </class> <!-- io.kaitai.struct.spec.TestIfStruct -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilSized">
        <test-method signature="testRepeatUntilSized()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilSized@76494737]" started-at="2020-03-21T22:35:47Z" name="testRepeatUntilSized" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilSized -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilSized -->
      <class name="io.kaitai.struct.spec.TestTypeTernaryOpaque">
        <test-method signature="testTypeTernaryOpaque()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernaryOpaque@536f2a7e]" started-at="2020-03-21T22:35:47Z" name="testTypeTernaryOpaque" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernaryOpaque -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernaryOpaque -->
      <class name="io.kaitai.struct.spec.TestStrPadTerm">
        <test-method signature="testStrPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestStrPadTerm@55cb6996]" started-at="2020-03-21T22:35:47Z" name="testStrPadTerm" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestStrPadTerm -->
      <class name="io.kaitai.struct.spec.TestExpr3">
        <test-method signature="testExpr3()[pri:0, instance:io.kaitai.struct.spec.TestExpr3@624ea235]" started-at="2020-03-21T22:35:47Z" name="testExpr3" finished-at="2020-03-21T22:35:47Z" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr3 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr3 -->
      <class name="io.kaitai.struct.spec.TestDocstringsDocref">
        <test-method signature="testDocstringsDocref()[pri:0, instance:io.kaitai.struct.spec.TestDocstringsDocref@4b8d604b]" started-at="2020-03-21T22:35:47Z" name="testDocstringsDocref" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstringsDocref -->
      </class> <!-- io.kaitai.struct.spec.TestDocstringsDocref -->
      <class name="io.kaitai.struct.spec.TestOpaqueWithParam">
        <test-method signature="testOpaqueWithParam()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueWithParam@66982506]" started-at="2020-03-21T22:35:47Z" name="testOpaqueWithParam" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueWithParam -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueWithParam -->
      <class name="io.kaitai.struct.spec.TestExpr2">
        <test-method signature="testExpr2()[pri:0, instance:io.kaitai.struct.spec.TestExpr2@7139992f]" started-at="2020-03-21T22:35:47Z" name="testExpr2" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr2 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr2 -->
      <class name="io.kaitai.struct.spec.TestTermBytes">
        <test-method signature="testTermBytes()[pri:0, instance:io.kaitai.struct.spec.TestTermBytes@34bde49d]" started-at="2020-03-21T22:35:47Z" name="testTermBytes" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTermBytes -->
      </class> <!-- io.kaitai.struct.spec.TestTermBytes -->
      <class name="io.kaitai.struct.spec.TestNestedTypes3">
        <test-method signature="testNestedTypes3()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes3@72bc6553]" started-at="2020-03-21T22:35:47Z" name="testNestedTypes3" finished-at="2020-03-21T22:35:47Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes3 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes3 -->
      <class name="io.kaitai.struct.spec.TestSwitchBytearray">
        <test-method signature="testSwitchBytearray()[pri:0, instance:io.kaitai.struct.spec.TestSwitchBytearray@52f27fbd]" started-at="2020-03-21T22:35:47Z" name="testSwitchBytearray" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchBytearray -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchBytearray -->
      <class name="io.kaitai.struct.spec.TestExpr1">
        <test-method signature="testExpr1()[pri:0, instance:io.kaitai.struct.spec.TestExpr1@1500b2f3]" started-at="2020-03-21T22:35:47Z" name="testExpr1" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr1 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr1 -->
      <class name="io.kaitai.struct.spec.TestNavParent">
        <test-method signature="testNavParent()[pri:0, instance:io.kaitai.struct.spec.TestNavParent@303cf2ba]" started-at="2020-03-21T22:35:47Z" name="testNavParent" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent -->
      <class name="io.kaitai.struct.spec.TestExpr0">
        <test-method signature="testExpr0()[pri:0, instance:io.kaitai.struct.spec.TestExpr0@6c4906d3]" started-at="2020-03-21T22:35:47Z" name="testExpr0" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpr0 -->
      </class> <!-- io.kaitai.struct.spec.TestExpr0 -->
      <class name="io.kaitai.struct.spec.TestDocstrings">
        <test-method signature="testDocstrings()[pri:0, instance:io.kaitai.struct.spec.TestDocstrings@312aa7c]" started-at="2020-03-21T22:35:47Z" name="testDocstrings" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDocstrings -->
      </class> <!-- io.kaitai.struct.spec.TestDocstrings -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType">
        <test-method signature="testOpaqueExternalType()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType@5b7a7f33]" started-at="2020-03-21T22:35:47Z" name="testOpaqueExternalType" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType -->
      <class name="io.kaitai.struct.spec.TestNestedTypes2">
        <test-method signature="testNestedTypes2()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes2@7a5ceedd]" started-at="2020-03-21T22:35:47Z" name="testNestedTypes2" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes2 -->
      <class name="io.kaitai.struct.spec.TestValidFailInst">
        <test-method signature="testValidFailInst()[pri:0, instance:io.kaitai.struct.spec.TestValidFailInst@eadd4fb]" started-at="2020-03-21T22:35:47Z" name="testValidFailInst" finished-at="2020-03-21T22:35:47Z" duration-ms="70" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /instances/inst: at pos 0: validation failed: not equal, expected 80, but got 49
	at io.kaitai.struct.testformats.ValidFailInst.inst(ValidFailInst.java:43)
	at io.kaitai.struct.testformats.ValidFailInst._read(ValidFailInst.java:30)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:27)
	at io.kaitai.struct.testformats.ValidFailInst.<init>(ValidFailInst.java:16)
	at io.kaitai.struct.testformats.ValidFailInst.fromFile(ValidFailInst.java:12)
	at io.kaitai.struct.spec.TestValidFailInst.testValidFailInst(TestValidFailInst.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailInst -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailInst -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeBe">
        <test-method signature="testBcdUserTypeBe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeBe@4c163e3]" started-at="2020-03-21T22:35:47Z" name="testBcdUserTypeBe" finished-at="2020-03-21T22:35:47Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeBe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeBe -->
      <class name="io.kaitai.struct.spec.TestMetaTags">
        <test-method signature="testMetaTags()[pri:0, instance:io.kaitai.struct.spec.TestMetaTags@790da477]" started-at="2020-03-21T22:35:47Z" name="testMetaTags" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaTags -->
      </class> <!-- io.kaitai.struct.spec.TestMetaTags -->
      <class name="io.kaitai.struct.spec.TestIndexToParamEos">
        <test-method signature="testIndexToParamEos()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamEos@782859e]" started-at="2020-03-21T22:35:47Z" name="testIndexToParamEos" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamEos -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamEos -->
      <class name="io.kaitai.struct.spec.TestBitsSimple">
        <test-method signature="testBitsSimple()[pri:0, instance:io.kaitai.struct.spec.TestBitsSimple@4082ba93]" started-at="2020-03-21T22:35:47Z" name="testBitsSimple" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsSimple -->
      </class> <!-- io.kaitai.struct.spec.TestBitsSimple -->
      <class name="io.kaitai.struct.spec.TestDebugSwitchUser">
        <test-method signature="testDebugSwitchUser()[pri:0, instance:io.kaitai.struct.spec.TestDebugSwitchUser@333d4a8c]" started-at="2020-03-21T22:35:47Z" name="testDebugSwitchUser" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDebugSwitchUser -->
      </class> <!-- io.kaitai.struct.spec.TestDebugSwitchUser -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers2">
        <test-method signature="testSwitchIntegers2()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers2@d554c5f]" started-at="2020-03-21T22:35:47Z" name="testSwitchIntegers2" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers2 -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers2 -->
      <class name="io.kaitai.struct.spec.TestIfInstances">
        <test-method signature="testIfInstances()[pri:0, instance:io.kaitai.struct.spec.TestIfInstances@f1da57d]" started-at="2020-03-21T22:35:47Z" name="testIfInstances" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfInstances -->
      </class> <!-- io.kaitai.struct.spec.TestIfInstances -->
      <class name="io.kaitai.struct.spec.TestStrLiterals2">
        <test-method signature="testStrLiterals2()[pri:0, instance:io.kaitai.struct.spec.TestStrLiterals2@239a307b]" started-at="2020-03-21T22:35:47Z" name="testStrLiterals2" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrLiterals2 -->
      </class> <!-- io.kaitai.struct.spec.TestStrLiterals2 -->
      <class name="io.kaitai.struct.spec.TestMetaXref">
        <test-method signature="testMetaXref()[pri:0, instance:io.kaitai.struct.spec.TestMetaXref@5890e879]" started-at="2020-03-21T22:35:47Z" name="testMetaXref" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMetaXref -->
      </class> <!-- io.kaitai.struct.spec.TestMetaXref -->
      <class name="io.kaitai.struct.spec.TestInstanceStd">
        <test-method signature="testInstanceStd()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStd@47caedad]" started-at="2020-03-21T22:35:47Z" name="testInstanceStd" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStd -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStd -->
      <class name="io.kaitai.struct.spec.TestEofExceptionBytes">
        <test-method signature="testEofExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEofExceptionBytes@4e5ed836]" started-at="2020-03-21T22:35:47Z" name="testEofExceptionBytes" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.DirectByteBuffer.get(DirectByteBuffer.java:295)
	at java.base/java.nio.ByteBuffer.get(ByteBuffer.java:762)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:324)
	at io.kaitai.struct.testformats.EofExceptionBytes._read(EofExceptionBytes.java:30)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EofExceptionBytes.<init>(EofExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EofExceptionBytes.fromFile(EofExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEofExceptionBytes.testEofExceptionBytes(TestEofExceptionBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEofExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEofExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestExprIoEof">
        <test-method signature="testExprIoEof()[pri:0, instance:io.kaitai.struct.spec.TestExprIoEof@97e93f1]" started-at="2020-03-21T22:35:47Z" name="testExprIoEof" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprIoEof -->
      </class> <!-- io.kaitai.struct.spec.TestExprIoEof -->
      <class name="io.kaitai.struct.spec.TestImportsRel1">
        <test-method signature="testImportsRel1()[pri:0, instance:io.kaitai.struct.spec.TestImportsRel1@5b247367]" started-at="2020-03-21T22:35:47Z" name="testImportsRel1" finished-at="2020-03-21T22:35:47Z" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsRel1 -->
      </class> <!-- io.kaitai.struct.spec.TestImportsRel1 -->
      <class name="io.kaitai.struct.spec.TestEosExceptionU4">
        <test-method signature="testEosExceptionU4()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionU4@4201c465]" started-at="2020-03-21T22:35:47Z" name="testEosExceptionU4" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.Buffer.nextGetIndex(Buffer.java:647)
	at java.base/java.nio.HeapByteBuffer.getInt(HeapByteBuffer.java:388)
	at io.kaitai.struct.ByteBufferKaitaiStream.readU4le(ByteBufferKaitaiStream.java:269)
	at io.kaitai.struct.testformats.EosExceptionU4$Data._read(EosExceptionU4.java:55)
	at io.kaitai.struct.testformats.EosExceptionU4$Data.<init>(EosExceptionU4.java:51)
	at io.kaitai.struct.testformats.EosExceptionU4._read(EosExceptionU4.java:32)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:27)
	at io.kaitai.struct.testformats.EosExceptionU4.<init>(EosExceptionU4.java:16)
	at io.kaitai.struct.testformats.EosExceptionU4.fromFile(EosExceptionU4.java:12)
	at io.kaitai.struct.spec.TestEosExceptionU4.testEosExceptionU4(TestEosExceptionU4.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionU4 -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionU4 -->
      <class name="io.kaitai.struct.spec.TestProcessRepeatUsertype">
        <test-method signature="testProcessRepeatUsertype()[pri:0, instance:io.kaitai.struct.spec.TestProcessRepeatUsertype@8462f31]" started-at="2020-03-21T22:35:47Z" name="testProcessRepeatUsertype" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRepeatUsertype -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRepeatUsertype -->
      <class name="io.kaitai.struct.spec.TestIoLocalVar">
        <test-method signature="testIoLocalVar()[pri:0, instance:io.kaitai.struct.spec.TestIoLocalVar@1040be71]" started-at="2020-03-21T22:35:47Z" name="testIoLocalVar" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIoLocalVar -->
      </class> <!-- io.kaitai.struct.spec.TestIoLocalVar -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianExprException">
        <test-method signature="testDefaultEndianExprException()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianExprException@5c7933ad]" started-at="2020-03-21T22:35:47Z" name="testDefaultEndianExprException" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$UndecidedEndiannessError">
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$UndecidedEndiannessError
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj._read(DefaultEndianExprException.java:98)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc$MainObj.<init>(DefaultEndianExprException.java:82)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc._read(DefaultEndianExprException.java:62)
	at io.kaitai.struct.testformats.DefaultEndianExprException$Doc.<init>(DefaultEndianExprException.java:58)
	at io.kaitai.struct.testformats.DefaultEndianExprException._read(DefaultEndianExprException.java:36)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:29)
	at io.kaitai.struct.testformats.DefaultEndianExprException.<init>(DefaultEndianExprException.java:18)
	at io.kaitai.struct.testformats.DefaultEndianExprException.fromFile(DefaultEndianExprException.java:14)
	at io.kaitai.struct.spec.TestDefaultEndianExprException.testDefaultEndianExprException(TestDefaultEndianExprException.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$UndecidedEndiannessError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianExprException -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianExprException -->
      <class name="io.kaitai.struct.spec.TestUserType">
        <test-method signature="testUserType()[pri:0, instance:io.kaitai.struct.spec.TestUserType@24569dba]" started-at="2020-03-21T22:35:47Z" name="testUserType" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUserType -->
      </class> <!-- io.kaitai.struct.spec.TestUserType -->
      <class name="io.kaitai.struct.spec.TestEnumDeepLiterals">
        <test-method signature="testEnumDeepLiterals()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeepLiterals@431cd9b2]" started-at="2020-03-21T22:35:47Z" name="testEnumDeepLiterals" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeepLiterals -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeepLiterals -->
      <class name="io.kaitai.struct.spec.TestParamsCallExtraParens">
        <test-method signature="testParamsCallExtraParens()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallExtraParens@72c8e7b]" started-at="2020-03-21T22:35:47Z" name="testParamsCallExtraParens" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallExtraParens -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallExtraParens -->
      <class name="io.kaitai.struct.spec.TestRepeatUntilComplex">
        <test-method signature="testRepeatUntilComplex()[pri:0, instance:io.kaitai.struct.spec.TestRepeatUntilComplex@5ddeb7cb]" started-at="2020-03-21T22:35:47Z" name="testRepeatUntilComplex" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatUntilComplex -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatUntilComplex -->
      <class name="io.kaitai.struct.spec.TestSwitchIntegers">
        <test-method signature="testSwitchIntegers()[pri:0, instance:io.kaitai.struct.spec.TestSwitchIntegers@4bdeaabb]" started-at="2020-03-21T22:35:47Z" name="testSwitchIntegers" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchIntegers -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchIntegers -->
      <class name="io.kaitai.struct.spec.TestOpaqueExternalType02Parent">
        <test-method signature="testOpaqueExternalType02Parent()[pri:0, instance:io.kaitai.struct.spec.TestOpaqueExternalType02Parent@5b799640]" started-at="2020-03-21T22:35:47Z" name="testOpaqueExternalType02Parent" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpaqueExternalType02Parent -->
      </class> <!-- io.kaitai.struct.spec.TestOpaqueExternalType02Parent -->
      <class name="io.kaitai.struct.spec.TestBytesPadTerm">
        <test-method signature="testBytesPadTerm()[pri:0, instance:io.kaitai.struct.spec.TestBytesPadTerm@4a003cbe]" started-at="2020-03-21T22:35:47Z" name="testBytesPadTerm" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBytesPadTerm -->
      </class> <!-- io.kaitai.struct.spec.TestBytesPadTerm -->
      <class name="io.kaitai.struct.spec.TestExprSizeofValueSized">
        <test-method signature="testExprSizeofValueSized()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofValueSized@5340477f]" started-at="2020-03-21T22:35:47Z" name="testExprSizeofValueSized" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofValueSized -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofValueSized -->
      <class name="io.kaitai.struct.spec.TestValidSwitch">
        <test-method signature="testValidSwitch()[pri:0, instance:io.kaitai.struct.spec.TestValidSwitch@359df09a]" started-at="2020-03-21T22:35:47Z" name="testValidSwitch" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestValidSwitch -->
      <class name="io.kaitai.struct.spec.TestStrEncodingsDefault">
        <test-method signature="testStrEncodingsDefault()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodingsDefault@5884a914]" started-at="2020-03-21T22:35:47Z" name="testStrEncodingsDefault" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodingsDefault -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodingsDefault -->
      <class name="io.kaitai.struct.spec.TestExprBytesOps">
        <test-method signature="testExprBytesOps()[pri:0, instance:io.kaitai.struct.spec.TestExprBytesOps@305ffe9e]" started-at="2020-03-21T22:35:47Z" name="testExprBytesOps" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBytesOps -->
      </class> <!-- io.kaitai.struct.spec.TestExprBytesOps -->
      <class name="io.kaitai.struct.spec.TestZlibSurrounded">
        <test-method signature="testZlibSurrounded()[pri:0, instance:io.kaitai.struct.spec.TestZlibSurrounded@7857fe2]" started-at="2020-03-21T22:35:47Z" name="testZlibSurrounded" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZlibSurrounded -->
      </class> <!-- io.kaitai.struct.spec.TestZlibSurrounded -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeU">
        <test-method signature="testEnumIntRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeU@17fc391b]" started-at="2020-03-21T22:35:47Z" name="testEnumIntRangeU" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeU -->
      <class name="io.kaitai.struct.spec.TestEnumInvalid">
        <test-method signature="testEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestEnumInvalid@1a4927d6]" started-at="2020-03-21T22:35:47Z" name="testEnumInvalid" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestNavParentSwitch">
        <test-method signature="testNavParentSwitch()[pri:0, instance:io.kaitai.struct.spec.TestNavParentSwitch@1b1cfb87]" started-at="2020-03-21T22:35:47Z" name="testNavParentSwitch" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentSwitch -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentSwitch -->
      <class name="io.kaitai.struct.spec.TestEnumIf">
        <test-method signature="testEnumIf()[pri:0, instance:io.kaitai.struct.spec.TestEnumIf@69c81773]" started-at="2020-03-21T22:35:47Z" name="testEnumIf" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIf -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIf -->
      <class name="io.kaitai.struct.spec.TestFixedContents">
        <test-method signature="testFixedContents()[pri:0, instance:io.kaitai.struct.spec.TestFixedContents@60f00693]" started-at="2020-03-21T22:35:47Z" name="testFixedContents" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFixedContents -->
      </class> <!-- io.kaitai.struct.spec.TestFixedContents -->
      <class name="io.kaitai.struct.spec.TestInstanceIoUser">
        <test-method signature="testInstanceIoUser()[pri:0, instance:io.kaitai.struct.spec.TestInstanceIoUser@4d1c005e]" started-at="2020-03-21T22:35:47Z" name="testInstanceIoUser" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceIoUser -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceIoUser -->
      <class name="io.kaitai.struct.spec.TestEnumIntRangeS">
        <test-method signature="testEnumIntRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumIntRangeS@304bb45b]" started-at="2020-03-21T22:35:47Z" name="testEnumIntRangeS" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumIntRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumIntRangeS -->
      <class name="io.kaitai.struct.spec.TestIndexSizes">
        <test-method signature="testIndexSizes()[pri:0, instance:io.kaitai.struct.spec.TestIndexSizes@45d84a20]" started-at="2020-03-21T22:35:47Z" name="testIndexSizes" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexSizes -->
      </class> <!-- io.kaitai.struct.spec.TestIndexSizes -->
      <class name="io.kaitai.struct.spec.TestTypeTernary">
        <test-method signature="testTypeTernary()[pri:0, instance:io.kaitai.struct.spec.TestTypeTernary@4d0d9fe7]" started-at="2020-03-21T22:35:47Z" name="testTypeTernary" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeTernary -->
      </class> <!-- io.kaitai.struct.spec.TestTypeTernary -->
      <class name="io.kaitai.struct.spec.TestEnumToIClassBorder1">
        <test-method signature="testEnumToIClassBorder1()[pri:0, instance:io.kaitai.struct.spec.TestEnumToIClassBorder1@7d9d0818]" started-at="2020-03-21T22:35:47Z" name="testEnumToIClassBorder1" finished-at="2020-03-21T22:35:47Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToIClassBorder1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToIClassBorder1 -->
      <class name="io.kaitai.struct.spec.TestInstanceStdArray">
        <test-method signature="testInstanceStdArray()[pri:0, instance:io.kaitai.struct.spec.TestInstanceStdArray@6f01b95f]" started-at="2020-03-21T22:35:47Z" name="testInstanceStdArray" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInstanceStdArray -->
      </class> <!-- io.kaitai.struct.spec.TestInstanceStdArray -->
      <class name="io.kaitai.struct.spec.TestNavParentFalse">
        <test-method signature="testNavParentFalse()[pri:0, instance:io.kaitai.struct.spec.TestNavParentFalse@43df23d3]" started-at="2020-03-21T22:35:47Z" name="testNavParentFalse" finished-at="2020-03-21T22:35:47Z" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentFalse -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentFalse -->
      <class name="io.kaitai.struct.spec.TestSwitchManualInt">
        <test-method signature="testSwitchManualInt()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualInt@1033576a]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualInt" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualInt -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualInt -->
      <class name="io.kaitai.struct.spec.TestNavParent2">
        <test-method signature="testNavParent2()[pri:0, instance:io.kaitai.struct.spec.TestNavParent2@25df00a0]" started-at="2020-03-21T22:35:47Z" name="testNavParent2" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent2 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent2 -->
      <class name="io.kaitai.struct.spec.TestNavParent3">
        <test-method signature="testNavParent3()[pri:0, instance:io.kaitai.struct.spec.TestNavParent3@7d900ecf]" started-at="2020-03-21T22:35:47Z" name="testNavParent3" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParent3 -->
      </class> <!-- io.kaitai.struct.spec.TestNavParent3 -->
      <class name="io.kaitai.struct.spec.TestDefaultEndianMod">
        <test-method signature="testDefaultEndianMod()[pri:0, instance:io.kaitai.struct.spec.TestDefaultEndianMod@7bd7d6d6]" started-at="2020-03-21T22:35:47Z" name="testDefaultEndianMod" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultEndianMod -->
      </class> <!-- io.kaitai.struct.spec.TestDefaultEndianMod -->
      <class name="io.kaitai.struct.spec.TestSwitchCast">
        <test-method signature="testSwitchCast()[pri:0, instance:io.kaitai.struct.spec.TestSwitchCast@43f02ef2]" started-at="2020-03-21T22:35:47Z" name="testSwitchCast" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchCast -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchCast -->
      <class name="io.kaitai.struct.spec.TestCastToTop">
        <test-method signature="testCastToTop()[pri:0, instance:io.kaitai.struct.spec.TestCastToTop@79207381]" started-at="2020-03-21T22:35:47Z" name="testCastToTop" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCastToTop -->
      </class> <!-- io.kaitai.struct.spec.TestCastToTop -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType0">
        <test-method signature="testExprSizeofType0()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType0@673fdbce]" started-at="2020-03-21T22:35:47Z" name="testExprSizeofType0" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType0 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType0 -->
      <class name="io.kaitai.struct.spec.TestExprSizeofType1">
        <test-method signature="testExprSizeofType1()[pri:0, instance:io.kaitai.struct.spec.TestExprSizeofType1@4d15107f]" started-at="2020-03-21T22:35:47Z" name="testExprSizeofType1" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprSizeofType1 -->
      </class> <!-- io.kaitai.struct.spec.TestExprSizeofType1 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSize">
        <test-method signature="testSwitchManualIntSize()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSize@4b520ea8]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualIntSize" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSize -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSize -->
      <class name="io.kaitai.struct.spec.TestEosExceptionBytes">
        <test-method signature="testEosExceptionBytes()[pri:0, instance:io.kaitai.struct.spec.TestEosExceptionBytes@247310d0]" started-at="2020-03-21T22:35:47Z" name="testEosExceptionBytes" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <exception class="java.nio.BufferUnderflowException">
            <full-stacktrace>
              <![CDATA[java.nio.BufferUnderflowException
	at java.base/java.nio.HeapByteBuffer.get(HeapByteBuffer.java:178)
	at java.base/java.nio.ByteBuffer.get(ByteBuffer.java:762)
	at io.kaitai.struct.ByteBufferKaitaiStream.readBytes(ByteBufferKaitaiStream.java:324)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data._read(EosExceptionBytes.java:54)
	at io.kaitai.struct.testformats.EosExceptionBytes$Data.<init>(EosExceptionBytes.java:51)
	at io.kaitai.struct.testformats.EosExceptionBytes._read(EosExceptionBytes.java:32)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:27)
	at io.kaitai.struct.testformats.EosExceptionBytes.<init>(EosExceptionBytes.java:16)
	at io.kaitai.struct.testformats.EosExceptionBytes.fromFile(EosExceptionBytes.java:12)
	at io.kaitai.struct.spec.TestEosExceptionBytes.testEosExceptionBytes(TestEosExceptionBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.BufferUnderflowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEosExceptionBytes -->
      </class> <!-- io.kaitai.struct.spec.TestEosExceptionBytes -->
      <class name="io.kaitai.struct.spec.TestImports0">
        <test-method signature="testImports0()[pri:0, instance:io.kaitai.struct.spec.TestImports0@57bc27f5]" started-at="2020-03-21T22:35:47Z" name="testImports0" finished-at="2020-03-21T22:35:47Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImports0 -->
      </class> <!-- io.kaitai.struct.spec.TestImports0 -->
      <class name="io.kaitai.struct.spec.TestBitsByteAligned">
        <test-method signature="testBitsByteAligned()[pri:0, instance:io.kaitai.struct.spec.TestBitsByteAligned@71075444]" started-at="2020-03-21T22:35:47Z" name="testBitsByteAligned" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitsByteAligned -->
      </class> <!-- io.kaitai.struct.spec.TestBitsByteAligned -->
      <class name="io.kaitai.struct.spec.TestNestedSameName">
        <test-method signature="testNestedSameName()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName@1c742ed4]" started-at="2020-03-21T22:35:47Z" name="testNestedSameName" finished-at="2020-03-21T22:35:47Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName -->
      <class name="io.kaitai.struct.spec.TestRepeatEosU4">
        <test-method signature="testRepeatEosU4()[pri:0, instance:io.kaitai.struct.spec.TestRepeatEosU4@6cb107fd]" started-at="2020-03-21T22:35:47Z" name="testRepeatEosU4" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatEosU4 -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatEosU4 -->
      <class name="io.kaitai.struct.spec.TestEnumToI">
        <test-method signature="testEnumToI()[pri:0, instance:io.kaitai.struct.spec.TestEnumToI@710636b0]" started-at="2020-03-21T22:35:47Z" name="testEnumToI" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumToI -->
      </class> <!-- io.kaitai.struct.spec.TestEnumToI -->
      <class name="io.kaitai.struct.spec.TestExprBits">
        <test-method signature="testExprBits()[pri:0, instance:io.kaitai.struct.spec.TestExprBits@5e7cd6cc]" started-at="2020-03-21T22:35:47Z" name="testExprBits" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/ExprBits]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/ExprBits
	at io.kaitai.struct.spec.TestExprBits.testExprBits(TestExprBits.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.ExprBits
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprBits -->
      </class> <!-- io.kaitai.struct.spec.TestExprBits -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntSizeElse">
        <test-method signature="testSwitchManualIntSizeElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntSizeElse@2de56eb2]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualIntSizeElse" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntSizeElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntSizeElse -->
      <class name="io.kaitai.struct.spec.TestPositionToEnd">
        <test-method signature="testPositionToEnd()[pri:0, instance:io.kaitai.struct.spec.TestPositionToEnd@821330f]" started-at="2020-03-21T22:35:47Z" name="testPositionToEnd" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPositionToEnd -->
      </class> <!-- io.kaitai.struct.spec.TestPositionToEnd -->
      <class name="io.kaitai.struct.spec.TestParamsCallShort">
        <test-method signature="testParamsCallShort()[pri:0, instance:io.kaitai.struct.spec.TestParamsCallShort@6f15d60e]" started-at="2020-03-21T22:35:47Z" name="testParamsCallShort" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsCallShort -->
      </class> <!-- io.kaitai.struct.spec.TestParamsCallShort -->
      <class name="io.kaitai.struct.spec.TestImportsAbs">
        <test-method signature="testImportsAbs()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbs@58e1d9d]" started-at="2020-03-21T22:35:47Z" name="testImportsAbs" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbs -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbs -->
      <class name="io.kaitai.struct.spec.TestEnumFancy">
        <test-method signature="testEnumFancy()[pri:0, instance:io.kaitai.struct.spec.TestEnumFancy@65f8f5ae]" started-at="2020-03-21T22:35:47Z" name="testEnumFancy" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumFancy -->
      </class> <!-- io.kaitai.struct.spec.TestEnumFancy -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeU">
        <test-method signature="testEnumLongRangeU()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeU@609e8838]" started-at="2020-03-21T22:35:47Z" name="testEnumLongRangeU" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeU -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeU -->
      <class name="io.kaitai.struct.spec.TestEnumLongRangeS">
        <test-method signature="testEnumLongRangeS()[pri:0, instance:io.kaitai.struct.spec.TestEnumLongRangeS@6b695b06]" started-at="2020-03-21T22:35:47Z" name="testEnumLongRangeS" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumLongRangeS -->
      </class> <!-- io.kaitai.struct.spec.TestEnumLongRangeS -->
      <class name="io.kaitai.struct.spec.TestSwitchRepeatExpr">
        <test-method signature="testSwitchRepeatExpr()[pri:0, instance:io.kaitai.struct.spec.TestSwitchRepeatExpr@2a693f59]" started-at="2020-03-21T22:35:47Z" name="testSwitchRepeatExpr" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchRepeatExpr -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchRepeatExpr -->
      <class name="io.kaitai.struct.spec.TestNestedTypes">
        <test-method signature="testNestedTypes()[pri:0, instance:io.kaitai.struct.spec.TestNestedTypes@7c37508a]" started-at="2020-03-21T22:35:47Z" name="testNestedTypes" finished-at="2020-03-21T22:35:47Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedTypes -->
      </class> <!-- io.kaitai.struct.spec.TestNestedTypes -->
      <class name="io.kaitai.struct.spec.TestExprArray">
        <test-method signature="testExprArray()[pri:0, instance:io.kaitai.struct.spec.TestExprArray@302c971f]" started-at="2020-03-21T22:35:47Z" name="testExprArray" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExprArray -->
      </class> <!-- io.kaitai.struct.spec.TestExprArray -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeFloat">
        <test-method signature="testValidFailRangeFloat()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeFloat@25be7b63]" started-at="2020-03-21T22:35:47Z" name="testValidFailRangeFloat" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="FAIL">
          <exception class="java.lang.NoClassDefFoundError">
            <message>
              <![CDATA[io/kaitai/struct/testformats/ValidFailRangeFloat]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoClassDefFoundError: io/kaitai/struct/testformats/ValidFailRangeFloat
	at io.kaitai.struct.spec.TestValidFailRangeFloat.testValidFailRangeFloat(TestValidFailRangeFloat.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
Caused by: java.lang.ClassNotFoundException: io.kaitai.struct.testformats.ValidFailRangeFloat
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 24 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoClassDefFoundError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeFloat -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeFloat -->
      <class name="io.kaitai.struct.spec.TestTypeIntUnaryOp">
        <test-method signature="testTypeIntUnaryOp()[pri:0, instance:io.kaitai.struct.spec.TestTypeIntUnaryOp@1807e3f6]" started-at="2020-03-21T22:35:47Z" name="testTypeIntUnaryOp" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeIntUnaryOp -->
      </class> <!-- io.kaitai.struct.spec.TestTypeIntUnaryOp -->
      <class name="io.kaitai.struct.spec.TestFloatToI">
        <test-method signature="testFloatToI()[pri:0, instance:io.kaitai.struct.spec.TestFloatToI@aba625]" started-at="2020-03-21T22:35:47Z" name="testFloatToI" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloatToI -->
      </class> <!-- io.kaitai.struct.spec.TestFloatToI -->
      <class name="io.kaitai.struct.spec.TestIfValues">
        <test-method signature="testIfValues()[pri:0, instance:io.kaitai.struct.spec.TestIfValues@26abb146]" started-at="2020-03-21T22:35:47Z" name="testIfValues" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfValues -->
      </class> <!-- io.kaitai.struct.spec.TestIfValues -->
      <class name="io.kaitai.struct.spec.TestMultipleUse">
        <test-method signature="testMultipleUse()[pri:0, instance:io.kaitai.struct.spec.TestMultipleUse@5965d37]" started-at="2020-03-21T22:35:47Z" name="testMultipleUse" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultipleUse -->
      </class> <!-- io.kaitai.struct.spec.TestMultipleUse -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceBytes">
        <test-method signature="testProcessCoerceBytes()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceBytes@6c284af]" started-at="2020-03-21T22:35:47Z" name="testProcessCoerceBytes" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceBytes -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceBytes -->
      <class name="io.kaitai.struct.spec.TestSwitchElseOnly">
        <test-method signature="testSwitchElseOnly()[pri:0, instance:io.kaitai.struct.spec.TestSwitchElseOnly@19932c16]" started-at="2020-03-21T22:35:47Z" name="testSwitchElseOnly" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchElseOnly -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchElseOnly -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype2">
        <test-method signature="testProcessCoerceUsertype2()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype2@6b09fb41]" started-at="2020-03-21T22:35:47Z" name="testProcessCoerceUsertype2" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype2 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype2 -->
      <class name="io.kaitai.struct.spec.TestSwitchManualEnumInvalid">
        <test-method signature="testSwitchManualEnumInvalid()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualEnumInvalid@4d14b6c2]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualEnumInvalid" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualEnumInvalid -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualEnumInvalid -->
      <class name="io.kaitai.struct.spec.TestValidFailRangeInt">
        <test-method signature="testValidFailRangeInt()[pri:0, instance:io.kaitai.struct.spec.TestValidFailRangeInt@5a59ca5e]" started-at="2020-03-21T22:35:47Z" name="testValidFailRangeInt" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationGreaterThanError">
            <message>
              <![CDATA[/seq/0: at pos 1: validation failed: not in range, max 10, but got 80]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationGreaterThanError: /seq/0: at pos 1: validation failed: not in range, max 10, but got 80
	at io.kaitai.struct.testformats.ValidFailRangeInt._read(ValidFailRangeInt.java:35)
	at io.kaitai.struct.testformats.ValidFailRangeInt.<init>(ValidFailRangeInt.java:27)
	at io.kaitai.struct.testformats.ValidFailRangeInt.<init>(ValidFailRangeInt.java:16)
	at io.kaitai.struct.testformats.ValidFailRangeInt.fromFile(ValidFailRangeInt.java:12)
	at io.kaitai.struct.spec.TestValidFailRangeInt.testValidFailRangeInt(TestValidFailRangeInt.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationGreaterThanError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailRangeInt -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailRangeInt -->
      <class name="io.kaitai.struct.spec.TestProcessCoerceUsertype1">
        <test-method signature="testProcessCoerceUsertype1()[pri:0, instance:io.kaitai.struct.spec.TestProcessCoerceUsertype1@387a8303]" started-at="2020-03-21T22:35:47Z" name="testProcessCoerceUsertype1" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCoerceUsertype1 -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCoerceUsertype1 -->
      <class name="io.kaitai.struct.spec.TestStrEncodings">
        <test-method signature="testStrEncodings()[pri:0, instance:io.kaitai.struct.spec.TestStrEncodings@496bc455]" started-at="2020-03-21T22:35:47Z" name="testStrEncodings" finished-at="2020-03-21T22:35:47Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEncodings -->
      </class> <!-- io.kaitai.struct.spec.TestStrEncodings -->
      <class name="io.kaitai.struct.spec.TestParamsDef">
        <test-method signature="testParamsDef()[pri:0, instance:io.kaitai.struct.spec.TestParamsDef@50378a4]" started-at="2020-03-21T22:35:47Z" name="testParamsDef" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testParamsDef -->
      </class> <!-- io.kaitai.struct.spec.TestParamsDef -->
      <class name="io.kaitai.struct.spec.TestEnumOfValueInst">
        <test-method signature="testEnumOfValueInst()[pri:0, instance:io.kaitai.struct.spec.TestEnumOfValueInst@7fd50002]" started-at="2020-03-21T22:35:47Z" name="testEnumOfValueInst" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumOfValueInst -->
      </class> <!-- io.kaitai.struct.spec.TestEnumOfValueInst -->
      <class name="io.kaitai.struct.spec.TestSwitchManualIntElse">
        <test-method signature="testSwitchManualIntElse()[pri:0, instance:io.kaitai.struct.spec.TestSwitchManualIntElse@3932c79a]" started-at="2020-03-21T22:35:47Z" name="testSwitchManualIntElse" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSwitchManualIntElse -->
      </class> <!-- io.kaitai.struct.spec.TestSwitchManualIntElse -->
      <class name="io.kaitai.struct.spec.TestEnum1">
        <test-method signature="testEnum1()[pri:0, instance:io.kaitai.struct.spec.TestEnum1@451001e5]" started-at="2020-03-21T22:35:47Z" name="testEnum1" finished-at="2020-03-21T22:35:47Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum1 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum1 -->
      <class name="io.kaitai.struct.spec.TestEnum0">
        <test-method signature="testEnum0()[pri:0, instance:io.kaitai.struct.spec.TestEnum0@3de8f619]" started-at="2020-03-21T22:35:47Z" name="testEnum0" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum0 -->
      </class> <!-- io.kaitai.struct.spec.TestEnum0 -->
      <class name="io.kaitai.struct.spec.TestProcessRotate">
        <test-method signature="testProcessRotate()[pri:0, instance:io.kaitai.struct.spec.TestProcessRotate@480d3575]" started-at="2020-03-21T22:35:47Z" name="testProcessRotate" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessRotate -->
      </class> <!-- io.kaitai.struct.spec.TestProcessRotate -->
      <class name="io.kaitai.struct.spec.TestValidNotParsedIf">
        <test-method signature="testValidNotParsedIf()[pri:0, instance:io.kaitai.struct.spec.TestValidNotParsedIf@5c80cf32]" started-at="2020-03-21T22:35:47Z" name="testValidNotParsedIf" finished-at="2020-03-21T22:35:47Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidNotParsedIf -->
      </class> <!-- io.kaitai.struct.spec.TestValidNotParsedIf -->
      <class name="io.kaitai.struct.spec.TestEnumImport">
        <test-method signature="testEnumImport()[pri:0, instance:io.kaitai.struct.spec.TestEnumImport@2b30a42c]" started-at="2020-03-21T22:35:47Z" name="testEnumImport" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumImport -->
      </class> <!-- io.kaitai.struct.spec.TestEnumImport -->
      <class name="io.kaitai.struct.spec.TestJsSignedRightShift">
        <test-method signature="testJsSignedRightShift()[pri:0, instance:io.kaitai.struct.spec.TestJsSignedRightShift@6a8658ff]" started-at="2020-03-21T22:35:47Z" name="testJsSignedRightShift" finished-at="2020-03-21T22:35:47Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJsSignedRightShift -->
      </class> <!-- io.kaitai.struct.spec.TestJsSignedRightShift -->
      <class name="io.kaitai.struct.spec.TestProcessCustomNoArgs">
        <test-method signature="testProcessCustomNoArgs()[pri:0, instance:io.kaitai.struct.spec.TestProcessCustomNoArgs@6440112d]" started-at="2020-03-21T22:35:47Z" name="testProcessCustomNoArgs" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessCustomNoArgs -->
      </class> <!-- io.kaitai.struct.spec.TestProcessCustomNoArgs -->
      <class name="io.kaitai.struct.spec.TestNavParentOverride">
        <test-method signature="testNavParentOverride()[pri:0, instance:io.kaitai.struct.spec.TestNavParentOverride@6e2829c7]" started-at="2020-03-21T22:35:47Z" name="testNavParentOverride" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNavParentOverride -->
      </class> <!-- io.kaitai.struct.spec.TestNavParentOverride -->
      <class name="io.kaitai.struct.spec.TestValidFailEqBytes">
        <test-method signature="testValidFailEqBytes()[pri:0, instance:io.kaitai.struct.spec.TestValidFailEqBytes@5db6b9cd]" started-at="2020-03-21T22:35:47Z" name="testValidFailEqBytes" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <exception class="io.kaitai.struct.KaitaiStream$ValidationNotEqualError">
            <message>
              <![CDATA[/seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.kaitai.struct.KaitaiStream$ValidationNotEqualError: /seq/0: at pos 2: validation failed: not equal, expected [51 41], but got [50 41]
	at io.kaitai.struct.testformats.ValidFailEqBytes._read(ValidFailEqBytes.java:33)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:28)
	at io.kaitai.struct.testformats.ValidFailEqBytes.<init>(ValidFailEqBytes.java:17)
	at io.kaitai.struct.testformats.ValidFailEqBytes.fromFile(ValidFailEqBytes.java:13)
	at io.kaitai.struct.spec.TestValidFailEqBytes.testValidFailEqBytes(TestValidFailEqBytes.java:13)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.TestNG.privateMain(TestNG.java:1385)
	at org.testng.TestNG.main(TestNG.java:1354)
]]>
            </full-stacktrace>
          </exception> <!-- io.kaitai.struct.KaitaiStream$ValidationNotEqualError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFailEqBytes -->
      </class> <!-- io.kaitai.struct.spec.TestValidFailEqBytes -->
      <class name="io.kaitai.struct.spec.TestRepeatNStruct">
        <test-method signature="testRepeatNStruct()[pri:0, instance:io.kaitai.struct.spec.TestRepeatNStruct@7c137fd5]" started-at="2020-03-21T22:35:47Z" name="testRepeatNStruct" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatNStruct -->
      </class> <!-- io.kaitai.struct.spec.TestRepeatNStruct -->
      <class name="io.kaitai.struct.spec.TestIndexToParamUntil">
        <test-method signature="testIndexToParamUntil()[pri:0, instance:io.kaitai.struct.spec.TestIndexToParamUntil@183ec003]" started-at="2020-03-21T22:35:47Z" name="testIndexToParamUntil" finished-at="2020-03-21T22:35:47Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIndexToParamUntil -->
      </class> <!-- io.kaitai.struct.spec.TestIndexToParamUntil -->
      <class name="io.kaitai.struct.spec.TestStrEos">
        <test-method signature="testStrEos()[pri:0, instance:io.kaitai.struct.spec.TestStrEos@514646ef]" started-at="2020-03-21T22:35:47Z" name="testStrEos" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStrEos -->
      </class> <!-- io.kaitai.struct.spec.TestStrEos -->
      <class name="io.kaitai.struct.spec.TestBcdUserTypeLe">
        <test-method signature="testBcdUserTypeLe()[pri:0, instance:io.kaitai.struct.spec.TestBcdUserTypeLe@6d60fe40]" started-at="2020-03-21T22:35:47Z" name="testBcdUserTypeLe" finished-at="2020-03-21T22:35:47Z" duration-ms="80" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBcdUserTypeLe -->
      </class> <!-- io.kaitai.struct.spec.TestBcdUserTypeLe -->
      <class name="io.kaitai.struct.spec.TestNestedSameName2">
        <test-method signature="testNestedSameName2()[pri:0, instance:io.kaitai.struct.spec.TestNestedSameName2@7ae0a9ec]" started-at="2020-03-21T22:35:47Z" name="testNestedSameName2" finished-at="2020-03-21T22:35:47Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedSameName2 -->
      </class> <!-- io.kaitai.struct.spec.TestNestedSameName2 -->
      <class name="io.kaitai.struct.spec.TestImportsAbsRel">
        <test-method signature="testImportsAbsRel()[pri:0, instance:io.kaitai.struct.spec.TestImportsAbsRel@740fb309]" started-at="2020-03-21T22:35:47Z" name="testImportsAbsRel" finished-at="2020-03-21T22:35:47Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImportsAbsRel -->
      </class> <!-- io.kaitai.struct.spec.TestImportsAbsRel -->
      <class name="io.kaitai.struct.spec.TestEnumDeep">
        <test-method signature="testEnumDeep()[pri:0, instance:io.kaitai.struct.spec.TestEnumDeep@28dcca0c]" started-at="2020-03-21T22:35:47Z" name="testEnumDeep" finished-at="2020-03-21T22:35:47Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumDeep -->
      </class> <!-- io.kaitai.struct.spec.TestEnumDeep -->
    </test> <!-- all -->
  </suite> <!-- Kaitai Struct Java specs -->
</testng-results>
