{
  "$meta": {
    "lang": "go",
    "timestamp": "2023-10-15T23:51:07Z",
    "ci": {
      "ci": "github",
      "run_id": "6527205422",
      "run_number": "304",
      "job_id": "17721748398",
      "url": "https://github.com/kaitai-io/ci_targets/actions/runs/6527205422/job/17721748398"
    }
  },
  "BcdUserTypeBe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BcdUserTypeLe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsByteAligned": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsEnum": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSeqEndianCombo": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsShiftByB32Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsShiftByB64Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSignedResB32Be": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSignedResB32Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSignedShiftB32Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSignedShiftB64Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSimple": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSimpleLe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsUnalignedB32Be": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsUnalignedB32Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsUnalignedB64Be": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsUnalignedB64Le": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BufferedStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BytesPadTerm": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "CombineBool": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "CombineBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "CombineEnum": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "CombineStr": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DebugArrayUser": {
    "status": "passed",
    "elapsed": 0.0
  },
  "DefaultBigEndian": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultBitEndianMod": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultEndianExprException": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultEndianExprInherited": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultEndianExprIsBe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultEndianExprIsLe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultEndianMod": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Docstrings": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DocstringsDocref": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DocstringsDocrefMulti": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Enum0": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Enum1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumDeep": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumDeepLiterals": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumFancy": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumIf": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumImport": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumIntRangeS": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumIntRangeU": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumInvalid": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumLongRangeS": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumLongRangeU": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumNegative": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumOfValueInst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumToI": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumToIClassBorder1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumToIInvalid": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EofExceptionBytes": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "eof_exception_bytes_test.go:31: expected kaitai.EndOfStreamError, got *errors.errorString"
    },
    "is_kst": true
  },
  "EofExceptionU4": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "eof_exception_u4_test.go:31: expected kaitai.EndOfStreamError, got <nil>"
    },
    "is_kst": true
  },
  "EosExceptionBytes": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "eos_exception_bytes_test.go:31: expected kaitai.EndOfStreamError, got *errors.errorString"
    },
    "is_kst": true
  },
  "EosExceptionU4": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "eos_exception_u4_test.go:31: expected kaitai.EndOfStreamError, got <nil>"
    },
    "is_kst": true
  },
  "Expr0": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr3": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprArray": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprBits": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprBytesCmp": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprBytesNonLiteral": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprBytesOps": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprCalcArrayOps": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprEnum": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprIfIntOps": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprIntDiv": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "expr_int_div_test.go:43: \n        \tError Trace:\t/tests/spec/go/expr_int_div_test.go:43\n        \tError:      \tNot equal: \n        \t            \texpected: -757\n        \t            \tactual  : -756\n        \tTest:       \tTestExprIntDiv\n    expr_int_div_test.go:53: \n        \tError Trace:\t/tests/spec/go/expr_int_div_test.go:53\n        \tError:      \tNot equal: \n        \t            \texpected: -4073\n        \t            \tactual  : -4072\n        \tTest:       \tTestExprIntDiv"
    },
    "is_kst": true
  },
  "ExprIoEof": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "expr_io_eof_test.go:33: \n        \tError Trace:\t/tests/spec/go/expr_io_eof_test.go:33\n        \tError:      \tExpected nil, but got: 0x0\n        \tTest:       \tTestExprIoEof"
    },
    "is_kst": true
  },
  "ExprIoPos": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprMod": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprSizeofType0": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprSizeofType1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprSizeofValue0": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprSizeofValueSized": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprStrEncodings": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprStrOps": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FixedContents": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FixedStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FloatToI": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FloatingPoints": {
    "status": "passed",
    "elapsed": 0.0
  },
  "HelloWorld": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "IfInstances": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "if_instances_test.go:36: \n        \tError Trace:\t/tests/spec/go/if_instances_test.go:36\n        \tError:      \tExpected nil, but got: 0x0\n        \tTest:       \tTestIfInstances"
    },
    "is_kst": true
  },
  "IfStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "IfValues": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "if_values_test.go:43: \n        \tError Trace:\t/tests/spec/go/if_values_test.go:43\n        \tError:      \tExpected nil, but got: 0\n        \tTest:       \tTestIfValues\n    if_values_test.go:49: \n        \tError Trace:\t/tests/spec/go/if_values_test.go:49\n        \tError:      \tExpected nil, but got: 0\n        \tTest:       \tTestIfValues"
    },
    "is_kst": true
  },
  "Imports0": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ImportsAbs": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ImportsAbsAbs": {
    "status": "passed",
    "elapsed": 0.0
  },
  "ImportsAbsRel": {
    "status": "passed",
    "elapsed": 0.0
  },
  "ImportsCircularA": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ImportsRel1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "IndexSizes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceIoUser": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceStd": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceStdArray": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceUserArray": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Integers": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "IntegersDoubleOverflow": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "JsSignedRightShift": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "MetaTags": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "MetaXref": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "MultipleUse": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParent": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParent2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParent3": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParentFalse": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParentFalse2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParentOverride": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParentVsValueInst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavRoot": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedSameName": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedSameName2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypeParam": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypes2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypes3": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NonStandard": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "OpaqueExternalType": {
    "status": "passed",
    "elapsed": 0.0
  },
  "OpaqueExternalType02Parent": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "goroutine 135 [running]:\nruntime/debug.Stack()\n\t/usr/local/go/src/runtime/debug/stack.go:24 +0x65\nruntime/debug.PrintStack()\n\t/usr/local/go/src/runtime/debug/stack.go:16 +0x19\n_/tests/spec/go.TestOpaqueExternalType02Parent.func1()\n\t/tests/spec/go/opaque_external_type_02_parent_test.go:15 +0x3f\npanic({0x641da0, 0x867cb0})\n\t/usr/local/go/src/runtime/panic.go:884 +0x212\ntest_formats.(*OpaqueExternalType02Child).SomeMethod(...)\n\t/tests/compiled/go/src/test_formats/opaque_external_type_02_child.go:46\ntest_formats.(*OpaqueExternalType02Child_OpaqueExternalType02ChildChild).Read(0xc0001cecf0?, 0xc000019bd0?, 0x3?, 0x6766c0?)\n\t/tests/compiled/go/src/test_formats/opaque_external_type_02_child.go:69 +0x5a\ntest_formats.(*OpaqueExternalType02Child).Read(0xc000184780, 0xc000037e88?, {0x63cb80?, 0xc0000548e0?}, 0x660d40?)\n\t/tests/compiled/go/src/test_formats/opaque_external_type_02_child.go:38 +0x13e\ntest_formats.(*OpaqueExternalType02Parent_ParentObj).Read(0xc0000548e0, 0x40d4e7?, 0x28?, 0x660c80?)\n\t/tests/compiled/go/src/test_formats/opaque_external_type_02_parent.go:48 +0x85\ntest_formats.(*OpaqueExternalType02Parent).Read(0xc0001ced20, 0x17?, {0x63cb20?, 0xc0001ced20?}, 0xf?)\n\t/tests/compiled/go/src/test_formats/opaque_external_type_02_parent.go:24 +0xa5\n_/tests/spec/go.TestOpaqueExternalType02Parent(0xc0001d1520)\n\t/tests/spec/go/opaque_external_type_02_parent_test.go:25 +0x12d\ntesting.tRunner(0xc0001d1520, 0x6b9008)\n\t/usr/local/go/src/testing/testing.go:1446 +0x10b\ncreated by testing.(*T).Run\n\t/usr/local/go/src/testing/testing.go:1493 +0x35f\n    opaque_external_type_02_parent_test.go:16: unexpected panic: runtime error: invalid memory address or nil pointer dereference"
    }
  },
  "OpaqueWithParam": {
    "status": "passed",
    "elapsed": 0.0
  },
  "ParamsCallExtraParens": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ParamsCallShort": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ParamsDef": {
    "status": "passed",
    "elapsed": 0.0
  },
  "ParamsEnum": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ParamsPassArrayStr": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ParamsPassArrayUsertype": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ParamsPassBool": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ParamsPassUsertype": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "PositionAbs": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "PositionInSeq": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "position_in_seq_test.go:32: \n        \tError Trace:\t/tests/spec/go/position_in_seq_test.go:32\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{1, 2, 3})\n        \t            \tactual  : []uint8([]byte{0x1, 0x2, 0x3})\n        \tTest:       \tTestPositionInSeq"
    },
    "is_kst": true
  },
  "PositionToEnd": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCoerceBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCoerceUsertype1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCoerceUsertype2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCustom": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "process_custom_test.go:32: \n        \tError Trace:\t/tests/spec/go/process_custom_test.go:32\n        \tError:      \tNot equal: \n        \t            \texpected: []byte{0x10, 0xb3, 0x94, 0x94, 0xf4}\n        \t            \tactual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}\n        \t            \t\n        \t            \tDiff:\n        \t            \t--- Expected\n        \t            \t+++ Actual\n        \t            \t@@ -1,3 +1,3 @@\n        \t            \t ([]uint8) (len=5) {\n        \t            \t- 00000000  10 b3 94 94 f4                                    |.....|\n        \t            \t+ 00000000  09 ac 8d 8d ed                                    |.....|\n        \t            \t }\n        \tTest:       \tTestProcessCustom\n    process_custom_test.go:33: \n        \tError Trace:\t/tests/spec/go/process_custom_test.go:33\n        \tError:      \tNot equal: \n        \t            \texpected: []byte{0x5f, 0xba, 0x7b, 0x93, 0x63, 0x23, 0x5f}\n        \t            \tactual  : []byte{0xba, 0x7b, 0x93, 0x63, 0x23}\n        \t            \t\n        \t            \tDiff:\n        \t            \t--- Expected\n        \t            \t+++ Actual\n        \t            \t@@ -1,3 +1,3 @@\n        \t            \t-([]uint8) (len=7) {\n        \t            \t- 00000000  5f ba 7b 93 63 23 5f                              |_.{.c#_|\n        \t            \t+([]uint8) (len=5) {\n        \t            \t+ 00000000  ba 7b 93 63 23                                    |.{.c#|\n        \t            \t }\n        \tTest:       \tTestProcessCustom\n    process_custom_test.go:34: \n        \tError Trace:\t/tests/spec/go/process_custom_test.go:34\n        \tError:      \tNot equal: \n        \t            \texpected: []byte{0x29, 0x33, 0xb1, 0x38, 0xb1}\n        \t            \tactual  : []byte{0x2a, 0x34, 0xb2, 0x39, 0xb2}\n        \t            \t\n        \t            \tDiff:\n        \t            \t--- Expected\n        \t            \t+++ Actual\n        \t            \t@@ -1,3 +1,3 @@\n        \t            \t ([]uint8) (len=5) {\n        \t            \t- 00000000  29 33 b1 38 b1                                    |)3.8.|\n        \t            \t+ 00000000  2a 34 b2 39 b2                                    |*4.9.|\n        \t            \t }\n        \tTest:       \tTestProcessCustom"
    },
    "is_kst": true
  },
  "ProcessCustomNoArgs": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "process_custom_no_args_test.go:32: \n        \tError Trace:\t/tests/spec/go/process_custom_no_args_test.go:32\n        \tError:      \tNot equal: \n        \t            \texpected: []byte{0x5f, 0x9, 0xac, 0x8d, 0x8d, 0xed, 0x5f}\n        \t            \tactual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}\n        \t            \t\n        \t            \tDiff:\n        \t            \t--- Expected\n        \t            \t+++ Actual\n        \t            \t@@ -1,3 +1,3 @@\n        \t            \t-([]uint8) (len=7) {\n        \t            \t- 00000000  5f 09 ac 8d 8d ed 5f                              |_....._|\n        \t            \t+([]uint8) (len=5) {\n        \t            \t+ 00000000  09 ac 8d 8d ed                                    |.....|\n        \t            \t }\n        \tTest:       \tTestProcessCustomNoArgs"
    },
    "is_kst": true
  },
  "ProcessRepeatBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessRepeatUsertype": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessRotate": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessToUser": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXor4Const": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXor4Value": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXorConst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXorValue": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatEosBit": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatEosStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatEosU4": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "repeat_eos_u4_test.go:32: \n        \tError Trace:\t/tests/spec/go/repeat_eos_u4_test.go:32\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{0, 66, 66, 2069})\n        \t            \tactual  : []uint32([]uint32{0x0, 0x42, 0x42, 0x815})\n        \tTest:       \tTestRepeatEosU4"
    },
    "is_kst": true
  },
  "RepeatNStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatNStrz": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatNStrzDouble": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatUntilCalcArrayType": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatUntilComplex": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "repeat_until_complex_test.go:34: \n        \tError Trace:\t/tests/spec/go/repeat_until_complex_test.go:34\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{1, 2, 3, 4})\n        \t            \tactual  : []uint8([]byte{0x1, 0x2, 0x3, 0x4})\n        \tTest:       \tTestRepeatUntilComplex\n    repeat_until_complex_test.go:36: \n        \tError Trace:\t/tests/spec/go/repeat_until_complex_test.go:36\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{1, 2})\n        \t            \tactual  : []uint8([]byte{0x1, 0x2})\n        \tTest:       \tTestRepeatUntilComplex\n    repeat_until_complex_test.go:40: \n        \tError Trace:\t/tests/spec/go/repeat_until_complex_test.go:40\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{1, 2, 3, 4, 5, 6})\n        \t            \tactual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4, 0x5, 0x6})\n        \tTest:       \tTestRepeatUntilComplex\n    repeat_until_complex_test.go:42: \n        \tError Trace:\t/tests/spec/go/repeat_until_complex_test.go:42\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{1, 2, 3})\n        \t            \tactual  : []uint16([]uint16{0x1, 0x2, 0x3})\n        \tTest:       \tTestRepeatUntilComplex\n    repeat_until_complex_test.go:44: \n        \tError Trace:\t/tests/spec/go/repeat_until_complex_test.go:44\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{1, 2, 3, 4})\n        \t            \tactual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4})\n        \tTest:       \tTestRepeatUntilComplex\n    repeat_until_complex_test.go:46: \n        \tError Trace:\t/tests/spec/go/repeat_until_complex_test.go:46\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{102, 111, 111, 98, 97, 114, 0})\n        \t            \tactual  : []uint8([]byte{0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x0})\n        \tTest:       \tTestRepeatUntilComplex"
    },
    "is_kst": true
  },
  "RepeatUntilS4": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": "repeat_until_s4_test.go:32: \n        \tError Trace:\t/tests/spec/go/repeat_until_s4_test.go:32\n        \tError:      \tNot equal: \n        \t            \texpected: []int([]int{66, 4919, -251658241, -1})\n        \t            \tactual  : []int32([]int32{66, 4919, -251658241, -1})\n        \tTest:       \tTestRepeatUntilS4"
    },
    "is_kst": true
  },
  "RepeatUntilSized": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrEncodings": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrEncodingsDefault": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrEncodingsUtf16": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrEos": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrLiterals": {
    "status": "passed",
    "elapsed": 0.0
  },
  "StrLiterals2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrPadTerm": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrPadTermEmpty": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "SwitchElseOnly": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "SwitchIntegers": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "SwitchIntegers2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "SwitchManualEnumInvalid": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "SwitchMultiBoolOps": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TermBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TermStrz": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TermU1Val": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ToStringCustom": {
    "status": "passed",
    "elapsed": 0.0
  },
  "TsPacketHeader": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TypeIntUnaryOp": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TypeTernary": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TypeTernary2ndFalsy": {
    "status": "passed",
    "elapsed": 0.0
  },
  "TypeTernaryOpaque": {
    "status": "passed",
    "elapsed": 0.0
  },
  "UserType": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidEqStrEncodings": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailAnyofInt": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailContents": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailEqBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailEqInt": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailEqStr": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailExpr": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailInst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailMaxInt": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailMinInt": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailRangeBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailRangeFloat": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailRangeInt": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidFailRangeStr": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidLong": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidNotParsedIf": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidOptionalId": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ValidShort": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ZlibSurrounded": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ZlibWithHeader78": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  }
}