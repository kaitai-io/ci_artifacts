{
  "BcdUserTypeBe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BcdUserTypeLe": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsByteAligned": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BitsSimple": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "bits_simple_test.go:21: &lt;nil&gt;"
      ]
    },
    "is_kst": true
  },
  "BufferedStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "BytesPadTerm": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "bytes_pad_term_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x31}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x31, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=4) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 31                                       |str1|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 31 40 40 40 40  40 40 40 40 40 40 40 40  |str1@@@@@@@@@@@@|&#xA;&#x9;&#x9;            &#x9;+ 00000010  40 40 40 40                                       |@@@@|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm&#xA;bytes_pad_term_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x32, 0x66, 0x6f, 0x6f}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x32, 0x66, 0x6f, 0x6f, 0x40, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=7) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 32 66 6f 6f                              |str2foo|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 32 66 6f 6f 40  2b 2b 2b 2b 2b 2b 2b 2b  |str2foo@++++++++|&#xA;&#x9;&#x9;            &#x9;+ 00000010  2b 2b 2b 2b                                       |++++|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm&#xA;bytes_pad_term_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x2b, 0x2b, 0x2b, 0x33, 0x62, 0x61, 0x72, 0x2b, 0x2b, 0x2b}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x2b, 0x2b, 0x2b, 0x33, 0x62, 0x61, 0x72, 0x2b, 0x2b, 0x2b, 0x40, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=13) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 2b 2b 2b 33 62  61 72 2b 2b 2b           |str+++3bar+++|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 2b 2b 2b 33 62  61 72 2b 2b 2b 40 2b 2b  |str+++3bar+++@++|&#xA;&#x9;&#x9;            &#x9;+ 00000010  2b 2b 2b 2b                                       |++++|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm&#xA;bytes_pad_term_test.go:35: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:35&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x34, 0x62, 0x61, 0x7a, 0x40}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x34, 0x62, 0x61, 0x7a, 0x40, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=8) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 34 62 61 7a 40                           |str4baz@|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 34 62 61 7a 40  2e 2e 2e 2e 2e 2e 2e 2e  |str4baz@........|&#xA;&#x9;&#x9;            &#x9;+ 00000010  2e 2e 2e 2e                                       |....|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm"
      ]
    },
    "is_kst": true
  },
  "DebugArrayUser": {
    "status": "passed",
    "elapsed": 0.0
  },
  "DefaultBigEndian": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DefaultEndianMod": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "DocstringsDocref": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Docstrings": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Enum0": {
    "status": "passed",
    "elapsed": 0.0
  },
  "Enum1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumDeepLiterals": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumDeep": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumFancy": {
    "status": "passed",
    "elapsed": 0.0
  },
  "EnumIf": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumNegative": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumOfValueInst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "EnumToI": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr0": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "Expr3": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprArray": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "expr_array_test.go:29: EOF"
      ]
    },
    "is_kst": true
  },
  "ExprBytesCmp": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprEnum": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ExprIoPos": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "expr_io_pos_test.go:29: ReadBytes(-2): negative number of bytes to read"
      ]
    },
    "is_kst": true
  },
  "ExprMod": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FixedContents": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FixedStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FloatToI": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "FloatingPoints": {
    "status": "passed",
    "elapsed": 0.0
  },
  "HelloWorld": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "IfStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "IfValues": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "if_values_test.go:43: &#xA;&#x9;&#x9;Error Trace:&#x9;if_values_test.go:43&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0&#xA;&#x9;&#x9;Test:       &#x9;TestIfValues&#xA;if_values_test.go:49: &#xA;&#x9;&#x9;Error Trace:&#x9;if_values_test.go:49&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0&#xA;&#x9;&#x9;Test:       &#x9;TestIfValues"
      ]
    },
    "is_kst": true
  },
  "InstanceIoUser": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceStdArray": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceStd": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "InstanceUserArray": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "instance_user_array_test.go:37: EOF"
      ]
    },
    "is_kst": true
  },
  "Integers": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "JsSignedRightShift": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "MetaXref": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "MultipleUse": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParent2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParent3": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParentFalse2": {
    "status": "passed",
    "elapsed": 0.0
  },
  "NavParent": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavParentVsValueInst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NavRoot": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedSameName2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedSameName": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypes2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypes3": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NestedTypes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "NonStandard": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "PositionAbs": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "PositionInSeq": {
    "status": "passed",
    "elapsed": 0.0
  },
  "PositionToEnd": {
    "status": "passed",
    "elapsed": 0.01,
    "is_kst": true
  },
  "ProcessCoerceBytes": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCoerceUsertype1": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCoerceUsertype2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessCustom": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "process_custom_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x10, 0xb3, 0x94, 0x94, 0xf4}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9; ([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;- 00000000  10 b3 94 94 f4                                    |.....|&#xA;&#x9;&#x9;            &#x9;+ 00000000  09 ac 8d 8d ed                                    |.....|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom&#xA;process_custom_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x5f, 0xba, 0x7b, 0x93, 0x63, 0x23, 0x5f}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0xba, 0x7b, 0x93, 0x63, 0x23}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=7) {&#xA;&#x9;&#x9;            &#x9;- 00000000  5f ba 7b 93 63 23 5f                              |_.{.c#_|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  ba 7b 93 63 23                                    |.{.c#|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom&#xA;process_custom_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x29, 0x33, 0xb1, 0x38, 0xb1}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x2a, 0x34, 0xb2, 0x39, 0xb2}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9; ([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;- 00000000  29 33 b1 38 b1                                    |)3.8.|&#xA;&#x9;&#x9;            &#x9;+ 00000000  2a 34 b2 39 b2                                    |*4.9.|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom"
      ]
    },
    "is_kst": true
  },
  "ProcessRotate": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessToUser": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXor4Const": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXor4Value": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXorConst": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ProcessXorValue": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatEosStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatEosU4": {
    "status": "passed",
    "elapsed": 0.0
  },
  "RepeatNStruct": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "RepeatNStrzDouble": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "repeat_n_strz_double_test.go:29: EOF"
      ]
    },
    "is_kst": true
  },
  "RepeatNStrz": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "repeat_n_strz_test.go:29: EOF"
      ]
    },
    "is_kst": true
  },
  "RepeatUntilComplex": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "repeat_until_complex_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3, 4})&#xA;&#x9;&#x9;            &#x9;actual  : []uint8([]byte{0x1, 0x2, 0x3, 0x4})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:36: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:36&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2})&#xA;&#x9;&#x9;            &#x9;actual  : []uint8([]byte{0x1, 0x2})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:40: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:40&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3, 4, 5, 6})&#xA;&#x9;&#x9;            &#x9;actual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4, 0x5, 0x6})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:42: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:42&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3})&#xA;&#x9;&#x9;            &#x9;actual  : []uint16([]uint16{0x1, 0x2, 0x3})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:44: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:44&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3, 4})&#xA;&#x9;&#x9;            &#x9;actual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:46: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:46&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{102, 111, 111, 98, 97, 114, 0})&#xA;&#x9;&#x9;            &#x9;actual  : []uint8([]byte{0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x0})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex"
      ]
    },
    "is_kst": true
  },
  "RepeatUntilS4": {
    "status": "passed",
    "elapsed": 0.0
  },
  "StrEncodingsDefault": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrEncodings": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrEos": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrLiterals2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "StrPadTermEmpty": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "str_pad_term_empty_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@@@@@@@@@@@@@@@@@@@@&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-&#xA;&#x9;&#x9;            &#x9;+@@@@@@@@@@@@@@@@@@@@&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty&#xA;str_pad_term_empty_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@@@@@@@@++++++++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-&#xA;&#x9;&#x9;            &#x9;+@@@@@@@@++++++++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty&#xA;str_pad_term_empty_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@tr+++3bar+++@++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-&#xA;&#x9;&#x9;            &#x9;+@tr+++3bar+++@++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty&#xA;str_pad_term_empty_test.go:35: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:35&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;@&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@@@@@@@@............&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-@&#xA;&#x9;&#x9;            &#x9;+@@@@@@@@............&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty"
      ]
    },
    "is_kst": true
  },
  "StrPadTerm": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "str_pad_term_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str1&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str1@@@@@@@@@@@@@@@@&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str1&#xA;&#x9;&#x9;            &#x9;+str1@@@@@@@@@@@@@@@@&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm&#xA;str_pad_term_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str2foo&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str2foo@++++++++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str2foo&#xA;&#x9;&#x9;            &#x9;+str2foo@++++++++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm&#xA;str_pad_term_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str+++3bar+++&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str+++3bar+++@++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str+++3bar+++&#xA;&#x9;&#x9;            &#x9;+str+++3bar+++@++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm&#xA;str_pad_term_test.go:35: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:35&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str4baz@&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str4baz@............&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str4baz@&#xA;&#x9;&#x9;            &#x9;+str4baz@............&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm"
      ]
    },
    "is_kst": true
  },
  "SwitchIntegers2": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "SwitchIntegers": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TermBytes": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "term_bytes_test.go:29: EOF"
      ]
    },
    "is_kst": true
  },
  "TermStrz": {
    "status": "failed",
    "elapsed": 0.0,
    "failure": {
      "file_name": null,
      "line_num": null,
      "message": "Failed",
      "trace": [
        "term_strz_test.go:29: EOF"
      ]
    },
    "is_kst": true
  },
  "TypeIntUnaryOp": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "TypeTernary": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "UserType": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "ZlibWithHeader78": {
    "status": "passed",
    "elapsed": 0.0,
    "is_kst": true
  },
  "$meta": {
    "lang": "go",
    "timestamp": "2019-09-16T19:52:08Z",
    "ci": {
      "ci": "travis",
      "build_id": "585746007",
      "job_id": "585746025",
      "job_number": "218.18",
      "url": "https://travis-ci.org/kaitai-io/ci_targets/jobs/585746025"
    }
  }
}