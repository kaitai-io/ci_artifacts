<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
	<testsuite tests="90" failures="14" time="0.034" name="github.com/kaitai-io/ci_targets/tests/spec/go">
		<properties>
			<property name="go.version" value="go1.10"></property>
		</properties>
		<testcase classname="go" name="TestBcdUserTypeBe" time="0.000"></testcase>
		<testcase classname="go" name="TestBcdUserTypeLe" time="0.000"></testcase>
		<testcase classname="go" name="TestBitsByteAligned" time="0.000"></testcase>
		<testcase classname="go" name="TestBitsSimple" time="0.000">
			<failure message="Failed" type="">bits_simple_test.go:21: &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestBufferedStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestBytesPadTerm" time="0.000">
			<failure message="Failed" type="">bytes_pad_term_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x31}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x31, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=4) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 31                                       |str1|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 31 40 40 40 40  40 40 40 40 40 40 40 40  |str1@@@@@@@@@@@@|&#xA;&#x9;&#x9;            &#x9;+ 00000010  40 40 40 40                                       |@@@@|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm&#xA;bytes_pad_term_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x32, 0x66, 0x6f, 0x6f}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x32, 0x66, 0x6f, 0x6f, 0x40, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=7) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 32 66 6f 6f                              |str2foo|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 32 66 6f 6f 40  2b 2b 2b 2b 2b 2b 2b 2b  |str2foo@++++++++|&#xA;&#x9;&#x9;            &#x9;+ 00000010  2b 2b 2b 2b                                       |++++|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm&#xA;bytes_pad_term_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x2b, 0x2b, 0x2b, 0x33, 0x62, 0x61, 0x72, 0x2b, 0x2b, 0x2b}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x2b, 0x2b, 0x2b, 0x33, 0x62, 0x61, 0x72, 0x2b, 0x2b, 0x2b, 0x40, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=13) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 2b 2b 2b 33 62  61 72 2b 2b 2b           |str+++3bar+++|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 2b 2b 2b 33 62  61 72 2b 2b 2b 40 2b 2b  |str+++3bar+++@++|&#xA;&#x9;&#x9;            &#x9;+ 00000010  2b 2b 2b 2b                                       |++++|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm&#xA;bytes_pad_term_test.go:35: &#xA;&#x9;&#x9;Error Trace:&#x9;bytes_pad_term_test.go:35&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x73, 0x74, 0x72, 0x34, 0x62, 0x61, 0x7a, 0x40}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x73, 0x74, 0x72, 0x34, 0x62, 0x61, 0x7a, 0x40, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,4 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=8) {&#xA;&#x9;&#x9;            &#x9;- 00000000  73 74 72 34 62 61 7a 40                           |str4baz@|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=20) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  73 74 72 34 62 61 7a 40  2e 2e 2e 2e 2e 2e 2e 2e  |str4baz@........|&#xA;&#x9;&#x9;            &#x9;+ 00000010  2e 2e 2e 2e                                       |....|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestBytesPadTerm</failure>
		</testcase>
		<testcase classname="go" name="TestDebugArrayUser" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultBigEndian" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultEndianMod" time="0.000"></testcase>
		<testcase classname="go" name="TestDocstringsDocref" time="0.000"></testcase>
		<testcase classname="go" name="TestDocstrings" time="0.000"></testcase>
		<testcase classname="go" name="TestEnum0" time="0.000"></testcase>
		<testcase classname="go" name="TestEnum1" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumDeepLiterals" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumDeep" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumFancy" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumIf" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumNegative" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumOfValueInst" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumToI" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr0" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr1" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr2" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr3" time="0.000"></testcase>
		<testcase classname="go" name="TestExprArray" time="0.000">
			<failure message="Failed" type="">expr_array_test.go:29: EOF</failure>
		</testcase>
		<testcase classname="go" name="TestExprBytesCmp" time="0.000"></testcase>
		<testcase classname="go" name="TestExprEnum" time="0.000"></testcase>
		<testcase classname="go" name="TestExprIoPos" time="0.000">
			<failure message="Failed" type="">expr_io_pos_test.go:29: ReadBytes(-2): negative number of bytes to read</failure>
		</testcase>
		<testcase classname="go" name="TestExprMod" time="0.000"></testcase>
		<testcase classname="go" name="TestFixedContents" time="0.000"></testcase>
		<testcase classname="go" name="TestFixedStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestFloatToI" time="0.000"></testcase>
		<testcase classname="go" name="TestFloatingPoints" time="0.000"></testcase>
		<testcase classname="go" name="TestHelloWorld" time="0.000"></testcase>
		<testcase classname="go" name="TestIfStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestIfValues" time="0.000">
			<failure message="Failed" type="">if_values_test.go:43: &#xA;&#x9;&#x9;Error Trace:&#x9;if_values_test.go:43&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0&#xA;&#x9;&#x9;Test:       &#x9;TestIfValues&#xA;if_values_test.go:49: &#xA;&#x9;&#x9;Error Trace:&#x9;if_values_test.go:49&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0&#xA;&#x9;&#x9;Test:       &#x9;TestIfValues</failure>
		</testcase>
		<testcase classname="go" name="TestInstanceIoUser" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceStdArray" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceStd" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceUserArray" time="0.000">
			<failure message="Failed" type="">instance_user_array_test.go:37: EOF</failure>
		</testcase>
		<testcase classname="go" name="TestIntegers" time="0.000"></testcase>
		<testcase classname="go" name="TestJsSignedRightShift" time="0.000"></testcase>
		<testcase classname="go" name="TestMetaXref" time="0.000"></testcase>
		<testcase classname="go" name="TestMultipleUse" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParent2" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParent3" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParentFalse2" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParent" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParentVsValueInst" time="0.000"></testcase>
		<testcase classname="go" name="TestNavRoot" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedSameName2" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedSameName" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypes2" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypes3" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypes" time="0.000"></testcase>
		<testcase classname="go" name="TestNonStandard" time="0.000"></testcase>
		<testcase classname="go" name="TestPositionAbs" time="0.000"></testcase>
		<testcase classname="go" name="TestPositionInSeq" time="0.000"></testcase>
		<testcase classname="go" name="TestPositionToEnd" time="0.020"></testcase>
		<testcase classname="go" name="TestProcessCoerceBytes" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCoerceUsertype1" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCoerceUsertype2" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCustom" time="0.000">
			<failure message="Failed" type="">process_custom_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x10, 0xb3, 0x94, 0x94, 0xf4}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9; ([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;- 00000000  10 b3 94 94 f4                                    |.....|&#xA;&#x9;&#x9;            &#x9;+ 00000000  09 ac 8d 8d ed                                    |.....|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom&#xA;process_custom_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x5f, 0xba, 0x7b, 0x93, 0x63, 0x23, 0x5f}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0xba, 0x7b, 0x93, 0x63, 0x23}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=7) {&#xA;&#x9;&#x9;            &#x9;- 00000000  5f ba 7b 93 63 23 5f                              |_.{.c#_|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  ba 7b 93 63 23                                    |.{.c#|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom&#xA;process_custom_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x29, 0x33, 0xb1, 0x38, 0xb1}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x2a, 0x34, 0xb2, 0x39, 0xb2}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9; ([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;- 00000000  29 33 b1 38 b1                                    |)3.8.|&#xA;&#x9;&#x9;            &#x9;+ 00000000  2a 34 b2 39 b2                                    |*4.9.|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom</failure>
		</testcase>
		<testcase classname="go" name="TestProcessRotate" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessToUser" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXor4Const" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXor4Value" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXorConst" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXorValue" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatEosStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatEosU4" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatNStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatNStrzDouble" time="0.000">
			<failure message="Failed" type="">repeat_n_strz_double_test.go:29: EOF</failure>
		</testcase>
		<testcase classname="go" name="TestRepeatNStrz" time="0.000">
			<failure message="Failed" type="">repeat_n_strz_test.go:29: EOF</failure>
		</testcase>
		<testcase classname="go" name="TestRepeatUntilComplex" time="0.000">
			<failure message="Failed" type="">repeat_until_complex_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3, 4})&#xA;&#x9;&#x9;            &#x9;actual  : []uint8([]byte{0x1, 0x2, 0x3, 0x4})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:36: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:36&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2})&#xA;&#x9;&#x9;            &#x9;actual  : []uint8([]byte{0x1, 0x2})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:40: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:40&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3, 4, 5, 6})&#xA;&#x9;&#x9;            &#x9;actual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4, 0x5, 0x6})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:42: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:42&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3})&#xA;&#x9;&#x9;            &#x9;actual  : []uint16([]uint16{0x1, 0x2, 0x3})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:44: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:44&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{1, 2, 3, 4})&#xA;&#x9;&#x9;            &#x9;actual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex&#xA;repeat_until_complex_test.go:46: &#xA;&#x9;&#x9;Error Trace:&#x9;repeat_until_complex_test.go:46&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []int([]int{102, 111, 111, 98, 97, 114, 0})&#xA;&#x9;&#x9;            &#x9;actual  : []uint8([]byte{0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x0})&#xA;&#x9;&#x9;Test:       &#x9;TestRepeatUntilComplex</failure>
		</testcase>
		<testcase classname="go" name="TestRepeatUntilS4" time="0.000"></testcase>
		<testcase classname="go" name="TestStrEncodingsDefault" time="0.000"></testcase>
		<testcase classname="go" name="TestStrEncodings" time="0.000"></testcase>
		<testcase classname="go" name="TestStrEos" time="0.000"></testcase>
		<testcase classname="go" name="TestStrLiterals2" time="0.000"></testcase>
		<testcase classname="go" name="TestStrPadTermEmpty" time="0.000">
			<failure message="Failed" type="">str_pad_term_empty_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@@@@@@@@@@@@@@@@@@@@&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-&#xA;&#x9;&#x9;            &#x9;+@@@@@@@@@@@@@@@@@@@@&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty&#xA;str_pad_term_empty_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@@@@@@@@++++++++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-&#xA;&#x9;&#x9;            &#x9;+@@@@@@@@++++++++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty&#xA;str_pad_term_empty_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@tr+++3bar+++@++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-&#xA;&#x9;&#x9;            &#x9;+@tr+++3bar+++@++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty&#xA;str_pad_term_empty_test.go:35: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_empty_test.go:35&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;@&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;@@@@@@@@............&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-@&#xA;&#x9;&#x9;            &#x9;+@@@@@@@@............&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTermEmpty</failure>
		</testcase>
		<testcase classname="go" name="TestStrPadTerm" time="0.000">
			<failure message="Failed" type="">str_pad_term_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str1&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str1@@@@@@@@@@@@@@@@&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str1&#xA;&#x9;&#x9;            &#x9;+str1@@@@@@@@@@@@@@@@&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm&#xA;str_pad_term_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str2foo&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str2foo@++++++++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str2foo&#xA;&#x9;&#x9;            &#x9;+str2foo@++++++++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm&#xA;str_pad_term_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str+++3bar+++&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str+++3bar+++@++++++&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str+++3bar+++&#xA;&#x9;&#x9;            &#x9;+str+++3bar+++@++++++&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm&#xA;str_pad_term_test.go:35: &#xA;&#x9;&#x9;Error Trace:&#x9;str_pad_term_test.go:35&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: &#34;str4baz@&#34;&#xA;&#x9;&#x9;            &#x9;actual  : &#34;str4baz@............&#34;&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1 +1 @@&#xA;&#x9;&#x9;            &#x9;-str4baz@&#xA;&#x9;&#x9;            &#x9;+str4baz@............&#xA;&#x9;&#x9;Test:       &#x9;TestStrPadTerm</failure>
		</testcase>
		<testcase classname="go" name="TestSwitchIntegers2" time="0.000"></testcase>
		<testcase classname="go" name="TestSwitchIntegers" time="0.000"></testcase>
		<testcase classname="go" name="TestTermBytes" time="0.000">
			<failure message="Failed" type="">term_bytes_test.go:29: EOF</failure>
		</testcase>
		<testcase classname="go" name="TestTermStrz" time="0.000">
			<failure message="Failed" type="">term_strz_test.go:29: EOF</failure>
		</testcase>
		<testcase classname="go" name="TestTypeIntUnaryOp" time="0.000"></testcase>
		<testcase classname="go" name="TestTypeTernary" time="0.000"></testcase>
		<testcase classname="go" name="TestUserType" time="0.000"></testcase>
		<testcase classname="go" name="TestZlibWithHeader78" time="0.000"></testcase>
	</testsuite>
</testsuites>
