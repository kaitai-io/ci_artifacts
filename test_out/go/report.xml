<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
	<testsuite tests="162" failures="17" time="0.042" name="github.com/kaitai-io/ci_targets/tests/spec/go">
		<properties>
			<property name="go.version" value="go1.10"></property>
		</properties>
		<testcase classname="go" name="TestBcdUserTypeBe" time="0.000"></testcase>
		<testcase classname="go" name="TestBcdUserTypeLe" time="0.000"></testcase>
		<testcase classname="go" name="TestBitsByteAligned" time="0.000"></testcase>
		<testcase classname="go" name="TestBitsEnum" time="0.000"></testcase>
		<testcase classname="go" name="TestBitsSeqEndianCombo" time="0.000">
			<failure message="Failed" type="">bits_seq_endian_combo_test.go:37: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_seq_endian_combo_test.go:37&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(36)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x14)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSeqEndianCombo&#xA;bits_seq_endian_combo_test.go:38: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_seq_endian_combo_test.go:38&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(26)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0xf)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSeqEndianCombo</failure>
		</testcase>
		<testcase classname="go" name="TestBitsSimpleLe" time="0.000">
			<failure message="Failed" type="">bits_simple_le_test.go:37: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:37&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(331)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x0)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:38: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:38&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(3)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x0)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:39: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:39&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(393)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x0)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:40: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:40&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(-1)&#xA;&#x9;&#x9;            &#x9;actual  : int16(19245)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:41: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:41&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(4407632)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0xffff7b)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:42: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:42&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(760556875)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x4b434150)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:43: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:43&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int64(1099499455812)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x45442d552d)&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe&#xA;bits_simple_le_test.go:44: &#xA;&#x9;&#x9;Error Trace:&#x9;bits_simple_le_test.go:44&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: 0xffffffffffffffff&#xA;&#x9;&#x9;            &#x9;actual  : 0xffffffffffffff46&#xA;&#x9;&#x9;Test:       &#x9;TestBitsSimpleLe</failure>
		</testcase>
		<testcase classname="go" name="TestBitsSimple" time="0.000"></testcase>
		<testcase classname="go" name="TestBufferedStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestBytesPadTerm" time="0.000"></testcase>
		<testcase classname="go" name="TestCombineBool" time="0.000"></testcase>
		<testcase classname="go" name="TestCombineBytes" time="0.000"></testcase>
		<testcase classname="go" name="TestCombineStr" time="0.000"></testcase>
		<testcase classname="go" name="TestDebugArrayUser" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultBigEndian" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultBitEndianMod" time="0.000">
			<failure message="Failed" type="">default_bit_endian_mod_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;default_bit_endian_mod_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: int(8608)&#xA;&#x9;&#x9;            &#x9;actual  : uint64(0x43)&#xA;&#x9;&#x9;Test:       &#x9;TestDefaultBitEndianMod</failure>
		</testcase>
		<testcase classname="go" name="TestDefaultEndianExprException" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultEndianExprInherited" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultEndianExprIsBe" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultEndianExprIsLe" time="0.000"></testcase>
		<testcase classname="go" name="TestDefaultEndianMod" time="0.000"></testcase>
		<testcase classname="go" name="TestDocstringsDocrefMulti" time="0.000"></testcase>
		<testcase classname="go" name="TestDocstringsDocref" time="0.000"></testcase>
		<testcase classname="go" name="TestDocstrings" time="0.000"></testcase>
		<testcase classname="go" name="TestEnum0" time="0.000"></testcase>
		<testcase classname="go" name="TestEnum1" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumDeepLiterals" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumDeep" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumFancy" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumIf" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumImport" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumIntRangeS" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumIntRangeU" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumInvalid" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumLongRangeS" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumLongRangeU" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumNegative" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumOfValueInst" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumToIClassBorder1" time="0.000"></testcase>
		<testcase classname="go" name="TestEnumToI" time="0.000"></testcase>
		<testcase classname="go" name="TestEofExceptionBytes" time="0.000">
			<failure message="Failed" type="">eof_exception_bytes_test.go:31: expected kaitai.EndOfStreamError, got *errors.errorString</failure>
		</testcase>
		<testcase classname="go" name="TestEofExceptionU4" time="0.000">
			<failure message="Failed" type="">eof_exception_u4_test.go:31: expected kaitai.EndOfStreamError, got &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestEosExceptionBytes" time="0.000">
			<failure message="Failed" type="">eos_exception_bytes_test.go:31: expected kaitai.EndOfStreamError, got *errors.errorString</failure>
		</testcase>
		<testcase classname="go" name="TestEosExceptionU4" time="0.000">
			<failure message="Failed" type="">eos_exception_u4_test.go:31: expected kaitai.EndOfStreamError, got &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestExpr0" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr1" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr2" time="0.000"></testcase>
		<testcase classname="go" name="TestExpr3" time="0.000"></testcase>
		<testcase classname="go" name="TestExprArray" time="0.000"></testcase>
		<testcase classname="go" name="TestExprBits" time="0.000"></testcase>
		<testcase classname="go" name="TestExprBytesCmp" time="0.000"></testcase>
		<testcase classname="go" name="TestExprBytesOps" time="0.000"></testcase>
		<testcase classname="go" name="TestExprCalcArrayOps" time="0.000"></testcase>
		<testcase classname="go" name="TestExprEnum" time="0.000"></testcase>
		<testcase classname="go" name="TestExprIoEof" time="0.000">
			<failure message="Failed" type="">expr_io_eof_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;expr_io_eof_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0x0&#xA;&#x9;&#x9;Test:       &#x9;TestExprIoEof</failure>
		</testcase>
		<testcase classname="go" name="TestExprIoPos" time="0.000"></testcase>
		<testcase classname="go" name="TestExprMod" time="0.000"></testcase>
		<testcase classname="go" name="TestExprSizeofType0" time="0.000"></testcase>
		<testcase classname="go" name="TestExprSizeofType1" time="0.010"></testcase>
		<testcase classname="go" name="TestExprSizeofValue0" time="0.000"></testcase>
		<testcase classname="go" name="TestExprSizeofValueSized" time="0.000"></testcase>
		<testcase classname="go" name="TestExprStrOps" time="0.000"></testcase>
		<testcase classname="go" name="TestFixedContents" time="0.000"></testcase>
		<testcase classname="go" name="TestFixedStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestFloatToI" time="0.000"></testcase>
		<testcase classname="go" name="TestFloatingPoints" time="0.000"></testcase>
		<testcase classname="go" name="TestHelloWorld" time="0.000"></testcase>
		<testcase classname="go" name="TestIfInstances" time="0.000">
			<failure message="Failed" type="">if_instances_test.go:36: &#xA;&#x9;&#x9;Error Trace:&#x9;if_instances_test.go:36&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0x0&#xA;&#x9;&#x9;Test:       &#x9;TestIfInstances</failure>
		</testcase>
		<testcase classname="go" name="TestIfStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestIfValues" time="0.000">
			<failure message="Failed" type="">if_values_test.go:43: &#xA;&#x9;&#x9;Error Trace:&#x9;if_values_test.go:43&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0&#xA;&#x9;&#x9;Test:       &#x9;TestIfValues&#xA;if_values_test.go:49: &#xA;&#x9;&#x9;Error Trace:&#x9;if_values_test.go:49&#xA;&#x9;&#x9;Error:      &#x9;Expected nil, but got: 0&#xA;&#x9;&#x9;Test:       &#x9;TestIfValues</failure>
		</testcase>
		<testcase classname="go" name="TestImports0" time="0.000"></testcase>
		<testcase classname="go" name="TestImportsAbsAbs" time="0.000"></testcase>
		<testcase classname="go" name="TestImportsAbsRel" time="0.000"></testcase>
		<testcase classname="go" name="TestImportsAbs" time="0.000"></testcase>
		<testcase classname="go" name="TestImportsCircularA" time="0.000"></testcase>
		<testcase classname="go" name="TestImportsRel1" time="0.000"></testcase>
		<testcase classname="go" name="TestIndexSizes" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceIoUser" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceStdArray" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceStd" time="0.000"></testcase>
		<testcase classname="go" name="TestInstanceUserArray" time="0.000"></testcase>
		<testcase classname="go" name="TestIntegers" time="0.000"></testcase>
		<testcase classname="go" name="TestJsSignedRightShift" time="0.000"></testcase>
		<testcase classname="go" name="TestMetaTags" time="0.000"></testcase>
		<testcase classname="go" name="TestMetaXref" time="0.000"></testcase>
		<testcase classname="go" name="TestMultipleUse" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParent2" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParent3" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParentFalse2" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParentFalse" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParentOverride" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParent" time="0.000"></testcase>
		<testcase classname="go" name="TestNavParentVsValueInst" time="0.000"></testcase>
		<testcase classname="go" name="TestNavRoot" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedSameName2" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedSameName" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypeParam" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypes2" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypes3" time="0.000"></testcase>
		<testcase classname="go" name="TestNestedTypes" time="0.000"></testcase>
		<testcase classname="go" name="TestNonStandard" time="0.000"></testcase>
		<testcase classname="go" name="TestOpaqueExternalType02Parent" time="0.000">
			<failure message="Failed" type="">goroutine 119 [running]:&#xA;runtime/debug.Stack(0xc420054c10, 0xc420054c40, 0x47d073)&#xA;runtime/debug.PrintStack()&#xA;github.com/kaitai-io/ci_targets/tests/spec/go.TestOpaqueExternalType02Parent.func1(0xc4201c1ef0)&#xA;panic(0x71e5c0, 0x9704d0)&#xA;test_formats.(*OpaqueExternalType02Child).SomeMethod(...)&#xA;test_formats.(*OpaqueExternalType02Child_OpaqueExternalType02ChildChild).Read(0xc4201bbdd0, 0xc4201da720, 0xc4201d8960, 0x0, 0xc4201b96cc, 0x3)&#xA;test_formats.(*OpaqueExternalType02Child).Read(0xc4201d8960, 0xc4201da720, 0x718fa0, 0xc4201da740, 0x0, 0x74d660, 0x1)&#xA;test_formats.(*OpaqueExternalType02Parent_ParentObj).Read(0xc4201da740, 0xc4201da720, 0xc4201bbda0, 0xc4201bbda0, 0x74d5a0, 0x1)&#xA;test_formats.(*OpaqueExternalType02Parent).Read(0xc4201bbda0, 0xc4201da720, 0x718f40, 0xc4201bbda0, 0xc4201bbda0, 0x92b624, 0x46)&#xA;github.com/kaitai-io/ci_targets/tests/spec/go.TestOpaqueExternalType02Parent(0xc4201c1ef0)&#xA;testing.tRunner(0xc4201c1ef0, 0x7a0cd0)&#xA;created by testing.(*T).Run&#xA;opaque_external_type_02_parent_test.go:16: unexpected panic: runtime error: invalid memory address or nil pointer dereference</failure>
		</testcase>
		<testcase classname="go" name="TestOpaqueExternalType" time="0.000"></testcase>
		<testcase classname="go" name="TestOpaqueWithParam" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsCallExtraParens" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsCallShort" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsDef" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsEnum" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsPassArrayStr" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsPassArrayUsertype" time="0.000"></testcase>
		<testcase classname="go" name="TestParamsPassUsertype" time="0.000"></testcase>
		<testcase classname="go" name="TestPositionAbs" time="0.000"></testcase>
		<testcase classname="go" name="TestPositionInSeq" time="0.000"></testcase>
		<testcase classname="go" name="TestPositionToEnd" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCoerceBytes" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCoerceUsertype1" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCoerceUsertype2" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessCustomNoArgs" time="0.000">
			<failure message="Failed" type="">process_custom_no_args_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_no_args_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x5f, 0x9, 0xac, 0x8d, 0x8d, 0xed, 0x5f}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=7) {&#xA;&#x9;&#x9;            &#x9;- 00000000  5f 09 ac 8d 8d ed 5f                              |_....._|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  09 ac 8d 8d ed                                    |.....|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustomNoArgs</failure>
		</testcase>
		<testcase classname="go" name="TestProcessCustom" time="0.000">
			<failure message="Failed" type="">process_custom_test.go:32: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:32&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x10, 0xb3, 0x94, 0x94, 0xf4}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9; ([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;- 00000000  10 b3 94 94 f4                                    |.....|&#xA;&#x9;&#x9;            &#x9;+ 00000000  09 ac 8d 8d ed                                    |.....|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom&#xA;process_custom_test.go:33: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:33&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x5f, 0xba, 0x7b, 0x93, 0x63, 0x23, 0x5f}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0xba, 0x7b, 0x93, 0x63, 0x23}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9;-([]uint8) (len=7) {&#xA;&#x9;&#x9;            &#x9;- 00000000  5f ba 7b 93 63 23 5f                              |_.{.c#_|&#xA;&#x9;&#x9;            &#x9;+([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;+ 00000000  ba 7b 93 63 23                                    |.{.c#|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom&#xA;process_custom_test.go:34: &#xA;&#x9;&#x9;Error Trace:&#x9;process_custom_test.go:34&#xA;&#x9;&#x9;Error:      &#x9;Not equal: &#xA;&#x9;&#x9;            &#x9;expected: []byte{0x29, 0x33, 0xb1, 0x38, 0xb1}&#xA;&#x9;&#x9;            &#x9;actual  : []byte{0x2a, 0x34, 0xb2, 0x39, 0xb2}&#xA;&#x9;&#x9;            &#x9;&#xA;&#x9;&#x9;            &#x9;Diff:&#xA;&#x9;&#x9;            &#x9;--- Expected&#xA;&#x9;&#x9;            &#x9;+++ Actual&#xA;&#x9;&#x9;            &#x9;@@ -1,3 +1,3 @@&#xA;&#x9;&#x9;            &#x9; ([]uint8) (len=5) {&#xA;&#x9;&#x9;            &#x9;- 00000000  29 33 b1 38 b1                                    |)3.8.|&#xA;&#x9;&#x9;            &#x9;+ 00000000  2a 34 b2 39 b2                                    |*4.9.|&#xA;&#x9;&#x9;            &#x9; }&#xA;&#x9;&#x9;Test:       &#x9;TestProcessCustom</failure>
		</testcase>
		<testcase classname="go" name="TestProcessRepeatBytes" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessRepeatUsertype" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessRotate" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessToUser" time="0.020"></testcase>
		<testcase classname="go" name="TestProcessXor4Const" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXor4Value" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXorConst" time="0.000"></testcase>
		<testcase classname="go" name="TestProcessXorValue" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatEosBit" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatEosStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatEosU4" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatNStruct" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatNStrzDouble" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatNStrz" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatUntilComplex" time="0.000"></testcase>
		<testcase classname="go" name="TestRepeatUntilS4" time="0.000"></testcase>
		<testcase classname="go" name="TestStrEncodingsDefault" time="0.000"></testcase>
		<testcase classname="go" name="TestStrEncodings" time="0.000"></testcase>
		<testcase classname="go" name="TestStrEos" time="0.000"></testcase>
		<testcase classname="go" name="TestStrLiterals2" time="0.000"></testcase>
		<testcase classname="go" name="TestStrLiterals" time="0.000"></testcase>
		<testcase classname="go" name="TestStrPadTermEmpty" time="0.000"></testcase>
		<testcase classname="go" name="TestStrPadTerm" time="0.000"></testcase>
		<testcase classname="go" name="TestSwitchElseOnly" time="0.000"></testcase>
		<testcase classname="go" name="TestSwitchIntegers2" time="0.000"></testcase>
		<testcase classname="go" name="TestSwitchIntegers" time="0.000"></testcase>
		<testcase classname="go" name="TestSwitchManualEnumInvalid" time="0.000"></testcase>
		<testcase classname="go" name="TestTermBytes" time="0.000"></testcase>
		<testcase classname="go" name="TestTermStrz" time="0.000"></testcase>
		<testcase classname="go" name="TestTsPacketHeader" time="0.000"></testcase>
		<testcase classname="go" name="TestTypeIntUnaryOp" time="0.000"></testcase>
		<testcase classname="go" name="TestTypeTernary2ndFalsy" time="0.000"></testcase>
		<testcase classname="go" name="TestTypeTernaryOpaque" time="0.000"></testcase>
		<testcase classname="go" name="TestTypeTernary" time="0.000"></testcase>
		<testcase classname="go" name="TestUserType" time="0.000"></testcase>
		<testcase classname="go" name="TestValidFailContents" time="0.000">
			<failure message="Failed" type="">valid_fail_contents_test.go:31: expected kaitai.ValidationNotEqualError, got &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestValidFailEqBytes" time="0.000">
			<failure message="Failed" type="">valid_fail_eq_bytes_test.go:31: expected kaitai.ValidationNotEqualError, got &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestValidFailEqInt" time="0.000">
			<failure message="Failed" type="">valid_fail_eq_int_test.go:31: expected kaitai.ValidationNotEqualError, got &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestValidFailInst" time="0.000">
			<failure message="Failed" type="">valid_fail_inst_test.go:31: expected kaitai.ValidationNotEqualError, got &lt;nil&gt;</failure>
		</testcase>
		<testcase classname="go" name="TestValidLong" time="0.000"></testcase>
		<testcase classname="go" name="TestValidNotParsedIf" time="0.000"></testcase>
		<testcase classname="go" name="TestValidShort" time="0.000"></testcase>
		<testcase classname="go" name="TestZlibSurrounded" time="0.000"></testcase>
		<testcase classname="go" name="TestZlibWithHeader78" time="0.000"></testcase>
	</testsuite>
</testsuites>
