<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="197" failures="15">
	<testsuite name="_/tests/spec/go" tests="197" failures="15" errors="0" id="0" hostname="099ecea9b3f0" time="0.038" timestamp="2023-10-15T23:51:06Z">
		<testcase name="TestBcdUserTypeBe" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBcdUserTypeLe" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsByteAligned" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsEnum" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSeqEndianCombo" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsShiftByB32Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsShiftByB64Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSignedResB32Be" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSignedResB32Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSignedShiftB32Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSignedShiftB64Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSimpleLe" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsSimple" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsUnalignedB32Be" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsUnalignedB32Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsUnalignedB64Be" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBitsUnalignedB64Le" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBufferedStruct" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestBytesPadTerm" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestCombineBool" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestCombineBytes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestCombineEnum" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestCombineStr" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDebugArrayUser" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultBigEndian" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultBitEndianMod" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultEndianExprException" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultEndianExprInherited" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultEndianExprIsBe" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultEndianExprIsLe" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDefaultEndianMod" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDocstringsDocrefMulti" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDocstringsDocref" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestDocstrings" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnum0" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnum1" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumDeepLiterals" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumDeep" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumFancy" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumIf" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumImport" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumIntRangeS" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumIntRangeU" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumInvalid" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumLongRangeS" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumLongRangeU" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumNegative" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumOfValueInst" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumToIClassBorder1" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumToIInvalid" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEnumToI" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestEofExceptionBytes" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    eof_exception_bytes_test.go:31: expected kaitai.EndOfStreamError, got *errors.errorString]]></failure>
		</testcase>
		<testcase name="TestEofExceptionU4" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    eof_exception_u4_test.go:31: expected kaitai.EndOfStreamError, got <nil>]]></failure>
		</testcase>
		<testcase name="TestEosExceptionBytes" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    eos_exception_bytes_test.go:31: expected kaitai.EndOfStreamError, got *errors.errorString]]></failure>
		</testcase>
		<testcase name="TestEosExceptionU4" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    eos_exception_u4_test.go:31: expected kaitai.EndOfStreamError, got <nil>]]></failure>
		</testcase>
		<testcase name="TestExpr0" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExpr1" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExpr2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExpr3" classname="_/tests/spec/go" time="0.020"></testcase>
		<testcase name="TestExprArray" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprBits" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprBytesCmp" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprBytesNonLiteral" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprBytesOps" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprCalcArrayOps" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprEnum" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprIfIntOps" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprIntDiv" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    expr_int_div_test.go:43: 
        	Error Trace:	/tests/spec/go/expr_int_div_test.go:43
        	Error:      	Not equal: 
        	            	expected: -757
        	            	actual  : -756
        	Test:       	TestExprIntDiv
    expr_int_div_test.go:53: 
        	Error Trace:	/tests/spec/go/expr_int_div_test.go:53
        	Error:      	Not equal: 
        	            	expected: -4073
        	            	actual  : -4072
        	Test:       	TestExprIntDiv]]></failure>
		</testcase>
		<testcase name="TestExprIoEof" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    expr_io_eof_test.go:33: 
        	Error Trace:	/tests/spec/go/expr_io_eof_test.go:33
        	Error:      	Expected nil, but got: 0x0
        	Test:       	TestExprIoEof]]></failure>
		</testcase>
		<testcase name="TestExprIoPos" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprMod" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprSizeofType0" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprSizeofType1" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprSizeofValue0" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprSizeofValueSized" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprStrEncodings" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestExprStrOps" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestFixedContents" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestFixedStruct" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestFloatToI" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestFloatingPoints" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestHelloWorld" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestIfInstances" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    if_instances_test.go:36: 
        	Error Trace:	/tests/spec/go/if_instances_test.go:36
        	Error:      	Expected nil, but got: 0x0
        	Test:       	TestIfInstances]]></failure>
		</testcase>
		<testcase name="TestIfStruct" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestIfValues" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    if_values_test.go:43: 
        	Error Trace:	/tests/spec/go/if_values_test.go:43
        	Error:      	Expected nil, but got: 0
        	Test:       	TestIfValues
    if_values_test.go:49: 
        	Error Trace:	/tests/spec/go/if_values_test.go:49
        	Error:      	Expected nil, but got: 0
        	Test:       	TestIfValues]]></failure>
		</testcase>
		<testcase name="TestImports0" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestImportsAbsAbs" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestImportsAbsRel" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestImportsAbs" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestImportsCircularA" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestImportsRel1" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestIndexSizes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestInstanceIoUser" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestInstanceStdArray" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestInstanceStd" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestInstanceUserArray" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestIntegersDoubleOverflow" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestIntegers" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestJsSignedRightShift" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestMetaTags" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestMetaXref" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestMultipleUse" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParent2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParent3" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParentFalse2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParentFalse" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParentOverride" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParent" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavParentVsValueInst" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNavRoot" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNestedSameName2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNestedSameName" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNestedTypeParam" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNestedTypes2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNestedTypes3" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNestedTypes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestNonStandard" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestOpaqueExternalType02Parent" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[goroutine 135 [running]:
runtime/debug.Stack()
	/usr/local/go/src/runtime/debug/stack.go:24 +0x65
runtime/debug.PrintStack()
	/usr/local/go/src/runtime/debug/stack.go:16 +0x19
_/tests/spec/go.TestOpaqueExternalType02Parent.func1()
	/tests/spec/go/opaque_external_type_02_parent_test.go:15 +0x3f
panic({0x641da0, 0x867cb0})
	/usr/local/go/src/runtime/panic.go:884 +0x212
test_formats.(*OpaqueExternalType02Child).SomeMethod(...)
	/tests/compiled/go/src/test_formats/opaque_external_type_02_child.go:46
test_formats.(*OpaqueExternalType02Child_OpaqueExternalType02ChildChild).Read(0xc0001cecf0?, 0xc000019bd0?, 0x3?, 0x6766c0?)
	/tests/compiled/go/src/test_formats/opaque_external_type_02_child.go:69 +0x5a
test_formats.(*OpaqueExternalType02Child).Read(0xc000184780, 0xc000037e88?, {0x63cb80?, 0xc0000548e0?}, 0x660d40?)
	/tests/compiled/go/src/test_formats/opaque_external_type_02_child.go:38 +0x13e
test_formats.(*OpaqueExternalType02Parent_ParentObj).Read(0xc0000548e0, 0x40d4e7?, 0x28?, 0x660c80?)
	/tests/compiled/go/src/test_formats/opaque_external_type_02_parent.go:48 +0x85
test_formats.(*OpaqueExternalType02Parent).Read(0xc0001ced20, 0x17?, {0x63cb20?, 0xc0001ced20?}, 0xf?)
	/tests/compiled/go/src/test_formats/opaque_external_type_02_parent.go:24 +0xa5
_/tests/spec/go.TestOpaqueExternalType02Parent(0xc0001d1520)
	/tests/spec/go/opaque_external_type_02_parent_test.go:25 +0x12d
testing.tRunner(0xc0001d1520, 0x6b9008)
	/usr/local/go/src/testing/testing.go:1446 +0x10b
created by testing.(*T).Run
	/usr/local/go/src/testing/testing.go:1493 +0x35f
    opaque_external_type_02_parent_test.go:16: unexpected panic: runtime error: invalid memory address or nil pointer dereference]]></failure>
		</testcase>
		<testcase name="TestOpaqueExternalType" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestOpaqueWithParam" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsCallExtraParens" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsCallShort" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsDef" classname="_/tests/spec/go" time="0.010"></testcase>
		<testcase name="TestParamsEnum" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsPassArrayStr" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsPassArrayUsertype" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsPassBool" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestParamsPassUsertype" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestPositionAbs" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestPositionInSeq" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    position_in_seq_test.go:32: 
        	Error Trace:	/tests/spec/go/position_in_seq_test.go:32
        	Error:      	Not equal: 
        	            	expected: []int([]int{1, 2, 3})
        	            	actual  : []uint8([]byte{0x1, 0x2, 0x3})
        	Test:       	TestPositionInSeq]]></failure>
		</testcase>
		<testcase name="TestPositionToEnd" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessCoerceBytes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessCoerceUsertype1" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessCoerceUsertype2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessCustomNoArgs" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    process_custom_no_args_test.go:32: 
        	Error Trace:	/tests/spec/go/process_custom_no_args_test.go:32
        	Error:      	Not equal: 
        	            	expected: []byte{0x5f, 0x9, 0xac, 0x8d, 0x8d, 0xed, 0x5f}
        	            	actual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,3 +1,3 @@
        	            	-([]uint8) (len=7) {
        	            	- 00000000  5f 09 ac 8d 8d ed 5f                              |_....._|
        	            	+([]uint8) (len=5) {
        	            	+ 00000000  09 ac 8d 8d ed                                    |.....|
        	            	 }
        	Test:       	TestProcessCustomNoArgs]]></failure>
		</testcase>
		<testcase name="TestProcessCustom" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    process_custom_test.go:32: 
        	Error Trace:	/tests/spec/go/process_custom_test.go:32
        	Error:      	Not equal: 
        	            	expected: []byte{0x10, 0xb3, 0x94, 0x94, 0xf4}
        	            	actual  : []byte{0x9, 0xac, 0x8d, 0x8d, 0xed}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,3 +1,3 @@
        	            	 ([]uint8) (len=5) {
        	            	- 00000000  10 b3 94 94 f4                                    |.....|
        	            	+ 00000000  09 ac 8d 8d ed                                    |.....|
        	            	 }
        	Test:       	TestProcessCustom
    process_custom_test.go:33: 
        	Error Trace:	/tests/spec/go/process_custom_test.go:33
        	Error:      	Not equal: 
        	            	expected: []byte{0x5f, 0xba, 0x7b, 0x93, 0x63, 0x23, 0x5f}
        	            	actual  : []byte{0xba, 0x7b, 0x93, 0x63, 0x23}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,3 +1,3 @@
        	            	-([]uint8) (len=7) {
        	            	- 00000000  5f ba 7b 93 63 23 5f                              |_.{.c#_|
        	            	+([]uint8) (len=5) {
        	            	+ 00000000  ba 7b 93 63 23                                    |.{.c#|
        	            	 }
        	Test:       	TestProcessCustom
    process_custom_test.go:34: 
        	Error Trace:	/tests/spec/go/process_custom_test.go:34
        	Error:      	Not equal: 
        	            	expected: []byte{0x29, 0x33, 0xb1, 0x38, 0xb1}
        	            	actual  : []byte{0x2a, 0x34, 0xb2, 0x39, 0xb2}
        	            	
        	            	Diff:
        	            	--- Expected
        	            	+++ Actual
        	            	@@ -1,3 +1,3 @@
        	            	 ([]uint8) (len=5) {
        	            	- 00000000  29 33 b1 38 b1                                    |)3.8.|
        	            	+ 00000000  2a 34 b2 39 b2                                    |*4.9.|
        	            	 }
        	Test:       	TestProcessCustom]]></failure>
		</testcase>
		<testcase name="TestProcessRepeatBytes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessRepeatUsertype" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessRotate" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessToUser" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessXor4Const" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessXor4Value" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessXorConst" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestProcessXorValue" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatEosBit" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatEosStruct" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatEosU4" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    repeat_eos_u4_test.go:32: 
        	Error Trace:	/tests/spec/go/repeat_eos_u4_test.go:32
        	Error:      	Not equal: 
        	            	expected: []int([]int{0, 66, 66, 2069})
        	            	actual  : []uint32([]uint32{0x0, 0x42, 0x42, 0x815})
        	Test:       	TestRepeatEosU4]]></failure>
		</testcase>
		<testcase name="TestRepeatNStruct" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatNStrzDouble" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatNStrz" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatUntilCalcArrayType" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestRepeatUntilComplex" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    repeat_until_complex_test.go:34: 
        	Error Trace:	/tests/spec/go/repeat_until_complex_test.go:34
        	Error:      	Not equal: 
        	            	expected: []int([]int{1, 2, 3, 4})
        	            	actual  : []uint8([]byte{0x1, 0x2, 0x3, 0x4})
        	Test:       	TestRepeatUntilComplex
    repeat_until_complex_test.go:36: 
        	Error Trace:	/tests/spec/go/repeat_until_complex_test.go:36
        	Error:      	Not equal: 
        	            	expected: []int([]int{1, 2})
        	            	actual  : []uint8([]byte{0x1, 0x2})
        	Test:       	TestRepeatUntilComplex
    repeat_until_complex_test.go:40: 
        	Error Trace:	/tests/spec/go/repeat_until_complex_test.go:40
        	Error:      	Not equal: 
        	            	expected: []int([]int{1, 2, 3, 4, 5, 6})
        	            	actual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4, 0x5, 0x6})
        	Test:       	TestRepeatUntilComplex
    repeat_until_complex_test.go:42: 
        	Error Trace:	/tests/spec/go/repeat_until_complex_test.go:42
        	Error:      	Not equal: 
        	            	expected: []int([]int{1, 2, 3})
        	            	actual  : []uint16([]uint16{0x1, 0x2, 0x3})
        	Test:       	TestRepeatUntilComplex
    repeat_until_complex_test.go:44: 
        	Error Trace:	/tests/spec/go/repeat_until_complex_test.go:44
        	Error:      	Not equal: 
        	            	expected: []int([]int{1, 2, 3, 4})
        	            	actual  : []uint16([]uint16{0x1, 0x2, 0x3, 0x4})
        	Test:       	TestRepeatUntilComplex
    repeat_until_complex_test.go:46: 
        	Error Trace:	/tests/spec/go/repeat_until_complex_test.go:46
        	Error:      	Not equal: 
        	            	expected: []int([]int{102, 111, 111, 98, 97, 114, 0})
        	            	actual  : []uint8([]byte{0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x0})
        	Test:       	TestRepeatUntilComplex]]></failure>
		</testcase>
		<testcase name="TestRepeatUntilS4" classname="_/tests/spec/go" time="0.000">
			<failure message="Failed"><![CDATA[    repeat_until_s4_test.go:32: 
        	Error Trace:	/tests/spec/go/repeat_until_s4_test.go:32
        	Error:      	Not equal: 
        	            	expected: []int([]int{66, 4919, -251658241, -1})
        	            	actual  : []int32([]int32{66, 4919, -251658241, -1})
        	Test:       	TestRepeatUntilS4]]></failure>
		</testcase>
		<testcase name="TestRepeatUntilSized" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrEncodingsDefault" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrEncodings" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrEncodingsUtf16" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrEos" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrLiterals2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrLiterals" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrPadTermEmpty" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestStrPadTerm" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestSwitchElseOnly" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestSwitchIntegers2" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestSwitchIntegers" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestSwitchManualEnumInvalid" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestSwitchMultiBoolOps" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTermBytes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTermStrz" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTermU1Val" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestToStringCustom" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTsPacketHeader" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTypeIntUnaryOp" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTypeTernary2ndFalsy" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTypeTernaryOpaque" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestTypeTernary" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestUserType" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidEqStrEncodings" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailAnyofInt" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailContents" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailEqBytes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailEqInt" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailEqStr" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailExpr" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailInst" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailMaxInt" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailMinInt" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailRangeBytes" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailRangeFloat" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailRangeInt" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidFailRangeStr" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidLong" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidNotParsedIf" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidOptionalId" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestValidShort" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestZlibSurrounded" classname="_/tests/spec/go" time="0.000"></testcase>
		<testcase name="TestZlibWithHeader78" classname="_/tests/spec/go" time="0.000"></testcase>
	</testsuite>
</testsuites>
