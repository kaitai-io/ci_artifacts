<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="LuaUnit" id="00001" package="" hostname="localhost" tests="133" timestamp="2019-03-11T22:33:35" time="0.008" errors="0" failures="2">
        <properties>
            <property name="Lua Version" value="Lua 5.3"/>
            <property name="LuaUnit Version" value="3.3"/>
        </properties>
        <testcase classname="TestBcdUserTypeBe" name="TestBcdUserTypeBe.test_bcd_user_type_be" time="0.000">
        </testcase>
        <testcase classname="TestBcdUserTypeLe" name="TestBcdUserTypeLe.test_bcd_user_type_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsByteAligned" name="TestBitsByteAligned.test_bits_byte_aligned" time="0.000">
        </testcase>
        <testcase classname="TestBitsEnum" name="TestBitsEnum.test_bits_enum" time="0.000">
        </testcase>
        <testcase classname="TestBitsSimple" name="TestBitsSimple.test_bits_simple" time="0.000">
        </testcase>
        <testcase classname="TestBufferedStruct" name="TestBufferedStruct.test_buffered_struct" time="0.000">
        </testcase>
        <testcase classname="TestBytesPadTerm" name="TestBytesPadTerm.test_bytes_pad_term" time="0.000">
        </testcase>
        <testcase classname="TestCastToImported" name="TestCastToImported.test_cast_to_imported" time="0.000">
        </testcase>
        <testcase classname="TestCastToTop" name="TestCastToTop.test_cast_to_top" time="0.000">
        </testcase>
        <testcase classname="TestDebug0" name="TestDebug0.test_debug_0" time="0.000">
        </testcase>
        <testcase classname="TestDebugEnumName" name="TestDebugEnumName.test_debug_enum_name" time="0.000">
        </testcase>
        <testcase classname="TestDefaultBigEndian" name="TestDefaultBigEndian.test_default_big_endian" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprException" name="TestDefaultEndianExprException.test_default_endian_expr_exception" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprInherited" name="TestDefaultEndianExprInherited.test_default_endian_expr_inherited" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprIsBe" name="TestDefaultEndianExprIsBe.test_default_endian_expr_is_be" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprIsLe" name="TestDefaultEndianExprIsLe.test_default_endian_expr_is_le" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianMod" name="TestDefaultEndianMod.test_default_endian_mod" time="0.000">
        </testcase>
        <testcase classname="TestDocstrings" name="TestDocstrings.test_docstrings" time="0.000">
        </testcase>
        <testcase classname="TestDocstringsDocref" name="TestDocstringsDocref.test_docstrings_docref" time="0.000">
        </testcase>
        <testcase classname="TestEnum0" name="TestEnum0.test_enum_0" time="0.000">
        </testcase>
        <testcase classname="TestEnum1" name="TestEnum1.test_enum_1" time="0.000">
        </testcase>
        <testcase classname="TestEnumFancy" name="TestEnumFancy.test_enum_fancy" time="0.000">
        </testcase>
        <testcase classname="TestEnumForUnknownId" name="TestEnumForUnknownId.test_enum_for_unknown_id" time="0.000">
        </testcase>
        <testcase classname="TestEnumIf" name="TestEnumIf.test_enum_if" time="0.000">
        </testcase>
        <testcase classname="TestEnumNegative" name="TestEnumNegative.test_enum_negative" time="0.000">
        </testcase>
        <testcase classname="TestEnumOfValueInst" name="TestEnumOfValueInst.test_enum_of_value_inst" time="0.000">
        </testcase>
        <testcase classname="TestEnumToI" name="TestEnumToI.test_enum_to_i" time="0.000">
        </testcase>
        <testcase classname="TestEofExceptionBytes" name="TestEofExceptionBytes.test_eof_exception_bytes" time="0.000">
        </testcase>
        <testcase classname="TestEofExceptionU4" name="TestEofExceptionU4.test_eof_exception_u4" time="0.000">
        </testcase>
        <testcase classname="TestExpr0" name="TestExpr0.test_expr_0" time="0.000">
        </testcase>
        <testcase classname="TestExpr1" name="TestExpr1.test_expr_1" time="0.000">
        </testcase>
        <testcase classname="TestExpr2" name="TestExpr2.test_expr_2" time="0.000">
        </testcase>
        <testcase classname="TestExpr3" name="TestExpr3.test_expr_3" time="0.000">
        </testcase>
        <testcase classname="TestExprArray" name="TestExprArray.test_expr_array" time="0.000">
        </testcase>
        <testcase classname="TestExprBytesCmp" name="TestExprBytesCmp.test_expr_bytes_cmp" time="0.000">
        </testcase>
        <testcase classname="TestExprEnum" name="TestExprEnum.test_expr_enum" time="0.000">
        </testcase>
        <testcase classname="TestExprIoEof" name="TestExprIoEof.test_expr_io_eof" time="0.000">
        </testcase>
        <testcase classname="TestExprIoPos" name="TestExprIoPos.test_expr_io_pos" time="0.000">
        </testcase>
        <testcase classname="TestExprMod" name="TestExprMod.test_expr_mod" time="0.000">
        </testcase>
        <testcase classname="TestFixedContents" name="TestFixedContents.test_fixed_contents" time="0.000">
        </testcase>
        <testcase classname="TestFixedStruct" name="TestFixedStruct.test_fixed_struct" time="0.001">
            <failure type="spec/lua/test_fixed_struct.lua:13: expected: 1.844674407371e+19, actual: -1">
                <![CDATA[stack traceback:
	spec/lua/test_fixed_struct.lua:13: in upvalue 'TestFixedStruct.test_fixed_struct']]></failure>
        </testcase>
        <testcase classname="TestFloatToI" name="TestFloatToI.test_float_to_i" time="0.000">
        </testcase>
        <testcase classname="TestFloatingPoints" name="TestFloatingPoints.test_floating_points" time="0.000">
        </testcase>
        <testcase classname="TestHelloWorld" name="TestHelloWorld.test_hello_world" time="0.000">
        </testcase>
        <testcase classname="TestIfInstances" name="TestIfInstances.test_if_instances" time="0.000">
        </testcase>
        <testcase classname="TestIfStruct" name="TestIfStruct.test_if_struct" time="0.000">
        </testcase>
        <testcase classname="TestIfValues" name="TestIfValues.test_if_values" time="0.000">
        </testcase>
        <testcase classname="TestImports0" name="TestImports0.test_imports0" time="0.000">
        </testcase>
        <testcase classname="TestImportsAbs" name="TestImportsAbs.test_import_abs" time="0.000">
        </testcase>
        <testcase classname="TestImportsAbsAbs" name="TestImportsAbsAbs.test_imports_abs_abs" time="0.000">
        </testcase>
        <testcase classname="TestImportsAbsRel" name="TestImportsAbsRel.test_imports_abs_rel" time="0.000">
        </testcase>
        <testcase classname="TestImportsRel1" name="TestImportsRel1.test_imports_rel1" time="0.000">
        </testcase>
        <testcase classname="TestIndexSizes" name="TestIndexSizes.test_index_sizes" time="0.000">
        </testcase>
        <testcase classname="TestIndexToParamEos" name="TestIndexToParamEos.test_index_to_param_eos" time="0.000">
        </testcase>
        <testcase classname="TestIndexToParamExpr" name="TestIndexToParamExpr.test_index_to_param_expr" time="0.000">
        </testcase>
        <testcase classname="TestIndexToParamUntil" name="TestIndexToParamUntil.test_index_to_param_until" time="0.000">
        </testcase>
        <testcase classname="TestInstanceIoUser" name="TestInstanceIoUser.test_instance_io_user" time="0.000">
        </testcase>
        <testcase classname="TestInstanceStd" name="TestInstanceStd.test_instance_std" time="0.000">
        </testcase>
        <testcase classname="TestInstanceStdArray" name="TestInstanceStdArray.test_instance_std_array" time="0.000">
        </testcase>
        <testcase classname="TestInstanceUserArray" name="TestInstanceUserArray.test_instance_user_array" time="0.000">
        </testcase>
        <testcase classname="TestJsSignedRightShift" name="TestJsSignedRightShift.test_js_signed_right_shift" time="0.000">
        </testcase>
        <testcase classname="TestMetaXref" name="TestMetaXref.test_meta_xref" time="0.000">
        </testcase>
        <testcase classname="TestMultipleUse" name="TestMultipleUse.test_multiple_use" time="0.000">
        </testcase>
        <testcase classname="TestNavParent" name="TestNavParent.test_nav_parent" time="0.000">
        </testcase>
        <testcase classname="TestNavParent2" name="TestNavParent2.test_nav_parent2" time="0.000">
        </testcase>
        <testcase classname="TestNavParent3" name="TestNavParent3.test_nav_parent3" time="0.000">
        </testcase>
        <testcase classname="TestNavParentFalse" name="TestNavParentFalse.test_nav_parent_false" time="0.000">
        </testcase>
        <testcase classname="TestNavParentFalse2" name="TestNavParentFalse2.test_nav_parent_false2" time="0.000">
        </testcase>
        <testcase classname="TestNavParentOverride" name="TestNavParentOverride.test_nav_parent_override" time="0.000">
        </testcase>
        <testcase classname="TestNavParentSwitch" name="TestNavParentSwitch.test_nav_parent_switch" time="0.000">
        </testcase>
        <testcase classname="TestNavParentVsValueInst" name="TestNavParentVsValueInst.test_nav_parent_vs_value_inst" time="0.000">
        </testcase>
        <testcase classname="TestNavRoot" name="TestNavRoot.test_nav_root" time="0.000">
        </testcase>
        <testcase classname="TestNestedSameName" name="TestNestedSameName.test_nested_same_name" time="0.000">
        </testcase>
        <testcase classname="TestNestedSameName2" name="TestNestedSameName2.test_nested_same_name2" time="0.000">
        </testcase>
        <testcase classname="TestNestedTypes" name="TestNestedTypes.test_nested_types" time="0.000">
        </testcase>
        <testcase classname="TestNestedTypes2" name="TestNestedTypes2.test_nested_types2" time="0.000">
        </testcase>
        <testcase classname="TestNonStandard" name="TestNonStandard.test_non_standard" time="0.000">
        </testcase>
        <testcase classname="TestOpaqueExternalType" name="TestOpaqueExternalType.test_opaque_external_type" time="0.000">
        </testcase>
        <testcase classname="TestOpaqueExternalType02Parent" name="TestOpaqueExternalType02Parent.test_opaque_external_type_02_parent" time="0.000">
        </testcase>
        <testcase classname="TestOpaqueWithParam" name="TestOpaqueWithParam.test_opaque_with_param" time="0.000">
        </testcase>
        <testcase classname="TestOptionalId" name="TestOptionalId.test_optional_id" time="0.000">
        </testcase>
        <testcase classname="TestParamsCallShort" name="TestParamsCallShort.test_params_call_short" time="0.000">
        </testcase>
        <testcase classname="TestParamsDef" name="TestParamsDef.test_params_def" time="0.000">
        </testcase>
        <testcase classname="TestPositionAbs" name="TestPositionAbs.test_position_abs" time="0.000">
        </testcase>
        <testcase classname="TestPositionInSeq" name="TestPositionInSeq.test_position_in_seq" time="0.000">
        </testcase>
        <testcase classname="TestPositionToEnd" name="TestPositionToEnd.test_position_to_end" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceBytes" name="TestProcessCoerceBytes.test_process_coerce_bytes" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceSwitch" name="TestProcessCoerceSwitch.test_process_coerce_switch" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceUsertype1" name="TestProcessCoerceUsertype1.test_process_coerce_usertype1" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceUsertype2" name="TestProcessCoerceUsertype2.test_process_coerce_usertype2" time="0.000">
        </testcase>
        <testcase classname="TestProcessCustom" name="TestProcessCustom.test_process_custom" time="0.000">
        </testcase>
        <testcase classname="TestProcessRotate" name="TestProcessRotate.test_process_rotate" time="0.000">
        </testcase>
        <testcase classname="TestProcessToUser" name="TestProcessToUser.test_process_to_user" time="0.000">
        </testcase>
        <testcase classname="TestProcessXor4Const" name="TestProcessXor4Const.test_process_xor4_const" time="0.000">
        </testcase>
        <testcase classname="TestProcessXor4Value" name="TestProcessXor4Value.test_process_xor4_value" time="0.000">
        </testcase>
        <testcase classname="TestProcessXorConst" name="TestProcessXorConst.test_process_xor_const" time="0.000">
        </testcase>
        <testcase classname="TestProcessXorValue" name="TestProcessXorValue.test_process_xor_value" time="0.000">
        </testcase>
        <testcase classname="TestRecursiveOne" name="TestRecursiveOne.test_recursive_one" time="0.000">
        </testcase>
        <testcase classname="TestRepeatEosStruct" name="TestRepeatEosStruct.test_repeat_eos_struct" time="0.000">
        </testcase>
        <testcase classname="TestRepeatEosU4" name="TestRepeatEosU4.test_repeat_eos_u4" time="0.000">
        </testcase>
        <testcase classname="TestRepeatNStruct" name="TestRepeatNStruct.test_repeat_n_struct" time="0.000">
        </testcase>
        <testcase classname="TestRepeatNStrz" name="TestRepeatNStrz.test_repeat_n_strz" time="0.000">
        </testcase>
        <testcase classname="TestRepeatNStrzDouble" name="TestRepeatNStrzDouble.test_repeat_n_strz_double" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilComplex" name="TestRepeatUntilComplex.test_repeat_until_complex" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilS4" name="TestRepeatUntilS4.test_repeat_until_s4" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilSized" name="TestRepeatUntilSized.test_repeat_until_sized" time="0.000">
        </testcase>
        <testcase classname="TestStrEos" name="TestStrEos.test_str_eos" time="0.000">
        </testcase>
        <testcase classname="TestStrLiterals" name="TestStrLiterals.test_str_literals" time="0.000">
        </testcase>
        <testcase classname="TestStrLiterals2" name="TestStrLiterals2.test_str_literals2" time="0.000">
        </testcase>
        <testcase classname="TestStrPadTerm" name="TestStrPadTerm.test_str_pad_term" time="0.000">
        </testcase>
        <testcase classname="TestStrPadTermEmpty" name="TestStrPadTermEmpty.test_str_pad_term_empty" time="0.000">
        </testcase>
        <testcase classname="TestSwitchBytearray" name="TestSwitchBytearray.test_switch_bytearray" time="0.000">
        </testcase>
        <testcase classname="TestSwitchCast" name="TestSwitchCast.test_switch_cast" time="0.000">
        </testcase>
        <testcase classname="TestSwitchIntegers" name="TestSwitchIntegers.test_switch_integers" time="0.000">
        </testcase>
        <testcase classname="TestSwitchIntegers2" name="TestSwitchIntegers2.test_switch_integers2" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualEnum" name="TestSwitchManualEnum.test_switch_manual_enum" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualInt" name="TestSwitchManualInt.test_switch_manual_int" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntElse" name="TestSwitchManualIntElse.test_switch_manual_int_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntSize" name="TestSwitchManualIntSize.test_switch_manual_int_size" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntSizeElse" name="TestSwitchManualIntSizeElse.test_switch_manual_int_size_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntSizeEos" name="TestSwitchManualIntSizeEos.test_switch_manual_int_size_eos" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualStr" name="TestSwitchManualStr.test_switch_manual_str" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualStrElse" name="TestSwitchManualStrElse.test_switch_manual_str_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchMultiBoolOps" name="TestSwitchMultiBoolOps.test_switch_multi_bool_ops" time="0.000">
        </testcase>
        <testcase classname="TestSwitchRepeatExpr" name="TestSwitchRepeatExpr.test_switch_repeat_expr" time="0.000">
        </testcase>
        <testcase classname="TestTermBytes" name="TestTermBytes.test_term_bytes" time="0.000">
        </testcase>
        <testcase classname="TestTermStrz" name="TestTermStrz.test_term_strz" time="0.000">
        </testcase>
        <testcase classname="TestTsPacketHeader" name="TestTsPacketHeader.test_ts_packet_header" time="0.000">
        </testcase>
        <testcase classname="TestTypeIntUnaryOp" name="TestTypeIntUnaryOp.test_type_int_unary_op" time="0.000">
        </testcase>
        <testcase classname="TestTypeTernary" name="TestTypeTernary.test_type_ternary" time="0.000">
        </testcase>
        <testcase classname="TestTypeTernaryOpaque" name="TestTypeTernaryOpaque.test_type_ternary_opaque" time="0.000">
        </testcase>
        <testcase classname="TestUserType" name="TestUserType.test_user_type" time="0.000">
        </testcase>
        <testcase classname="TestYamlInts" name="TestYamlInts.test_yaml_ints" time="0.001">
            <failure type="spec/lua/test_yaml_ints.lua:12: expected: -1, actual: 1.844674407371e+19">
                <![CDATA[stack traceback:
	spec/lua/test_yaml_ints.lua:12: in upvalue 'TestYamlInts.test_yaml_ints']]></failure>
        </testcase>
    <system-out/>
    <system-err/>
    </testsuite>
</testsuites>
