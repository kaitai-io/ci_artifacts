<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
    <testsuite name="LuaUnit" id="00001" package="" hostname="localhost" tests="228" timestamp="2022-03-19T21:43:31" time="0.082" errors="5" failures="6" skipped="0">
        <properties>
            <property name="Lua Version" value="Lua 5.3"/>
            <property name="LuaUnit Version" value="3.4"/>
        </properties>
        <testcase classname="TestBcdUserTypeBe" name="TestBcdUserTypeBe.test_bcd_user_type_be" time="0.000">
        </testcase>
        <testcase classname="TestBcdUserTypeLe" name="TestBcdUserTypeLe.test_bcd_user_type_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsByteAligned" name="TestBitsByteAligned.test_bits_byte_aligned" time="0.000">
        </testcase>
        <testcase classname="TestBitsEnum" name="TestBitsEnum.test_bits_enum" time="0.000">
        </testcase>
        <testcase classname="TestBitsSeqEndianCombo" name="TestBitsSeqEndianCombo.test_bits_seq_endian_combo" time="0.000">
        </testcase>
        <testcase classname="TestBitsShiftByB32Le" name="TestBitsShiftByB32Le.test_bits_shift_by_b32_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsShiftByB64Le" name="TestBitsShiftByB64Le.test_bits_shift_by_b64_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsSignedResB32Be" name="TestBitsSignedResB32Be.test_bits_signed_res_b32_be" time="0.000">
        </testcase>
        <testcase classname="TestBitsSignedResB32Le" name="TestBitsSignedResB32Le.test_bits_signed_res_b32_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsSignedShiftB32Le" name="TestBitsSignedShiftB32Le.test_bits_signed_shift_b32_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsSignedShiftB64Le" name="TestBitsSignedShiftB64Le.test_bits_signed_shift_b64_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsSimple" name="TestBitsSimple.test_bits_simple" time="0.000">
        </testcase>
        <testcase classname="TestBitsSimpleLe" name="TestBitsSimpleLe.test_bits_simple_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsUnalignedB32Be" name="TestBitsUnalignedB32Be.test_bits_unaligned_b32_be" time="0.000">
        </testcase>
        <testcase classname="TestBitsUnalignedB32Le" name="TestBitsUnalignedB32Le.test_bits_unaligned_b32_le" time="0.000">
        </testcase>
        <testcase classname="TestBitsUnalignedB64Be" name="TestBitsUnalignedB64Be.test_bits_unaligned_b64_be" time="0.000">
        </testcase>
        <testcase classname="TestBitsUnalignedB64Le" name="TestBitsUnalignedB64Le.test_bits_unaligned_b64_le" time="0.000">
        </testcase>
        <testcase classname="TestBufferedStruct" name="TestBufferedStruct.test_buffered_struct" time="0.000">
        </testcase>
        <testcase classname="TestBytesPadTerm" name="TestBytesPadTerm.test_bytes_pad_term" time="0.000">
        </testcase>
        <testcase classname="TestCastNested" name="TestCastNested.test_cast_nested" time="0.000">
        </testcase>
        <testcase classname="TestCastToImported" name="TestCastToImported.test_cast_to_imported" time="0.000">
        </testcase>
        <testcase classname="TestCastToTop" name="TestCastToTop.test_cast_to_top" time="0.000">
        </testcase>
        <testcase classname="TestCombineBool" name="TestCombineBool.test_combine_bool" time="0.000">
        </testcase>
        <testcase classname="TestCombineBytes" name="TestCombineBytes.test_combine_bytes" time="0.000">
        </testcase>
        <testcase classname="TestCombineEnum" name="TestCombineEnum.test_combine_enum" time="0.000">
        </testcase>
        <testcase classname="TestCombineStr" name="TestCombineStr.test_combine_str" time="0.000">
        </testcase>
        <testcase classname="TestDebug0" name="TestDebug0.test_debug_0" time="0.000">
        </testcase>
        <testcase classname="TestDebugEnumName" name="TestDebugEnumName.test_debug_enum_name" time="0.000">
        </testcase>
        <testcase classname="TestDebugSwitchUser" name="TestDebugSwitchUser.test_debug_switch_user" time="0.000">
        </testcase>
        <testcase classname="TestDefaultBigEndian" name="TestDefaultBigEndian.test_default_big_endian" time="0.000">
        </testcase>
        <testcase classname="TestDefaultBitEndianMod" name="TestDefaultBitEndianMod.test_default_bit_endian_mod" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprException" name="TestDefaultEndianExprException.test_default_endian_expr_exception" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprInherited" name="TestDefaultEndianExprInherited.test_default_endian_expr_inherited" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprIsBe" name="TestDefaultEndianExprIsBe.test_default_endian_expr_is_be" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianExprIsLe" name="TestDefaultEndianExprIsLe.test_default_endian_expr_is_le" time="0.000">
        </testcase>
        <testcase classname="TestDefaultEndianMod" name="TestDefaultEndianMod.test_default_endian_mod" time="0.000">
        </testcase>
        <testcase classname="TestDocstrings" name="TestDocstrings.test_docstrings" time="0.000">
        </testcase>
        <testcase classname="TestDocstringsDocref" name="TestDocstringsDocref.test_docstrings_docref" time="0.000">
        </testcase>
        <testcase classname="TestDocstringsDocrefMulti" name="TestDocstringsDocrefMulti.test_docstrings_docref_multi" time="0.000">
        </testcase>
        <testcase classname="TestEnum0" name="TestEnum0.test_enum_0" time="0.000">
        </testcase>
        <testcase classname="TestEnum1" name="TestEnum1.test_enum_1" time="0.000">
        </testcase>
        <testcase classname="TestEnumDeep" name="TestEnumDeep.test_enum_deep" time="0.000">
        </testcase>
        <testcase classname="TestEnumDeepLiterals" name="TestEnumDeepLiterals.test_enum_deep_literals" time="0.000">
        </testcase>
        <testcase classname="TestEnumFancy" name="TestEnumFancy.test_enum_fancy" time="0.000">
        </testcase>
        <testcase classname="TestEnumForUnknownId" name="TestEnumForUnknownId.test_enum_for_unknown_id" time="0.000">
        </testcase>
        <testcase classname="TestEnumIf" name="TestEnumIf.test_enum_if" time="0.000">
        </testcase>
        <testcase classname="TestEnumImport" name="TestEnumImport.test_enum_import" time="0.000">
        </testcase>
        <testcase classname="TestEnumIntRangeS" name="TestEnumIntRangeS.test_enum_int_range_s" time="0.000">
        </testcase>
        <testcase classname="TestEnumIntRangeU" name="TestEnumIntRangeU.test_enum_int_range_u" time="0.000">
        </testcase>
        <testcase classname="TestEnumInvalid" name="TestEnumInvalid.test_enum_invalid" time="0.000">
        </testcase>
        <testcase classname="TestEnumLongRangeS" name="TestEnumLongRangeS.test_enum_long_range_s" time="0.000">
        </testcase>
        <testcase classname="TestEnumLongRangeU" name="TestEnumLongRangeU.test_enum_long_range_u" time="0.000">
        </testcase>
        <testcase classname="TestEnumNegative" name="TestEnumNegative.test_enum_negative" time="0.000">
        </testcase>
        <testcase classname="TestEnumOfValueInst" name="TestEnumOfValueInst.test_enum_of_value_inst" time="0.000">
        </testcase>
        <testcase classname="TestEnumToI" name="TestEnumToI.test_enum_to_i" time="0.000">
        </testcase>
        <testcase classname="TestEnumToIClassBorder1" name="TestEnumToIClassBorder1.test_enum_to_i_class_border_1" time="0.002">
            <error type="compiled/lua/enum_to_i_class_border_2.lua:27: attempt to index a nil value (field &apos;parent&apos;)">
                <![CDATA[stack traceback:
	compiled/lua/enum_to_i_class_border_2.lua:27: in function <compiled/lua/enum_to_i_class_border_2.lua:22>
	(...tail calls...)
	spec/lua/test_enum_to_i_class_border_1.lua:14: in upvalue 'TestEnumToIClassBorder1.test_enum_to_i_class_border_1']]></error>
        </testcase>
        <testcase classname="TestEofExceptionBytes" name="TestEofExceptionBytes.test_eof_exception_bytes" time="0.000">
        </testcase>
        <testcase classname="TestEofExceptionU4" name="TestEofExceptionU4.test_eof_exception_u4" time="0.000">
        </testcase>
        <testcase classname="TestEosExceptionBytes" name="TestEosExceptionBytes.test_eos_exception_bytes" time="0.000">
        </testcase>
        <testcase classname="TestEosExceptionU4" name="TestEosExceptionU4.test_eos_exception_u4" time="0.000">
        </testcase>
        <testcase classname="TestExpr0" name="TestExpr0.test_expr_0" time="0.000">
        </testcase>
        <testcase classname="TestExpr1" name="TestExpr1.test_expr_1" time="0.000">
        </testcase>
        <testcase classname="TestExpr2" name="TestExpr2.test_expr_2" time="0.000">
        </testcase>
        <testcase classname="TestExpr3" name="TestExpr3.test_expr_3" time="0.000">
        </testcase>
        <testcase classname="TestExprArray" name="TestExprArray.test_expr_array" time="0.000">
        </testcase>
        <testcase classname="TestExprBits" name="TestExprBits.test_expr_bits" time="0.000">
        </testcase>
        <testcase classname="TestExprBytesCmp" name="TestExprBytesCmp.test_expr_bytes_cmp" time="0.000">
        </testcase>
        <testcase classname="TestExprBytesLiteral" name="TestExprBytesLiteral.test_expr_bytes_literal" time="0.014">
            <failure type="spec/lua/run_test_suite.lua:18: spec/lua/test_expr_bytes_literal.lua:5: module &apos;expr_bytes_literal&apos; not found:
	no field package.preload[&apos;expr_bytes_literal&apos;]
	no file &apos;../runtime/lua/expr_bytes_literal.lua&apos;
	no file &apos;spec/lua/expr_bytes_literal.lua&apos;
	no file &apos;spec/lua/extra/expr_bytes_literal.lua&apos;
	no file &apos;compiled/lua/expr_bytes_literal.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/expr_bytes_literal.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/expr_bytes_literal/init.lua&apos;
	no file &apos;./expr_bytes_literal.lua&apos;
	no file &apos;./expr_bytes_literal/init.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/expr_bytes_literal.so&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/loadall.so&apos;
	no file &apos;./expr_bytes_literal.so&apos;">
                <![CDATA[stack traceback:
	spec/lua/run_test_suite.lua:18: in upvalue 'TestExprBytesLiteral.test_expr_bytes_literal']]></failure>
        </testcase>
        <testcase classname="TestExprBytesOps" name="TestExprBytesOps.test_expr_bytes_ops" time="0.000">
        </testcase>
        <testcase classname="TestExprCalcArrayOps" name="TestExprCalcArrayOps.test_expr_calc_array_ops" time="0.000">
        </testcase>
        <testcase classname="TestExprEnum" name="TestExprEnum.test_expr_enum" time="0.000">
        </testcase>
        <testcase classname="TestExprIfIntOps" name="TestExprIfIntOps.test_expr_if_int_ops" time="0.000">
        </testcase>
        <testcase classname="TestExprIntDiv" name="TestExprIntDiv.test_expr_int_div" time="0.000">
        </testcase>
        <testcase classname="TestExprIoEof" name="TestExprIoEof.test_expr_io_eof" time="0.000">
        </testcase>
        <testcase classname="TestExprIoPos" name="TestExprIoPos.test_expr_io_pos" time="0.000">
        </testcase>
        <testcase classname="TestExprMod" name="TestExprMod.test_expr_mod" time="0.000">
        </testcase>
        <testcase classname="TestExprOpsParens" name="TestExprOpsParens.test_expr_ops_parens" time="0.000">
        </testcase>
        <testcase classname="TestExprSizeofType0" name="TestExprSizeofType0.test_expr_sizeof_type_0" time="0.000">
        </testcase>
        <testcase classname="TestExprSizeofType1" name="TestExprSizeofType1.test_expr_sizeof_type_1" time="0.000">
        </testcase>
        <testcase classname="TestExprSizeofValue0" name="TestExprSizeofValue0.test_expr_sizeof_value_0" time="0.000">
        </testcase>
        <testcase classname="TestExprSizeofValueSized" name="TestExprSizeofValueSized.test_expr_sizeof_value_sized" time="0.000">
        </testcase>
        <testcase classname="TestExprStrEncodings" name="TestExprStrEncodings.test_expr_str_encodings" time="0.002">
            <error type="../runtime/lua/string_decode.lua:42: Encoding SJIS not supported">
                <![CDATA[stack traceback:
	../runtime/lua/string_decode.lua:42: in function 'string_decode.decode'
	compiled/lua/expr_str_encodings.lua:24: in method '_read'
	compiled/lua/expr_str_encodings.lua:15: in local 'init'
	../runtime/lua/class.lua:70: in function <../runtime/lua/class.lua:66>
	(...tail calls...)
	spec/lua/test_expr_str_encodings.lua:10: in upvalue 'TestExprStrEncodings.test_expr_str_encodings']]></error>
        </testcase>
        <testcase classname="TestExprStrOps" name="TestExprStrOps.test_expr_str_ops" time="0.000">
        </testcase>
        <testcase classname="TestFixedContents" name="TestFixedContents.test_fixed_contents" time="0.000">
        </testcase>
        <testcase classname="TestFixedStruct" name="TestFixedStruct.test_fixed_struct" time="0.000">
        </testcase>
        <testcase classname="TestFloatToI" name="TestFloatToI.test_float_to_i" time="0.000">
        </testcase>
        <testcase classname="TestFloatingPoints" name="TestFloatingPoints.test_floating_points" time="0.000">
        </testcase>
        <testcase classname="TestHelloWorld" name="TestHelloWorld.test_hello_world" time="0.000">
        </testcase>
        <testcase classname="TestIfInstances" name="TestIfInstances.test_if_instances" time="0.000">
        </testcase>
        <testcase classname="TestIfStruct" name="TestIfStruct.test_if_struct" time="0.000">
        </testcase>
        <testcase classname="TestIfValues" name="TestIfValues.test_if_values" time="0.000">
        </testcase>
        <testcase classname="TestImports0" name="TestImports0.test_imports0" time="0.000">
        </testcase>
        <testcase classname="TestImportsAbs" name="TestImportsAbs.test_imports_abs" time="0.000">
        </testcase>
        <testcase classname="TestImportsAbsAbs" name="TestImportsAbsAbs.test_imports_abs_abs" time="0.000">
        </testcase>
        <testcase classname="TestImportsAbsRel" name="TestImportsAbsRel.test_imports_abs_rel" time="0.000">
        </testcase>
        <testcase classname="TestImportsCircularA" name="TestImportsCircularA.test_imports_circular_a" time="0.002">
            <failure type="spec/lua/run_test_suite.lua:18: error loading module &apos;imports_circular_b&apos; from file &apos;compiled/lua/imports_circular_b.lua&apos;:
	compiled/lua/imports_circular_b.lua:21: too many C levels (limit is 200) in function at line 18 near &apos;self&apos;">
                <![CDATA[stack traceback:
	spec/lua/run_test_suite.lua:18: in upvalue 'TestImportsCircularA.test_imports_circular_a']]></failure>
        </testcase>
        <testcase classname="TestImportsRel1" name="TestImportsRel1.test_imports_rel_1" time="0.000">
        </testcase>
        <testcase classname="TestIndexSizes" name="TestIndexSizes.test_index_sizes" time="0.000">
        </testcase>
        <testcase classname="TestIndexToParamEos" name="TestIndexToParamEos.test_index_to_param_eos" time="0.000">
        </testcase>
        <testcase classname="TestIndexToParamExpr" name="TestIndexToParamExpr.test_index_to_param_expr" time="0.000">
        </testcase>
        <testcase classname="TestIndexToParamUntil" name="TestIndexToParamUntil.test_index_to_param_until" time="0.000">
        </testcase>
        <testcase classname="TestInstanceIoUser" name="TestInstanceIoUser.test_instance_io_user" time="0.000">
        </testcase>
        <testcase classname="TestInstanceStd" name="TestInstanceStd.test_instance_std" time="0.000">
        </testcase>
        <testcase classname="TestInstanceStdArray" name="TestInstanceStdArray.test_instance_std_array" time="0.000">
        </testcase>
        <testcase classname="TestInstanceUserArray" name="TestInstanceUserArray.test_instance_user_array" time="0.000">
        </testcase>
        <testcase classname="TestIntegers" name="TestIntegers.test_integers" time="0.000">
        </testcase>
        <testcase classname="TestIntegersDoubleOverflow" name="TestIntegersDoubleOverflow.test_integers_double_overflow" time="0.000">
        </testcase>
        <testcase classname="TestIntegersMinMax" name="TestIntegersMinMax.test_integers_min_max" time="0.000">
        </testcase>
        <testcase classname="TestIoLocalVar" name="TestIoLocalVar.test_io_local_var" time="0.000">
        </testcase>
        <testcase classname="TestJsSignedRightShift" name="TestJsSignedRightShift.test_js_signed_right_shift" time="0.000">
        </testcase>
        <testcase classname="TestMetaTags" name="TestMetaTags.test_meta_tags" time="0.000">
        </testcase>
        <testcase classname="TestMetaXref" name="TestMetaXref.test_meta_xref" time="0.000">
        </testcase>
        <testcase classname="TestMultipleUse" name="TestMultipleUse.test_multiple_use" time="0.000">
        </testcase>
        <testcase classname="TestNavParent" name="TestNavParent.test_nav_parent" time="0.000">
        </testcase>
        <testcase classname="TestNavParent2" name="TestNavParent2.test_nav_parent2" time="0.000">
        </testcase>
        <testcase classname="TestNavParent3" name="TestNavParent3.test_nav_parent3" time="0.000">
        </testcase>
        <testcase classname="TestNavParentFalse" name="TestNavParentFalse.test_nav_parent_false" time="0.000">
        </testcase>
        <testcase classname="TestNavParentFalse2" name="TestNavParentFalse2.test_nav_parent_false2" time="0.000">
        </testcase>
        <testcase classname="TestNavParentOverride" name="TestNavParentOverride.test_nav_parent_override" time="0.000">
        </testcase>
        <testcase classname="TestNavParentSwitch" name="TestNavParentSwitch.test_nav_parent_switch" time="0.000">
        </testcase>
        <testcase classname="TestNavParentSwitchCast" name="TestNavParentSwitchCast.test_nav_parent_switch_cast" time="0.000">
        </testcase>
        <testcase classname="TestNavParentVsValueInst" name="TestNavParentVsValueInst.test_nav_parent_vs_value_inst" time="0.000">
        </testcase>
        <testcase classname="TestNavRoot" name="TestNavRoot.test_nav_root" time="0.000">
        </testcase>
        <testcase classname="TestNestedSameName" name="TestNestedSameName.test_nested_same_name" time="0.000">
        </testcase>
        <testcase classname="TestNestedSameName2" name="TestNestedSameName2.test_nested_same_name2" time="0.000">
        </testcase>
        <testcase classname="TestNestedTypeParam" name="TestNestedTypeParam.test_nested_type_param" time="0.000">
        </testcase>
        <testcase classname="TestNestedTypes" name="TestNestedTypes.test_nested_types" time="0.000">
        </testcase>
        <testcase classname="TestNestedTypes2" name="TestNestedTypes2.test_nested_types2" time="0.000">
        </testcase>
        <testcase classname="TestNestedTypes3" name="TestNestedTypes3.test_nested_types3" time="0.000">
        </testcase>
        <testcase classname="TestNonStandard" name="TestNonStandard.test_non_standard" time="0.000">
        </testcase>
        <testcase classname="TestOpaqueExternalType" name="TestOpaqueExternalType.test_opaque_external_type" time="0.000">
        </testcase>
        <testcase classname="TestOpaqueExternalType02Parent" name="TestOpaqueExternalType02Parent.test_opaque_external_type_02_parent" time="0.000">
        </testcase>
        <testcase classname="TestOpaqueWithParam" name="TestOpaqueWithParam.test_opaque_with_param" time="0.000">
        </testcase>
        <testcase classname="TestOptionalId" name="TestOptionalId.test_optional_id" time="0.000">
        </testcase>
        <testcase classname="TestParamsCallExtraParens" name="TestParamsCallExtraParens.test_params_call_extra_parens" time="0.000">
        </testcase>
        <testcase classname="TestParamsCallShort" name="TestParamsCallShort.test_params_call_short" time="0.000">
        </testcase>
        <testcase classname="TestParamsDef" name="TestParamsDef.test_params_def" time="0.000">
        </testcase>
        <testcase classname="TestParamsEnum" name="TestParamsEnum.test_params_enum" time="0.000">
        </testcase>
        <testcase classname="TestParamsPassArrayInt" name="TestParamsPassArrayInt.test_params_pass_array_int" time="0.000">
        </testcase>
        <testcase classname="TestParamsPassArrayStr" name="TestParamsPassArrayStr.test_params_pass_array_str" time="0.000">
        </testcase>
        <testcase classname="TestParamsPassArrayStruct" name="TestParamsPassArrayStruct.test_params_pass_array_struct" time="0.000">
        </testcase>
        <testcase classname="TestParamsPassArrayUsertype" name="TestParamsPassArrayUsertype.test_params_pass_array_usertype" time="0.000">
        </testcase>
        <testcase classname="TestParamsPassBool" name="TestParamsPassBool.test_params_pass_bool" time="0.001">
            <failure type="spec/lua/test_params_pass_bool.lua:16: expected: false, actual: 0">
                <![CDATA[stack traceback:
	spec/lua/test_params_pass_bool.lua:16: in upvalue 'TestParamsPassBool.test_params_pass_bool']]></failure>
        </testcase>
        <testcase classname="TestParamsPassStruct" name="TestParamsPassStruct.test_params_pass_struct" time="0.000">
        </testcase>
        <testcase classname="TestParamsPassUsertype" name="TestParamsPassUsertype.test_params_pass_usertype" time="0.000">
        </testcase>
        <testcase classname="TestPositionAbs" name="TestPositionAbs.test_position_abs" time="0.000">
        </testcase>
        <testcase classname="TestPositionInSeq" name="TestPositionInSeq.test_position_in_seq" time="0.000">
        </testcase>
        <testcase classname="TestPositionToEnd" name="TestPositionToEnd.test_position_to_end" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceBytes" name="TestProcessCoerceBytes.test_process_coerce_bytes" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceSwitch" name="TestProcessCoerceSwitch.test_process_coerce_switch" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceUsertype1" name="TestProcessCoerceUsertype1.test_process_coerce_usertype1" time="0.000">
        </testcase>
        <testcase classname="TestProcessCoerceUsertype2" name="TestProcessCoerceUsertype2.test_process_coerce_usertype2" time="0.000">
        </testcase>
        <testcase classname="TestProcessCustom" name="TestProcessCustom.test_process_custom" time="0.000">
        </testcase>
        <testcase classname="TestProcessCustomNoArgs" name="TestProcessCustomNoArgs.test_process_custom_no_args" time="0.000">
        </testcase>
        <testcase classname="TestProcessRepeatBytes" name="TestProcessRepeatBytes.test_process_repeat_bytes" time="0.000">
        </testcase>
        <testcase classname="TestProcessRepeatUsertype" name="TestProcessRepeatUsertype.test_process_repeat_usertype" time="0.000">
        </testcase>
        <testcase classname="TestProcessRotate" name="TestProcessRotate.test_process_rotate" time="0.000">
        </testcase>
        <testcase classname="TestProcessToUser" name="TestProcessToUser.test_process_to_user" time="0.000">
        </testcase>
        <testcase classname="TestProcessXor4Const" name="TestProcessXor4Const.test_process_xor4_const" time="0.000">
        </testcase>
        <testcase classname="TestProcessXor4Value" name="TestProcessXor4Value.test_process_xor4_value" time="0.000">
        </testcase>
        <testcase classname="TestProcessXorConst" name="TestProcessXorConst.test_process_xor_const" time="0.000">
        </testcase>
        <testcase classname="TestProcessXorValue" name="TestProcessXorValue.test_process_xor_value" time="0.000">
        </testcase>
        <testcase classname="TestRecursiveOne" name="TestRecursiveOne.test_recursive_one" time="0.000">
        </testcase>
        <testcase classname="TestRepeatEosBit" name="TestRepeatEosBit.test_repeat_eos_bit" time="0.000">
        </testcase>
        <testcase classname="TestRepeatEosStruct" name="TestRepeatEosStruct.test_repeat_eos_struct" time="0.000">
        </testcase>
        <testcase classname="TestRepeatEosU4" name="TestRepeatEosU4.test_repeat_eos_u4" time="0.000">
        </testcase>
        <testcase classname="TestRepeatNStruct" name="TestRepeatNStruct.test_repeat_n_struct" time="0.000">
        </testcase>
        <testcase classname="TestRepeatNStrz" name="TestRepeatNStrz.test_repeat_n_strz" time="0.000">
        </testcase>
        <testcase classname="TestRepeatNStrzDouble" name="TestRepeatNStrzDouble.test_repeat_n_strz_double" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilCalcArrayType" name="TestRepeatUntilCalcArrayType.test_repeat_until_calc_array_type" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilComplex" name="TestRepeatUntilComplex.test_repeat_until_complex" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilS4" name="TestRepeatUntilS4.test_repeat_until_s4" time="0.000">
        </testcase>
        <testcase classname="TestRepeatUntilSized" name="TestRepeatUntilSized.test_repeat_until_sized" time="0.000">
        </testcase>
        <testcase classname="TestStrEncodings" name="TestStrEncodings.test_str_encodings" time="0.002">
            <error type="../runtime/lua/string_decode.lua:42: Encoding SJIS not supported">
                <![CDATA[stack traceback:
	../runtime/lua/string_decode.lua:42: in function 'string_decode.decode'
	compiled/lua/str_encodings.lua:24: in method '_read'
	compiled/lua/str_encodings.lua:15: in local 'init'
	../runtime/lua/class.lua:70: in function <../runtime/lua/class.lua:66>
	(...tail calls...)
	spec/lua/test_str_encodings.lua:10: in upvalue 'TestStrEncodings.test_str_encodings']]></error>
        </testcase>
        <testcase classname="TestStrEncodingsDefault" name="TestStrEncodingsDefault.test_str_encodings_default" time="0.002">
            <error type="../runtime/lua/string_decode.lua:42: Encoding SJIS not supported">
                <![CDATA[stack traceback:
	../runtime/lua/string_decode.lua:42: in function 'string_decode.decode'
	compiled/lua/str_encodings_default.lua:38: in method '_read'
	compiled/lua/str_encodings_default.lua:31: in local 'init'
	../runtime/lua/class.lua:70: in field 'Subtype'
	compiled/lua/str_encodings_default.lua:21: in method '_read'
	compiled/lua/str_encodings_default.lua:15: in local 'init'
	../runtime/lua/class.lua:70: in function <../runtime/lua/class.lua:66>
	(...tail calls...)
	spec/lua/test_str_encodings_default.lua:10: in upvalue 'TestStrEncodingsDefault.test_str_encodings_default']]></error>
        </testcase>
        <testcase classname="TestStrEos" name="TestStrEos.test_str_eos" time="0.000">
        </testcase>
        <testcase classname="TestStrLiterals" name="TestStrLiterals.test_str_literals" time="0.000">
        </testcase>
        <testcase classname="TestStrLiterals2" name="TestStrLiterals2.test_str_literals2" time="0.000">
        </testcase>
        <testcase classname="TestStrPadTerm" name="TestStrPadTerm.test_str_pad_term" time="0.000">
        </testcase>
        <testcase classname="TestStrPadTermEmpty" name="TestStrPadTermEmpty.test_str_pad_term_empty" time="0.000">
        </testcase>
        <testcase classname="TestSwitchBytearray" name="TestSwitchBytearray.test_switch_bytearray" time="0.000">
        </testcase>
        <testcase classname="TestSwitchCast" name="TestSwitchCast.test_switch_cast" time="0.000">
        </testcase>
        <testcase classname="TestSwitchElseOnly" name="TestSwitchElseOnly.test_switch_else_only" time="0.000">
        </testcase>
        <testcase classname="TestSwitchIntegers" name="TestSwitchIntegers.test_switch_integers" time="0.000">
        </testcase>
        <testcase classname="TestSwitchIntegers2" name="TestSwitchIntegers2.test_switch_integers2" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualEnum" name="TestSwitchManualEnum.test_switch_manual_enum" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualEnumInvalid" name="TestSwitchManualEnumInvalid.test_switch_manual_enum_invalid" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualEnumInvalidElse" name="TestSwitchManualEnumInvalidElse.test_switch_manual_enum_invalid_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualInt" name="TestSwitchManualInt.test_switch_manual_int" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntElse" name="TestSwitchManualIntElse.test_switch_manual_int_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntSize" name="TestSwitchManualIntSize.test_switch_manual_int_size" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntSizeElse" name="TestSwitchManualIntSizeElse.test_switch_manual_int_size_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualIntSizeEos" name="TestSwitchManualIntSizeEos.test_switch_manual_int_size_eos" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualStr" name="TestSwitchManualStr.test_switch_manual_str" time="0.000">
        </testcase>
        <testcase classname="TestSwitchManualStrElse" name="TestSwitchManualStrElse.test_switch_manual_str_else" time="0.000">
        </testcase>
        <testcase classname="TestSwitchMultiBoolOps" name="TestSwitchMultiBoolOps.test_switch_multi_bool_ops" time="0.000">
        </testcase>
        <testcase classname="TestSwitchRepeatExpr" name="TestSwitchRepeatExpr.test_switch_repeat_expr" time="0.000">
        </testcase>
        <testcase classname="TestSwitchRepeatExprInvalid" name="TestSwitchRepeatExprInvalid.test_switch_repeat_expr_invalid" time="0.000">
        </testcase>
        <testcase classname="TestTermBytes" name="TestTermBytes.test_term_bytes" time="0.000">
        </testcase>
        <testcase classname="TestTermStrz" name="TestTermStrz.test_term_strz" time="0.000">
        </testcase>
        <testcase classname="TestTermU1Val" name="TestTermU1Val.test_term_u1_val" time="0.000">
        </testcase>
        <testcase classname="TestTsPacketHeader" name="TestTsPacketHeader.test_ts_packet_header" time="0.000">
        </testcase>
        <testcase classname="TestTypeIntUnaryOp" name="TestTypeIntUnaryOp.test_type_int_unary_op" time="0.000">
        </testcase>
        <testcase classname="TestTypeTernary" name="TestTypeTernary.test_type_ternary" time="0.000">
        </testcase>
        <testcase classname="TestTypeTernary2ndFalsy" name="TestTypeTernary2ndFalsy.test_type_ternary_2nd_falsy" time="0.000">
        </testcase>
        <testcase classname="TestTypeTernaryOpaque" name="TestTypeTernaryOpaque.test_type_ternary_opaque" time="0.000">
        </testcase>
        <testcase classname="TestUserType" name="TestUserType.test_user_type" time="0.000">
        </testcase>
        <testcase classname="TestValidEqStrEncodings" name="TestValidEqStrEncodings.test_valid_eq_str_encodings" time="0.002">
            <error type="../runtime/lua/string_decode.lua:42: Encoding SJIS not supported">
                <![CDATA[stack traceback:
	../runtime/lua/string_decode.lua:42: in function 'string_decode.decode'
	compiled/lua/valid_eq_str_encodings.lua:30: in method '_read'
	compiled/lua/valid_eq_str_encodings.lua:15: in local 'init'
	../runtime/lua/class.lua:70: in function <../runtime/lua/class.lua:66>
	(...tail calls...)
	spec/lua/test_valid_eq_str_encodings.lua:10: in upvalue 'TestValidEqStrEncodings.test_valid_eq_str_encodings']]></error>
        </testcase>
        <testcase classname="TestValidFailAnyofInt" name="TestValidFailAnyofInt.test_valid_fail_anyof_int" time="0.000">
        </testcase>
        <testcase classname="TestValidFailContents" name="TestValidFailContents.test_valid_fail_contents" time="0.000">
        </testcase>
        <testcase classname="TestValidFailEqBytes" name="TestValidFailEqBytes.test_valid_fail_eq_bytes" time="0.000">
        </testcase>
        <testcase classname="TestValidFailEqInt" name="TestValidFailEqInt.test_valid_fail_eq_int" time="0.000">
        </testcase>
        <testcase classname="TestValidFailEqStr" name="TestValidFailEqStr.test_valid_fail_eq_str" time="0.000">
        </testcase>
        <testcase classname="TestValidFailExpr" name="TestValidFailExpr.test_valid_fail_expr" time="0.013">
            <failure type="spec/lua/run_test_suite.lua:18: spec/lua/test_valid_fail_expr.lua:5: module &apos;valid_fail_expr&apos; not found:
	no field package.preload[&apos;valid_fail_expr&apos;]
	no file &apos;../runtime/lua/valid_fail_expr.lua&apos;
	no file &apos;spec/lua/valid_fail_expr.lua&apos;
	no file &apos;spec/lua/extra/valid_fail_expr.lua&apos;
	no file &apos;compiled/lua/valid_fail_expr.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/valid_fail_expr.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/valid_fail_expr/init.lua&apos;
	no file &apos;./valid_fail_expr.lua&apos;
	no file &apos;./valid_fail_expr/init.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/valid_fail_expr.so&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/loadall.so&apos;
	no file &apos;./valid_fail_expr.so&apos;">
                <![CDATA[stack traceback:
	spec/lua/run_test_suite.lua:18: in upvalue 'TestValidFailExpr.test_valid_fail_expr']]></failure>
        </testcase>
        <testcase classname="TestValidFailInst" name="TestValidFailInst.test_valid_fail_inst" time="0.000">
        </testcase>
        <testcase classname="TestValidFailMaxInt" name="TestValidFailMaxInt.test_valid_fail_max_int" time="0.000">
        </testcase>
        <testcase classname="TestValidFailMinInt" name="TestValidFailMinInt.test_valid_fail_min_int" time="0.000">
        </testcase>
        <testcase classname="TestValidFailRangeBytes" name="TestValidFailRangeBytes.test_valid_fail_range_bytes" time="0.000">
        </testcase>
        <testcase classname="TestValidFailRangeFloat" name="TestValidFailRangeFloat.test_valid_fail_range_float" time="0.000">
        </testcase>
        <testcase classname="TestValidFailRangeInt" name="TestValidFailRangeInt.test_valid_fail_range_int" time="0.000">
        </testcase>
        <testcase classname="TestValidFailRangeStr" name="TestValidFailRangeStr.test_valid_fail_range_str" time="0.000">
        </testcase>
        <testcase classname="TestValidLong" name="TestValidLong.test_valid_long" time="0.000">
        </testcase>
        <testcase classname="TestValidNotParsedIf" name="TestValidNotParsedIf.test_valid_not_parsed_if" time="0.000">
        </testcase>
        <testcase classname="TestValidShort" name="TestValidShort.test_valid_short" time="0.000">
        </testcase>
        <testcase classname="TestValidSwitch" name="TestValidSwitch.test_valid_switch" time="0.000">
        </testcase>
        <testcase classname="TestYamlInts" name="TestYamlInts.test_yaml_ints" time="0.000">
        </testcase>
        <testcase classname="TestZlibSurrounded" name="TestZlibSurrounded.test_zlib_surrounded" time="0.012">
            <failure type="spec/lua/run_test_suite.lua:18: spec/lua/test_zlib_surrounded.lua:5: module &apos;zlib_surrounded&apos; not found:
	no field package.preload[&apos;zlib_surrounded&apos;]
	no file &apos;../runtime/lua/zlib_surrounded.lua&apos;
	no file &apos;spec/lua/zlib_surrounded.lua&apos;
	no file &apos;spec/lua/extra/zlib_surrounded.lua&apos;
	no file &apos;compiled/lua/zlib_surrounded.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/zlib_surrounded.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/zlib_surrounded/init.lua&apos;
	no file &apos;./zlib_surrounded.lua&apos;
	no file &apos;./zlib_surrounded/init.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/zlib_surrounded.so&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/loadall.so&apos;
	no file &apos;./zlib_surrounded.so&apos;">
                <![CDATA[stack traceback:
	spec/lua/run_test_suite.lua:18: in upvalue 'TestZlibSurrounded.test_zlib_surrounded']]></failure>
        </testcase>
        <testcase classname="TestZlibWithHeader78" name="TestZlibWithHeader78.test_zlib_with_header_78" time="0.014">
            <failure type="spec/lua/run_test_suite.lua:18: spec/lua/test_zlib_with_header_78.lua:5: module &apos;zlib_with_header_78&apos; not found:
	no field package.preload[&apos;zlib_with_header_78&apos;]
	no file &apos;../runtime/lua/zlib_with_header_78.lua&apos;
	no file &apos;spec/lua/zlib_with_header_78.lua&apos;
	no file &apos;spec/lua/extra/zlib_with_header_78.lua&apos;
	no file &apos;compiled/lua/zlib_with_header_78.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/zlib_with_header_78.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/share/lua/5.3/zlib_with_header_78/init.lua&apos;
	no file &apos;./zlib_with_header_78.lua&apos;
	no file &apos;./zlib_with_header_78/init.lua&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/zlib_with_header_78.so&apos;
	no file &apos;/home/travis/build/kaitai-io/ci_targets/lua_install/lib/lua/5.3/loadall.so&apos;
	no file &apos;./zlib_with_header_78.so&apos;">
                <![CDATA[stack traceback:
	spec/lua/run_test_suite.lua:18: in upvalue 'TestZlibWithHeader78.test_zlib_with_header_78']]></failure>
        </testcase>
    <system-out/>
    <system-err/>
    </testsuite>
</testsuites>
