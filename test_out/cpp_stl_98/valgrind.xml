<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: /tests/compiled/cpp_stl_98/bin/ks_tests</line>
</preamble>

<pid>2033</pid>
<ppid>2032</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--leak-check=full</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=test_out/cpp_stl_98/valgrind.xml</arg>
  </vargv>
  <argv>
    <exe>/tests/compiled/cpp_stl_98/bin/ks_tests</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.239 </time>
</status>


<status>
  <state>FINISHED</state>
  <time>00:00:00:05.895 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are definitely lost in loss record 1 of 1</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x4C2B0E0</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new(unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x64F4F4</ip>
      <obj>/tests/compiled/cpp_stl_98/bin/ks_tests</obj>
      <fn>process_repeat_bytes_t::_read()</fn>
      <dir>/tests/compiled/cpp_stl_98</dir>
      <file>process_repeat_bytes.cpp</file>
      <line>22</line>
    </frame>
    <frame>
      <ip>0x64F422</ip>
      <obj>/tests/compiled/cpp_stl_98/bin/ks_tests</obj>
      <fn>process_repeat_bytes_t::process_repeat_bytes_t(kaitai::kstream*, kaitai::kstruct*, process_repeat_bytes_t*)</fn>
      <dir>/tests/compiled/cpp_stl_98</dir>
      <file>process_repeat_bytes.cpp</file>
      <line>13</line>
    </frame>
    <frame>
      <ip>0x5DEA80</ip>
      <obj>/tests/compiled/cpp_stl_98/bin/ks_tests</obj>
      <fn>test_process_repeat_bytes::test_method()</fn>
      <dir>/tests/spec/cpp_stl_98</dir>
      <file>test_process_repeat_bytes.cpp</file>
      <line>12</line>
    </frame>
    <frame>
      <ip>0x5DE9E0</ip>
      <obj>/tests/compiled/cpp_stl_98/bin/ks_tests</obj>
      <fn>test_process_repeat_bytes_invoker()</fn>
      <dir>/tests/spec/cpp_stl_98</dir>
      <file>test_process_repeat_bytes.cpp</file>
      <line>9</line>
    </frame>
    <frame>
      <ip>0x527515</ip>
      <obj>/tests/compiled/cpp_stl_98/bin/ks_tests</obj>
      <fn>boost::unit_test::ut_detail::unused boost::unit_test::ut_detail::invoker&lt;boost::unit_test::ut_detail::unused&gt;::invoke&lt;void (*)()&gt;(void (*&amp;)())</fn>
      <dir>/usr/include/boost/test/utils</dir>
      <file>callback.hpp</file>
      <line>56</line>
    </frame>
    <frame>
      <ip>0x5274EA</ip>
      <obj>/tests/compiled/cpp_stl_98/bin/ks_tests</obj>
      <fn>boost::unit_test::ut_detail::callback0_impl_t&lt;boost::unit_test::ut_detail::unused, void (*)()&gt;::invoke()</fn>
      <dir>/usr/include/boost/test/utils</dir>
      <file>callback.hpp</file>
      <line>89</line>
    </frame>
    <frame>
      <ip>0x4E9F1F0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
    </frame>
    <frame>
      <ip>0x4E7A545</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::execution_monitor::catch_signals(boost::unit_test::callback0&lt;int&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E7AD82</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::execution_monitor::execute(boost::unit_test::callback0&lt;int&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E9F2F1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::unit_test::test_case const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x4E88F93</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.54.0</obj>
      <fn>boost::unit_test::framework_impl::visit(boost::unit_test::test_case const&amp;)</fn>
    </frame>
  </stack>
</error>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

